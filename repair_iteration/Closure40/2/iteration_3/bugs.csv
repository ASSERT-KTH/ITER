bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  nameInfo.name  =  t.name;  [CE]  cannot  find  symbol  name  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.name;	  nameInfo.name    =    ns.name;    	non-compiled	[CE]  cannot  find  symbol  name	78	None	replace
2	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  parent);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name,    conn);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	54	None	replace
3	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation();	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
4	[BUG]  [BUGGY]  nameInfo.name  =  ns.createNameInformation();  [CE]  cannot  find  symbol  ns  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.createNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.createNameInformation();	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  cannot  find  symbol  ns	95	None	replace
5	[BUG]  [BUGGY]  nameInfo.name  =  ns.NameInformation.createNameInformation();  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.NameInformation.createNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.NameInformation.createNameInformation();	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  package  ns  does  not  exist	95	None	replace
6	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation();  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation();	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	95	None	replace
7	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.createNameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  ns.createNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  ns.createNameInformation();	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	95	None	replace
8	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(convention.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(convention.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newInstance(convention.name);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
9	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  parent);  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  parent);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	107	None	replace
10	[BUG]  [BUGGY]  nameInfo.name  =  t.newInstance(ns.PageSelectionModel.newInstance(classes.name);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.newInstance(ns.PageSelectionModel.newInstance(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.newInstance(ns.PageSelectionModel.newInstance(classes.name);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes.name);    	non-compiled	[CE]  ')'  expected	107	None	replace
11	[BUG]  [BUGGY]  nameInfo.name  =  classes.newInstance(ns.PageSelectionModel.name);  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.newInstance(ns.PageSelectionModel.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.newInstance(ns.PageSelectionModel.name);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	107	None	replace
12	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name);	  nameInfo.name    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	98	None	replace
13	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  nameInfo.name);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  nameInfo.name);	  nameInfo.name    =    new    NameInformation(classes.name);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	98	None	replace
14	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes.name,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes.name,  classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes.name,  classes.name);	  nameInfo.name    =    new    NameInformation(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	98	None	replace
15	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(singletonGetterClass.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(singletonGetterClass.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(singletonGetterClass.name);	  nameInfo.name    =    new    NameInformation(classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	98	None	replace
16	[BUG]  [BUGGY]  nameInfo.name  =  ns.NameInformation.getName();  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.NameInformation.getName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.NameInformation.getName();	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  package  ns  does  not  exist	96	None	replace
17	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.class.getName();  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.class.getName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.class.getName();	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  package  ns  does  not  exist	96	None	replace
18	[BUG]  [BUGGY]  nameInfo.name  =  ns.getName();  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.getName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.getName();	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  cannot  find  symbol  ns	96	None	replace
19	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.getName()  +  1;  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.getName()  +  1;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.getName()  +  1;	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  package  ns  does  not  exist	96	None	replace
20	[BUG]  [BUGGY]  NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  NameInfo  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    timeout    	non-compiled	[CE]  cannot  find  symbol  NameInfo	36	None	replace
21	[BUG]  [BUGGY]  timeout  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    timeout    	compilable	timeout	36	1	replace
22	[BUG]  [BUGGY]  name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  timeout  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    timeout    	compilable	timeout	36	1	replace
23	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameSelectionModel.newInstance();  [CE]  cannot  find  symbol  nameSelectionModel  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameSelectionModel.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameSelectionModel.newInstance();	  nameInfo.name    =    ns.NameSelectionModel.newInstance();    	non-compiled	[CE]  cannot  find  symbol  nameSelectionModel	74	None	replace
24	[BUG]  [BUGGY]  nameInfo.name  =  classes.NameSelectionModel.newInstance();  [CE]  cannot  find  symbol  NameSelectionModel  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.NameSelectionModel.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.NameSelectionModel.newInstance();	  nameInfo.name    =    ns.NameSelectionModel.newInstance();    	non-compiled	[CE]  cannot  find  symbol  NameSelectionModel	74	None	replace
25	[BUG]  [BUGGY]  nameInfo.name  =  ns.NameSelectionModel.newInstance(classes);  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.NameSelectionModel.newInstance(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.NameSelectionModel.newInstance(classes);	  nameInfo.name    =    ns.NameSelectionModel.newInstance();    	non-compiled	[CE]  package  ns  does  not  exist	74	None	replace
26	[BUG]  [BUGGY]  nameInfo.name  =  t.newNameSelectionModel();  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.newNameSelectionModel();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.newNameSelectionModel();	  nameInfo.name    =    ns.NameSelectionModel.newInstance();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
27	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  parent,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  parent,  ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(n,  parent,  ns.PageSelectionModel);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    names);    	non-compiled	[CE]  cannot  find  symbol  ns	63	None	replace
28	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    names);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
29	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  types);  [CE]  cannot  find  symbol  types  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  types);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  types);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    names);    	non-compiled	[CE]  cannot  find  symbol  types	63	None	replace
30	[BUG]  [BUGGY]  nameInfo.name  =  ns.SubclassName;  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.SubclassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.SubclassName;	  nameInfo.name    =    types.subclassName;    	non-compiled	[CE]  cannot  find  symbol  ns	57	None	replace
31	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  classes;  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  classes;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  classes;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    classes;    	non-compiled	[CE]  cannot  find  symbol  names	34	None	replace
32	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  names;  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  names;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.subclassName  :  names;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    classes;    	non-compiled	[CE]  cannot  find  symbol  names	34	None	replace
33	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(ns.PageSelectionModel,  n);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(ns.PageSelectionModel,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(ns.PageSelectionModel,  n);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol  ns	7	None	replace
34	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  classes);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  package  ns  does  not  exist	7	None	replace
35	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n,  parent,  classes);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(t,  n,  parent,  classes);	  nameInfo.name    =    names.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	62	None	replace
36	[BUG]  [BUGGY]  nameInfo.name  =  ns.createNameInformation(t,  n,  parent);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.createNameInformation(t,  n,  parent);	  nameInfo.name    =    names.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  ns	62	None	replace
37	[BUG]  [BUGGY]  nameInfo.name  =  ns.createNameInformation(t,  names,  parent);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.createNameInformation(t,  names,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.createNameInformation(t,  names,  parent);	  nameInfo.name    =    names.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	62	None	replace
38	[BUG]  [BUGGY]  nameInfo.name  =  namesCopy.createNameInformation(t,  n,  parent);  [CE]  cannot  find  symbol  namesCopy  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  namesCopy.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  namesCopy.createNameInformation(t,  n,  parent);	  nameInfo.name    =    names.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  namesCopy	62	None	replace
39	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n,  classes);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(t,  n,  classes);	  nameInfo.name    =    names.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	62	None	replace
40	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  parent);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  parent);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  package  ns  does  not  exist	44	None	replace
41	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  classes);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	44	None	replace
42	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(convention,  classes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(convention,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(convention,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
43	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.onlyAffectsClassDef);  [CE]  package  ns  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.onlyAffectsClassDef);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.onlyAffectsClassDef);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  package  ns  does  not  exist	44	None	replace
44	[BUG]  [BUGGY]  nameInfo.name  =  classes.createNameInformation(convention,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.createNameInformation(convention,  ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.createNameInformation(convention,  ns.PageSelectionModel);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	44	None	replace
45	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.type);  [CE]  cannot  find  symbol  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.type);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.type);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  type	44	None	replace
46	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  names);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  names);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	44	None	replace
47	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  classes);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  classes);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n);    	non-compiled	[CE]  package  ns  does  not  exist	94	None	replace
48	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  classes);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  classes);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n);    	non-compiled	[CE]  package  ns  does  not  exist	94	None	replace
49	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(ns.PageSelectionProvider,  n);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(ns.PageSelectionProvider,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(ns.PageSelectionProvider,  n);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol  ns	94	None	replace
50	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.getName()  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.getName()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.getName()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.getName()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	31	None	replace
51	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.getName()  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.getName()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.getName()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.getName()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
52	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.getName()  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.getName()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.getName()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.getName()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	31	None	replace
53	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  names;  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  names;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.subclassName  :  names;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    classes;    	non-compiled	[CE]  cannot  find  symbol  names	108	None	replace
54	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  classes,  parent);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(n,  classes,  parent);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
55	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.type);  [CE]  cannot  find  symbol  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.type);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.type);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  cannot  find  symbol  type	59	None	replace
56	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.onlyAffectsClassDef);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.onlyAffectsClassDef);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.onlyAffectsClassDef);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  package  ns  does  not  exist	59	None	replace
57	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n,  classes,  parent);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n,  classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(t,  n,  classes,  parent);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	59	None	replace
58	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  names.name;  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  names.name;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    names.name;    	non-compiled	[CE]  cannot  find  symbol  names	50	None	replace
59	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  classes.name;  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  classes.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  classes.name;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    names.name;    	non-compiled	[CE]  cannot  find  symbol  names	50	None	replace
60	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.subclassName  :  names.name;  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.subclassName  :  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.subclassName  :  names.name;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    names.name;    	non-compiled	[CE]  cannot  find  symbol  names	50	None	replace
61	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.nameInformation  :  new  NameInformation();  [CE]  cannot  find  symbol  nameInformation  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.nameInformation  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.nameInformation  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameId    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  nameInformation	64	None	replace
62	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameId    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	64	None	replace
63	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	27	None	replace
64	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  names.subclassName  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  names.subclassName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  names.subclassName  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	27	None	replace
65	[BUG]  [BUGGY]  nameInfo.name  =  ns.newInstance();  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.newInstance();	  nameInfo.name    =    names.newInstance();    	non-compiled	[CE]  cannot  find  symbol  ns	73	None	replace
66	[BUG]  [BUGGY]  nameInfo.name  =  types.newInstance();  [CE]  cannot  find  symbol  types  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  types.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  types.newInstance();	  nameInfo.name    =    names.newInstance();    	non-compiled	[CE]  cannot  find  symbol  types	73	None	replace
67	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  new  NameInformation();  [CE]  cannot  find  symbol  name  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.name  :  new  NameInformation();	  nameInfo.name    =    names!=    null?    classes.name    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class);  [CE]  package  parent  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  parent  does  not  exist	11	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol  ns	11	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent.class);  [CE]  package  parent.PageSelectionModel  does  not  exist  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  parent.PageSelectionModel  does  not  exist	11	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  ns  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol  ns	11	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class);  [CE]  package  classes  does  not  exist  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes  does  not  exist	11	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	11	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.class);  [CE]  cannot  find  symbol  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
75	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.getNameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  ns.getNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  ns.getNameInformation();	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
76	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.getNameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.getNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.getNameInformation();	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
77	[BUG]  [BUGGY]  NameInformation  nameInfo  =  n.getNameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  n.getNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  n.getNameInformation();	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
78	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation();	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
79	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getNameInformation());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getNameInformation());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getNameInformation());	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
80	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.name;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  names.name;	  NameInfo    nameInfo    =    classes.name;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
81	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.name;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  ns.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  ns.name;	  NameInfo    nameInfo    =    classes.name;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
82	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.name  :  nameInfo;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.name  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes!=  null?  classes.name  :  nameInfo;	  NameInfo    nameInfo    =    classes.name;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
83	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation();  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation();	  NameInfo    nameInfo    =    classes.name;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
84	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names;  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  names;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  names;	  NameInfo    nameInfo    =    classes.name;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
85	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  nameInfo.name;  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.name  :  nameInfo.name;	  nameInfo.name    =    names!=    null?    classes.name    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	85	None	replace
86	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  names.name;  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.name  :  names.name;	  nameInfo.name    =    names!=    null?    classes.name    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	85	None	replace
87	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names;	  NameInformation    nameInfo    =    classes.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	103	None	replace
88	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  ns.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  ns.name;	  NameInformation    nameInfo    =    classes.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	103	None	replace
89	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.name  :  nameInfo;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.name  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.name  :  nameInfo;	  NameInformation    nameInfo    =    classes.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	103	None	replace
90	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  ns.PageSelectionModel,  classes);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  ns.PageSelectionModel,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(n,  ns.PageSelectionModel,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	8	None	replace
91	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.onlyAffectsClassDef);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.onlyAffectsClassDef);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.onlyAffectsClassDef);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes);    	non-compiled	[CE]  package  ns  does  not  exist	8	None	replace
92	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo;  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo;	  nameInfo.name    =    names!=    null?    classes.subclassName    :    names;    	non-compiled	[CE]  incompatible  types	33	None	replace
93	[BUG]  [BUGGY]  nameInfo.name  =  ns.names;  [CE]  cannot  find  symbol  ns  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.names;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.names;	  nameInfo.name    =    classes.names;    	non-compiled	[CE]  cannot  find  symbol  ns	79	None	replace
94	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  info.name;  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  info.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.name  :  info.name;	  nameInfo.name    =    classes!=    null?    classes.name    :    info.name;    	non-compiled	[CE]  cannot  find  symbol  names	75	None	replace
95	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  info.name;  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  info.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.name  :  info.name;	  nameInfo.name    =    classes!=    null?    classes.name    :    info.name;    	non-compiled	[CE]  cannot  find  symbol  names	75	None	replace
96	[BUG]  [BUGGY]  nameInfo.name  =  info!=  null?  classes.name  :  info.name;  [CE]  cannot  find  symbol  info  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  info!=  null?  classes.name  :  info.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  info!=  null?  classes.name  :  info.name;	  nameInfo.name    =    classes!=    null?    classes.name    :    info.name;    	non-compiled	[CE]  cannot  find  symbol  info	75	None	replace
97	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  info.name  :  classes.name;  [CE]  cannot  find  symbol  info  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  info.name  :  classes.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  info.name  :  classes.name;	  nameInfo.name    =    classes!=    null?    classes.name    :    info.name;    	non-compiled	[CE]  cannot  find  symbol  info	75	None	replace
98	[BUG]  [BUGGY]  NameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  NameInfo  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	41	None	replace
99	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  parent,  classes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(n,  parent,  classes);	  nameInfo.name    =    t.createNameInformation(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
100	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  classes);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(n,  classes);	  nameInfo.name    =    t.createNameInformation(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
101	[BUG]  [BUGGY]  nameInfo.name  =  ns.createNameInformation(t,  parent);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.createNameInformation(t,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.createNameInformation(t,  parent);	  nameInfo.name    =    t.createNameInformation(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  ns	60	None	replace
102	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(singletonGetterClass,  n);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(singletonGetterClass,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(singletonGetterClass,  n);	  nameInfo.name    =    t.createNameInformation(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	60	None	replace
103	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  names.name  :  names.name;  [CE]  cannot  find  symbol  names  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  names.name  :  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  names.name  :  names.name;	  nameInfo.name    =    classes    ==    null?    classes.name    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	22	None	replace
104	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  names.name;  [CE]  cannot  find  symbol  name  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.name  :  names.name;	  nameInfo.name    =    classes    ==    null?    classes.name    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  name	22	None	replace
105	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;	          NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	89	None	replace
106	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();	          NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	89	None	replace
107	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.nameInfo;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  ns.nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  ns.nameInfo;	          NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	89	None	replace
108	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.nameInfo  :  nameInfo;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.nameInfo  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes  ==  null?  classes.nameInfo  :  nameInfo;	          NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	89	None	replace
109	[BUG]  [BUGGY]  timeout  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	39	1	add
110	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  timeout  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	39	1	add
111	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	39	None	add
112	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  NameInfo  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameInfo	39	None	add
113	[BUG]  [BUGGY]  timeout  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	39	1	add
114	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  timeout  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	39	1	add
115	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	39	None	add
116	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subClassName  :  nameInfo.name;  [CE]  cannot  find  symbol  subClassName  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subClassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subClassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol  subClassName	39	None	add
117	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name);	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	53	None	replace
118	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name);	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	53	None	replace
119	[BUG]  [BUGGY]  nameInfo.name  =  names  ==  null?  names.subclassName  :  new  NameInformation(nameInfo.name);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names  ==  null?  names.subclassName  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names  ==  null?  names.subclassName  :  new  NameInformation(nameInfo.name);	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	53	None	replace
120	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(singletonGetterClass,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(singletonGetterClass,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(singletonGetterClass,  classes);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	82	None	replace
121	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(convention,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(convention,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(convention,  classes);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
122	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(compiler,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(compiler,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(compiler,  classes);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
123	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  parent);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
124	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  t.getModule());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  t.getModule());	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
125	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(t,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(t,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(t,  classes);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
126	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(t.PageSelectionModel);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(t.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(t.PageSelectionModel);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	46	None	replace
127	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(ns,  t.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(ns,  t.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(ns,  t.PageSelectionModel);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  ns	46	None	replace
128	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(t,  n.PageSelectionModel);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(t,  n.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(t,  n.PageSelectionModel);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	46	None	replace
129	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes.PageSelectionModel);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(classes.PageSelectionModel);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	46	None	replace
130	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(ns,  parent);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(ns,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(ns,  parent);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  ns	46	None	replace
131	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(t.node,  n.PageSelectionModel);  [CE]  cannot  find  symbol  node  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(t.node,  n.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(t.node,  n.PageSelectionModel);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
132	[BUG]  [BUGGY]  nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation();  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.name    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  name	30	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent));  [CE]  ';'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.class,  parent,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.class,  parent,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.class,  parent,  ns.PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.ClassDefiningFunctionNode,  parent,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.ClassDefiningFunctionNode,  parent,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.ClassDefiningFunctionNode,  parent,  ns.PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.ChangeEvent));  [CE]  ';'  expected  [FE]                                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
140	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.nameName  :  new  NameInformation();  [CE]  cannot  find  symbol  nameName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.nameName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.nameName  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameNode    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  nameName	66	None	replace
141	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name);	  NameInformation    nameInfo    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	55	None	replace
142	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.subclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.subclassName);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.subclassName);	  NameInformation    nameInfo    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	55	None	replace
143	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name);	  NameInformation    nameInfo    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	55	None	replace
144	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name);	  NameInformation    nameInfo    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	55	None	replace
145	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(convention.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(convention.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(convention.name);	  NameInformation    nameInfo    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	55	None	replace
146	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names  ==  null?  classes.subclassName  :  new  NameInformation(nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names  ==  null?  classes.subclassName  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names  ==  null?  classes.subclassName  :  new  NameInformation(nameInfo.name);	  NameInformation    nameInfo    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	55	None	replace
147	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)types.clone();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)types.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)types.clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
148	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.names.clone();  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.names.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.names.clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
149	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)ns.clone();  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)ns.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)ns.clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
150	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getScope().clone();  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getScope().clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.getScope().clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
151	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getReferenceName();  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getReferenceName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.getReferenceName();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
152	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getDeclaredClassInfo();  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getDeclaredClassInfo();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.getDeclaredClassInfo();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
153	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(),  classes.name;  [CE]  ';'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(),  classes.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(),  classes.name;	          NameInformation    nameInfo    =    new    NameInformation().name;    	non-compiled	[CE]  ';'  expected	90	None	replace
154	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName());	          NameInformation    nameInfo    =    new    NameInformation().name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	90	None	replace
155	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation().name,  classes);  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation().name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation().name,  classes);	          NameInformation    nameInfo    =    new    NameInformation().name;    	non-compiled	[CE]  ';'  expected	90	None	replace
156	[BUG]  [BUGGY]  nameInfo.name  =  names  ==  null?  classes.subclassName  :  names.name;  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names  ==  null?  classes.subclassName  :  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names  ==  null?  classes.subclassName  :  names.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    names.name;    	non-compiled	[CE]  cannot  find  symbol  names	49	None	replace
157	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  names.subclassName;  [CE]  cannot  find  symbol  name  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  names.subclassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.name  :  names.subclassName;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    names.name;    	non-compiled	[CE]  cannot  find  symbol  name	49	None	replace
158	[BUG]  [BUGGY]  NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo    info    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
159	[BUG]  [BUGGY]  NameInfo  info  =  classes!=  null?  names.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  info  =  classes!=  null?  names.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  info  =  classes!=  null?  names.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo    info    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
160	[BUG]  [BUGGY]  nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  names  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo    info    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	77	None	replace
161	[BUG]  [BUGGY]  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  incompatible  types  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo    info    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  incompatible  types	77	None	replace
162	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes,  ns);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes,  ns);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(classes,  ns);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes,    convention);    	non-compiled	[CE]  cannot  find  symbol  ns	67	None	replace
163	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes,  ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(classes,  ns.PageSelectionModel);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes,    convention);    	non-compiled	[CE]  cannot  find  symbol  ns	67	None	replace
164	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(classes,  convention);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(classes,  convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(classes,  convention);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes,    convention);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
165	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  classes,  convention);  [CE]  package  ns  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  classes,  convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  classes,  convention);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes,    convention);    	non-compiled	[CE]  package  ns  does  not  exist	67	None	replace
166	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  classes;  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  classes;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.name  :  classes;	  nameInfo.name    =    classes!=    null?    classes.name    :    names;    	non-compiled	[CE]  cannot  find  symbol  names	61	None	replace
167	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  names;  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  names;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.name  :  names;	  nameInfo.name    =    classes!=    null?    classes.name    :    names;    	non-compiled	[CE]  cannot  find  symbol  names	61	None	replace
168	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  names;  [CE]  cannot  find  symbol  name  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  names;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.name  :  names;	  nameInfo.name    =    classes!=    null?    classes.name    :    names;    	non-compiled	[CE]  cannot  find  symbol  name	61	None	replace
169	[BUG]  [BUGGY]  nameInfo.name  =  classes.newInstance(ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.newInstance(ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.newInstance(ns.PageSelectionModel);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes);    	non-compiled	[CE]  cannot  find  symbol  ns	5	None	replace
170	[BUG]  [BUGGY]  nameInfo.name  =  names.newInstance(classes);  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.newInstance(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.newInstance(classes);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes);    	non-compiled	[CE]  cannot  find  symbol  names	5	None	replace
171	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  names);  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  names);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes);    	non-compiled	[CE]  cannot  find  symbol  names	5	None	replace
172	[BUG]  [BUGGY]  nameInfo.name  =  names  ==  null?  classes.name  :  nameInfo.name;  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names  ==  null?  classes.name  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names  ==  null?  classes.name  :  nameInfo.name;	  nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    timeout    	non-compiled	[CE]  cannot  find  symbol  names	84	None	replace
173	[BUG]  [BUGGY]  nameInfo.name  =  names  ==  null?  classes.subclassName  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names  ==  null?  classes.subclassName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names  ==  null?  classes.subclassName  :  new  NameInformation();	  nameInfo.name    =    classes    ==    null?    classes.subclassName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	29	None	replace
174	[BUG]  [BUGGY]  nameInfo.name  =  classes.newNameInstance();  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.newNameInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.newNameInstance();	  nameInfo.name    =    ns.PageSelectionModel.newNameInstance();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
175	[BUG]  [BUGGY]  nameInfo.name  =  t.newNameInstance();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.newNameInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.newNameInstance();	  nameInfo.name    =    ns.PageSelectionModel.newNameInstance();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
176	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newNameInstance(classes);  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newNameInstance(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newNameInstance(classes);	  nameInfo.name    =    ns.PageSelectionModel.newNameInstance();    	non-compiled	[CE]  package  ns  does  not  exist	3	None	replace
177	[BUG]  [BUGGY]  nameInfo.name  =  ns.newNameInstance();  [CE]  cannot  find  symbol  ns  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.newNameInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.newNameInstance();	  nameInfo.name    =    ns.PageSelectionModel.newNameInstance();    	non-compiled	[CE]  cannot  find  symbol  ns	3	None	replace
178	[BUG]  [BUGGY]  nameInfo.name  =  names.newNameInstance();  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.newNameInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.newNameInstance();	  nameInfo.name    =    ns.PageSelectionModel.newNameInstance();    	non-compiled	[CE]  cannot  find  symbol  names	3	None	replace
179	[BUG]  [BUGGY]  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	35	1	add
180	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	35	1	add
181	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	35	None	add
182	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  NameInfo  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameInfo	35	None	add
183	[BUG]  [BUGGY]  timeout  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	35	1	add
184	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  timeout  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	35	1	add
185	[BUG]  [BUGGY]  timeout  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	35	1	add
186	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  timeout  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	35	1	add
187	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	35	None	add
188	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	35	None	add
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class));  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.ChangeEvent.class,  parent));  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.ChangeEvent.class,  parent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.ChangeEvent.class,  parent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class));  [CE]  ';'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getType()));  [CE]  ';'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getType()));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getType()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getClass()));  [CE]  ';'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getClass()));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getClass()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.class,  parent.ChangeEvent.class));  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.class,  parent.ChangeEvent.class));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.class,  parent.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
196	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo    nameInfo    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
197	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo    nameInfo    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
198	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  names.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  names.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes!=  null?  names.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo    nameInfo    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
199	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.ChangeEvent.TYPE);  [CE]  cannot  find  symbol  ChangeEvent  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.ChangeEvent.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.ChangeEvent.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	18	None	replace
200	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	18	None	replace
201	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	18	None	replace
202	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.TYPE);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  package  ns  does  not  exist	18	None	replace
203	[BUG]  [BUGGY]  nameInfo.name  =  ns.createNameInformation(convention,  classes.ChangeEvent.TYPE);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.createNameInformation(convention,  classes.ChangeEvent.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.createNameInformation(convention,  classes.ChangeEvent.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	18	None	replace
204	[BUG]  [BUGGY]  nameInfo.name  =  ns.ChangeEvent.createNameInformation(convention,  classes.PageSelectionModel.TYPE);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.ChangeEvent.createNameInformation(convention,  classes.PageSelectionModel.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.ChangeEvent.createNameInformation(convention,  classes.PageSelectionModel.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	18	None	replace
205	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.nameInformation()  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.nameInformation()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.nameInformation()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameInformation()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	92	None	replace
206	[BUG]  [BUGGY]  nameInfo  =  classes!=  null?  names.nameInformation()  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  classes!=  null?  names.nameInformation()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  classes!=  null?  names.nameInformation()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameInformation()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	92	None	replace
207	[BUG]  [BUGGY]  nameInfo  =  names!=  null?  classes.nameInformation()  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  names!=  null?  classes.nameInformation()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  names!=  null?  classes.nameInformation()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameInformation()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	92	None	replace
208	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInformation    nameInfo    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	37	None	replace
209	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInformation    nameInfo    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	37	None	replace
210	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInformation    nameInfo    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	37	None	replace
211	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.ChangeEvent.class);  [CE]  package  classes  does  not  exist  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes  does  not  exist	17	None	replace
212	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	17	None	replace
213	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	17	None	replace
214	[BUG]  [BUGGY]  nameInfo.name  =  ns.ChangeEvent.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.class);  [CE]  package  classes.PageSelectionModel  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.ChangeEvent.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.ChangeEvent.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes.PageSelectionModel  does  not  exist	17	None	replace
215	[BUG]  [BUGGY]  nameInfo.name  =  ns.createNameInformation(convention,  classes.ChangeEvent.class);  [CE]  package  classes  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.createNameInformation(convention,  classes.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.createNameInformation(convention,  classes.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes  does  not  exist	17	None	replace
216	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.nameInfo;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  ns.nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  ns.nameInfo;	          NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
217	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;	          NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
218	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.nameInfo;  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  names.nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  names.nameInfo;	          NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
219	[BUG]  [BUGGY]  nameInfo.name  =  t,  classes.newInstance();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t,  classes.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t,  classes.newInstance();	  nameInfo.name    =    t.newInstance();    	non-compiled	[CE]  ';'  expected	2	None	replace
220	[BUG]  [BUGGY]  nameInfo.name  =  compiler.createNameInformation(convention);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  compiler.createNameInformation(convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  compiler.createNameInformation(convention);	  nameInfo.name    =    names.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
221	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(names);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(names);	  nameInfo.name    =    names.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  names	47	None	replace
222	[BUG]  [BUGGY]  nameInfo.name  =  ns.createNameInformation(convention);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.createNameInformation(convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.createNameInformation(convention);	  nameInfo.name    =    names.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  ns	47	None	replace
223	[BUG]  [BUGGY]  nameInfo.name  =  namesCopy.createNameInformation(convention);  [CE]  cannot  find  symbol  namesCopy  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  namesCopy.createNameInformation(convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  namesCopy.createNameInformation(convention);	  nameInfo.name    =    names.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  namesCopy	47	None	replace
224	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent);	  nameInfo.name    =    names.createNameInformation(convention);    	non-compiled	[CE]  package  ns  does  not  exist	47	None	replace
225	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(parent);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(parent);	  nameInfo.name    =    convention.createNameInformation(ns);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
226	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(singletonGetterClass);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(singletonGetterClass);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(singletonGetterClass);	  nameInfo.name    =    convention.createNameInformation(ns);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	68	None	replace
227	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(t,  n);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(t,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(t,  n);	  nameInfo.name    =    convention.createNameInformation(ns);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
228	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(classes);	  nameInfo.name    =    convention.createNameInformation(ns);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	12	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	12	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	12	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	12	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	12	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	12	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  t,  parent,  ns.PageSelectionModel.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	12	None	replace
236	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name);  [CE]  ';'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name);    	non-compiled	[CE]  ';'  expected	43	None	replace
237	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name);  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name);    	non-compiled	[CE]  ';'  expected	43	None	replace
238	[BUG]  [BUGGY]  NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name);  [CE]  ';'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name);    	non-compiled	[CE]  ';'  expected	43	None	replace
239	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.subclassName  :  nameInfo.name);  [CE]  ';'  expected  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.subclassName  :  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.subclassName  :  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name);    	non-compiled	[CE]  ';'  expected	43	None	replace
240	[BUG]  [BUGGY]  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	83	1	add
241	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	83	1	add
242	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInformation  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	83	None	add
243	[BUG]  [BUGGY]  timeout  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	83	1	add
244	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  timeout  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	compilable	timeout	83	1	add
245	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInformation  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  ';'  expected	83	None	add
246	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  NameInfo  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameInfo	83	None	add
247	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInformation  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	83	None	add
248	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name);  [CE]  ';'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name);	  timeout    	non-compiled	[CE]  ';'  expected	83	None	add
249	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(n);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(n);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
250	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(0);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(0);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(0);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
251	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)superclasses.clone();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)superclasses.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)superclasses.clone();	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
252	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)types.clone();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)types.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)types.clone();	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
253	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)ns.clone();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)ns.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)ns.clone();	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
254	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name,    classes);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	70	None	replace
255	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation(nameInfo.name);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation(nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.name    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	69	None	replace
256	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  new  NameInformation(nameInfo.name);  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.name  :  new  NameInformation(nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.name    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  name	69	None	replace
257	[BUG]  [BUGGY]  timeout  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo  =  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo    =    new    NameInformation();    nameInfo  =  new  NameInformation();	  timeout    	compilable	timeout	24	1	add
258	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo  =  new  NameInformation();  timeout  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo  =  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    nameInfo  =  new  NameInformation();	  timeout    	compilable	timeout	24	1	add
259	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  NameInformation  nameInfo  =  new  NameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  NameInformation  nameInfo  =  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    NameInformation  nameInfo  =  new  NameInformation();	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	24	None	add
260	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  i++)  {  NameInformation  nameInfo  =  new  NameInformation();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  i++)  {  NameInformation  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  i++)  {  NameInformation  nameInfo  =  new  NameInformation();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	24	None	add
261	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  ++i)  {  NameInformation  nameInfo  =  new  NameInformation();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  ++i)  {  NameInformation  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  ++i)  {  NameInformation  nameInfo  =  new  NameInformation();  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	24	None	add
262	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  i++)  {  nameInfo.name  =  classes.name;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  i++)  {  nameInfo.name  =  classes.name;  }  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  i++)  {  nameInfo.name  =  classes.name;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	24	None	add
263	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  ++i)  {  nameInfo.name  =  classes.name;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  ++i)  {  nameInfo.name  =  classes.name;  }  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    if(classes!=  null)  {  for(int  i  =  0;  i  <  classes.size();  ++i)  {  nameInfo.name  =  classes.name;  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	24	None	add
264	[BUG]  [BUGGY]  timeout  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	add	nameInfo    =    new    NameInformation();    if(classes!=  null)  {  nameInfo  =  new  NameInformation();  }	  timeout    	compilable	timeout	24	1	add
265	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  nameInfo  =  new  NameInformation();  }  timeout  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  if(classes!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    if(classes!=  null)  {  nameInfo  =  new  NameInformation();  }	  timeout    	compilable	timeout	24	1	add
266	[BUG]  [BUGGY]  NameInformation  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInformation    nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  ';'  expected	38	None	replace
267	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	10	None	replace
268	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes);	  NameInformation    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	10	None	replace
269	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	10	None	replace
270	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName());	  NameInformation    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	10	None	replace
271	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getName());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getName());	  NameInformation    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	10	None	replace
272	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes.name);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
273	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
274	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(singletonGetterClass);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(singletonGetterClass);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(singletonGetterClass);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
275	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(convention.getName());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(convention.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(convention.getName());	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
276	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.getName());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes.getName());	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
277	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(classes);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  names	48	None	replace
278	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(classes);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
279	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  parent);  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  parent);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  package  ns  does  not  exist	48	None	replace
280	[BUG]  [BUGGY]  nameInfo.name  =  classes.createNameInformation(ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.createNameInformation(ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.createNameInformation(ns.PageSelectionModel);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  ns	48	None	replace
281	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  names);  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  names);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  names	48	None	replace
282	[BUG]  [BUGGY]  nameInfo.name  =  t.subclassName;  [CE]  cannot  find  symbol  subclassName  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.subclassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.subclassName;	  nameInfo.name    =    ns.subclassName;    	non-compiled	[CE]  cannot  find  symbol  subclassName	56	None	replace
283	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  names.subclassName  :  new  NameInformation(nameInfo.name);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  names.subclassName  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  names.subclassName  :  new  NameInformation(nameInfo.name);	  nameInfo.name    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	51	None	replace
284	[BUG]  [BUGGY]  nameInfo.name  =  Classes.className;  [CE]  cannot  find  symbol  Classes  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  Classes.className;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  Classes.className;	  nameInfo.name    =    Classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  Classes	105	None	replace
285	[BUG]  [BUGGY]  nameInfo.name  =  Classes.singletonName;  [CE]  cannot  find  symbol  Classes  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  Classes.singletonName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  Classes.singletonName;	  nameInfo.name    =    Classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  Classes	105	None	replace
286	[BUG]  [BUGGY]  nameInfo.name  =  Classes.SubclassName;  [CE]  cannot  find  symbol  Classes  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  Classes.SubclassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  Classes.SubclassName;	  nameInfo.name    =    Classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  Classes	105	None	replace
287	[BUG]  [BUGGY]  nameInfo.name  =  Classes.subclassName  +  1;  [CE]  cannot  find  symbol  Classes  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  Classes.subclassName  +  1;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  Classes.subclassName  +  1;	  nameInfo.name    =    Classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  Classes	105	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  nameInfo);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,NameInformation)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  nameInfo);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  nameInfo);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,NameInformation)	15	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  names);  [CE]  cannot  find  symbol  names  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  names);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	15	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  names,  classes);  [CE]  cannot  find  symbol  names  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  names,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  names,  classes);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	15	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  classes,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,SubclassRelationship,Node)  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  classes,  parent);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,SubclassRelationship,Node)	15	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  classes);  [CE]  cannot  find  symbol  parents  [FE]                                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parents,  classes);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  parents	15	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  nameInfo.name);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,String)  [FE]                                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  nameInfo.name);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,String)	15	None	replace
294	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
295	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation().name;  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation().name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation().name;	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
296	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent());  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent());	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
297	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation());  [CE]  cannot  find  symbol  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation());	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
298	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.name);  [CE]  cannot  find  symbol  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.name);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
299	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(convention.name);  [CE]  cannot  find  symbol  name  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(convention.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.findName(convention.name);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	97	None	replace
300	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  ns.name);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  ns.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  ns.name);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  cannot  find  symbol  ns	97	None	replace
301	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  parent);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  parent);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	97	None	replace
302	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  parent);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  parent);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	97	None	replace
303	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name,  classes);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo.name,  classes);	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation(nameInfo.name,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	99	None	replace
304	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes);	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation(nameInfo.name,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	99	None	replace
305	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes);	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation(nameInfo.name,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	99	None	replace
306	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	23	None	replace
307	[BUG]  [BUGGY]  nameInfo.name  =  names.name();  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.name();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.name();	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  cannot  find  symbol  names	80	None	replace
308	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.name();  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.name();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.name();	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  package  ns  does  not  exist	80	None	replace
309	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.name(classes);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.name(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.name(classes);	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  package  ns  does  not  exist	80	None	replace
310	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(t);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(t);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(t);	  nameInfo.name    =    t.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
311	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(compiler,  convention);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(compiler,  convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(compiler,  convention);	  nameInfo.name    =    t.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
312	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(convention);	  nameInfo.name    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	26	None	replace
313	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(convention.getSingletonGetterClassName(parent));  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(convention.getSingletonGetterClassName(parent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(convention.getSingletonGetterClassName(parent));	  nameInfo.name    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	26	None	replace
314	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(compiler.getSingletonGetterClassName(parent));  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(compiler.getSingletonGetterClassName(parent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(compiler.getSingletonGetterClassName(parent));	  nameInfo.name    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
315	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(singletonSetterClass);  [CE]  cannot  find  symbol  singletonSetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(singletonSetterClass);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(singletonSetterClass);	  nameInfo.name    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  cannot  find  symbol  singletonSetterClass	26	None	replace
316	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	100	None	replace
317	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name,  classes);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	100	None	replace
318	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	100	None	replace
319	[BUG]  [BUGGY]  nameInfo.name  =  names  ==  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names  ==  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names  ==  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	100	None	replace
320	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	100	None	replace
321	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  n);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  n);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
322	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(convention.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(convention.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(convention.name);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
323	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  true);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  true);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  true);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
324	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name  +  1);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name  +  1);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name  +  1);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
325	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes.get(name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes.get(name);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
326	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name  -  1);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name  -  1);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name  -  1);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
327	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.onlyAffectsClassDef);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.onlyAffectsClassDef);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.onlyAffectsClassDef);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    classes);    	non-compiled	[CE]  package  ns  does  not  exist	58	None	replace
328	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.type);  [CE]  cannot  find  symbol  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.type);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.type);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  type	58	None	replace
329	[BUG]  [BUGGY]  nameInfo.name  =  classes.createNameInformation(t,  n,  parent,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.createNameInformation(t,  n,  parent,  ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.createNameInformation(t,  n,  parent,  ns.PageSelectionModel);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	58	None	replace
330	[BUG]  [BUGGY]  nameInfo.name  =  classes.newName();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.newName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.newName();	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
331	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(classes);  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newName(classes);	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  package  ns  does  not  exist	4	None	replace
332	[BUG]  [BUGGY]  nameInfo.name  =  ns.newName();  [CE]  cannot  find  symbol  ns  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.newName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.newName();	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  cannot  find  symbol  ns	4	None	replace
333	[BUG]  [BUGGY]  nameInfo.name  =  t.newName();  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.newName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.newName();	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
334	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(t.getModule());  [CE]  package  ns  does  not  exist  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(t.getModule());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newName(t.getModule());	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  package  ns  does  not  exist	4	None	replace
335	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(false);  [CE]  package  ns  does  not  exist  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(false);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newName(false);	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  package  ns  does  not  exist	4	None	replace
336	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.get(name);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes.get(name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes.get(name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
337	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.get(names.name);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes.get(names.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes.get(names.name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
338	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.name.get(classes.name);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  ns.name.get(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  ns.name.get(classes.name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
339	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.get(convention.name);  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  names.get(convention.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  names.get(convention.name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
340	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.get(classes,  ns.name);  [CE]  cannot  find  symbol  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  names.get(classes,  ns.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  names.get(classes,  ns.name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
341	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.nameOfName  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.nameOfName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.nameOfName  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameOfName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	65	None	replace
342	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parent,  classes);  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parent,  classes);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  package  ns  does  not  exist	93	None	replace
343	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  classes,  parent);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  classes,  parent);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  package  ns  does  not  exist	93	None	replace
344	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  names.name;  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.name  :  names.name;	  nameInfo.name    =    classes!=    null?    classes.name    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	20	None	replace
345	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  names.name;  [CE]  cannot  find  symbol  name  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  names.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.name  :  names.name;	  nameInfo.name    =    classes!=    null?    classes.name    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  name	20	None	replace
346	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation(classes.name);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  new  NameInformation(classes.name);	  nameInfo    =    new    NameInformation();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	25	None	replace
347	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);	  nameInfo    =    new    NameInformation();    timeout    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	25	None	replace
348	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.TYPE);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.TYPE);	  nameInfo    =    new    NameInformation();    timeout    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	25	None	replace
349	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  names.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  names.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  names.subclassName  :  nameInfo.name;	  nameInfo.name    =    names    ==    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	21	None	replace
350	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.newInstance()  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.newInstance()  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.newInstance()  :  nameInfo.name;	  nameInfo.name    =    classes.newInstance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
351	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.newInstance()  :  nameInfo;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.newInstance()  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.newInstance()  :  nameInfo;	  nameInfo.name    =    classes.newInstance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
352	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  convention.nameInformation()  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  convention.nameInformation()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  convention.nameInformation()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameInformation()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
353	[BUG]  [BUGGY]  nameInfo  =  classes!=  null?  classes.nameInformation()  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  classes!=  null?  classes.nameInformation()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  classes!=  null?  classes.nameInformation()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameInformation()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
354	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.nameInfo  :  new  NameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.nameInfo  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes  ==  null?  classes.nameInfo  :  new  NameInformation();	          NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	89	None	replace
355	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo);	          NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	89	None	replace
356	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.nameInfo;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.nameInfo;	          NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	89	None	replace
357	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation();	  NameInformation    nameInfo    =    classes.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	103	None	replace
358	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.name  :  new  NameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.name  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes  ==  null?  classes.name  :  new  NameInformation();	  NameInformation    nameInfo    =    classes.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	103	None	replace
359	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  classes.name;  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  classes.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.name  :  classes.name;	  nameInfo.name    =    classes!=    null?    classes.name    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	20	None	replace
360	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);	          NameInformation    nameInfo    =    new    NameInformation().name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	90	None	replace
361	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation();    	non-compiled	[CE]  package  ns  does  not  exist	9	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  #PageSelectionModel.ChangeEvent));  [CE]  illegal  character:  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  #PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent,  #PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  illegal  character:  	16	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel,  parent));  [CE]  ';'  expected  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel,  parent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel,  parent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  NSErrors.ChangeEvent));  [CE]  ';'  expected  [FE]                                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  NSErrors.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent,  NSErrors.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent));  [CE]  ';'  expected  [FE]                                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
367	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(i);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(i);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(i);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
368	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(parent);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(parent);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
369	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes.name,  names);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes.name,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes.name,  names);	  nameInfo.name    =    new    NameInformation(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	98	None	replace
370	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(ns,  convention);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(ns,  convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(ns,  convention);	  nameInfo.name    =    t.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  ns	45	None	replace
371	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameForName(ns.PageSelectionInformation.getName());  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameForName(ns.PageSelectionInformation.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameForName(ns.PageSelectionInformation.getName());	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  package  ns  does  not  exist	96	None	replace
372	[BUG]  [BUGGY]  nameInfo.name  =  classes.names.getName();  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.names.getName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.names.getName();	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  cannot  find  symbol  names	96	None	replace
373	[BUG]  [BUGGY]  nameInfo.name  =  ns.NameSelectionInformation.getName();  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.NameSelectionInformation.getName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.NameSelectionInformation.getName();	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  package  ns  does  not  exist	96	None	replace
374	[BUG]  [BUGGY]  nameInfo.name  =  classes.getName();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.getName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.getName();	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
375	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  NameInfo  nameInfo  =  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  NameInfo  nameInfo  =  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    NameInfo  nameInfo  =  new  NameInformation();	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
376	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  NameInfo  info  =  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  NameInfo  info  =  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    NameInfo  info  =  new  NameInformation();	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
377	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  NameInfo  =  new  NameInformation();  [CE]  cannot  find  symbol  NameInfo  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation();  NameInfo  =  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo    =    new    NameInformation();    NameInfo  =  new  NameInformation();	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameInfo	24	None	add
378	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo.name,  classes);  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo.name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo.name,  classes);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name,    names);    	non-compiled	[CE]  cannot  find  symbol  name	52	None	replace
379	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  parent);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  parent);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n);    	non-compiled	[CE]  package  ns  does  not  exist	94	None	replace
380	[BUG]  [BUGGY]  nameInfo.name  =  ns.NameAnalyzer.createNameInformation(t,  n);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.NameAnalyzer.createNameInformation(t,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.NameAnalyzer.createNameInformation(t,  n);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n);    	non-compiled	[CE]  package  ns  does  not  exist	94	None	replace
381	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol	39	None	add
382	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol	39	None	add
383	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  incompatible  types  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  incompatible  types	39	None	add
384	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  classes);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
385	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  false);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  false);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  false);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
386	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name,  classes);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.name  :  new  NameInformation(nameInfo.name,  classes);	  nameInfo.name    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	71	None	replace
387	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
388	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
389	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.getName());  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.getName());	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
390	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  convention);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(t,  convention);	  nameInfo.name    =    names.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  names	47	None	replace
391	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  ns);	  nameInfo.name    =    names.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  ns	47	None	replace
392	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInfo  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol	83	None	add
393	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo  info  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  NameInfo  info  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    NameInfo  info  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol	83	None	add
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.class));  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.class));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.class));  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.class));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.getChangeEvent()));  [CE]  ';'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.getChangeEvent()));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.getChangeEvent()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
398	[BUG]  [BUGGY]  NameInfo.name  =  classes.subclassName;  [CE]  cannot  find  symbol  NameInfo  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo.name  =  classes.subclassName;	  nameInfo.name    =    ns.subclassName;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	56	None	replace
399	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.nameOfName  :  new  NameInformation();  [CE]  cannot  find  symbol  nameOfName  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.nameOfName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.nameOfName  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameOfName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  nameOfName	65	None	replace
400	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.nameAsName  :  new  NameInformation();  [CE]  cannot  find  symbol  nameAsName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.nameAsName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.nameAsName  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameOfName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  nameAsName	65	None	replace
401	[BUG]  [BUGGY]  nameInfo.name  =  names.newName();  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.newName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.newName();	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  cannot  find  symbol  names	4	None	replace
402	[BUG]  [BUGGY]  nameInfo.name  =  ns.NameSelectionModel.newName();  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.NameSelectionModel.newName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.NameSelectionModel.newName();	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  package  ns  does  not  exist	4	None	replace
403	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameInfo.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameInfo.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameInfo.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	18	None	replace
404	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  ns.PageSelectionModel.TYPE);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  ns.PageSelectionModel.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  ns.PageSelectionModel.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  package  ns  does  not  exist	18	None	replace
405	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  classes.ChangeEvent.TYPE);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  classes.ChangeEvent.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  classes.ChangeEvent.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	18	None	replace
406	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.TYPE);  [CE]  cannot  find  symbol  TYPE  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  cannot  find  symbol  TYPE	18	None	replace
407	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    timeout    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
408	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(singletonGetterClass,  names);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(singletonGetterClass,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(singletonGetterClass,  names);	  nameInfo.name    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	26	None	replace
409	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(compiler);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(compiler);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(compiler);	  nameInfo.name    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	26	None	replace
410	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo.name);	  NameInformation    nameInfo    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	55	None	replace
411	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.nameNode  :  new  NameInformation();  [CE]  cannot  find  symbol  nameNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.nameNode  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.nameNode  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameNode    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  nameNode	66	None	replace
412	[BUG]  [BUGGY]  nameInfo.name  =  Classes.singletonClassName;  [CE]  cannot  find  symbol  Classes  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  Classes.singletonClassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  Classes.singletonClassName;	  nameInfo.name    =    Classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  Classes	105	None	replace
413	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.name();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes.name();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes.name();	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
414	[BUG]  [BUGGY]  names.name  =  classes.name();  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  names.name  =  classes.name();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	names.name  =  classes.name();	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  cannot  find  symbol  names	80	None	replace
415	[BUG]  [BUGGY]  nameInfo.name  =  types.name();  [CE]  cannot  find  symbol  types  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  types.name();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  types.name();	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  cannot  find  symbol  types	80	None	replace
416	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  classes.name;  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  classes.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.subclassName  :  classes.name;	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    names.name;    	non-compiled	[CE]  cannot  find  symbol  names	49	None	replace
417	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation(classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  new  NameInformation(classes);	  nameInfo    =    new    NameInformation();    timeout    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	25	None	replace
418	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation(classes.getName());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation(classes.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  new  NameInformation(classes.getName());	  nameInfo    =    new    NameInformation();    timeout    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
419	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)superclasses.clone();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)superclasses.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)superclasses.clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
420	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
421	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)names.clone();  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)names.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)names.clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
422	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.sourceName);  [CE]  cannot  find  symbol  sourceName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.sourceName);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.sourceName);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  cannot  find  symbol  sourceName	59	None	replace
423	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.union);  [CE]  cannot  find  symbol  union  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.union);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.union);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  cannot  find  symbol  union	59	None	replace
424	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.class);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  nameInfo.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
425	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  names);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  names);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  names	82	None	replace
426	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  ns);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  ns	82	None	replace
427	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  true);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  true);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
428	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  compiler);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  compiler);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  compiler);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
429	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  false);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  false);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
430	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  t);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  t);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  t);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	82	None	replace
431	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  info.name;  [CE]  cannot  find  symbol  name  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.name  :  info.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.name  :  info.name;	  nameInfo.name    =    classes    ==    null?    classes.name    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  name	22	None	replace
432	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  convention.getName()  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  convention.getName()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  convention.getName()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.getName()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
433	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  conn.getName()  :  new  NameInformation();  [CE]  cannot  find  symbol  conn  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  conn.getName()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  conn.getName()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.getName()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  conn	31	None	replace
434	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameNode;  [CE]  cannot  find  symbol  nameNode  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameNode;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameNode;	  nameInfo.name    =    classes.nameName;    	non-compiled	[CE]  cannot  find  symbol  nameNode	81	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,AbstractCompiler)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  compiler);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  compiler);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,AbstractCompiler)	15	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  nodesToKeep);  [CE]  cannot  find  symbol  nodesToKeep  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  nodesToKeep);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  nodesToKeep);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  nodesToKeep	15	None	replace
437	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  ns);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(n,  ns);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(n,  ns);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol  ns	7	None	replace
438	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(t,  n);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol  names	7	None	replace
439	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.type);  [CE]  cannot  find  symbol  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.type);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.type);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes);    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
440	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.class);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  nameInfo.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
441	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(parent,  n);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(parent,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(parent,  n);	  nameInfo.name    =    t.createNameInformation(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
442	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(n,  parent);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(n,  parent);	  nameInfo.name    =    t.createNameInformation(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	60	None	replace
443	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.newInstance()  :  classes;  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.newInstance()  :  classes;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.newInstance()  :  classes;	  nameInfo.name    =    classes.newInstance();    	non-compiled	[CE]  cannot  find  symbol  names	1	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	11	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.class);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol  ns	11	None	replace
446	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(classes,  convention);  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(classes,  convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(classes,  convention);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes,    convention);    	non-compiled	[CE]  cannot  find  symbol  names	67	None	replace
447	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes,  null);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes,  null);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(classes,  null);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes,    convention);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
448	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  true);  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  true);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  true);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  package  ns  does  not  exist	48	None	replace
449	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	10	None	replace
450	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.nameNode);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.nameNode);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.nameNode);	  NameInformation    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	10	None	replace
451	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.node);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.node);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.node);	  NameInformation    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	10	None	replace
452	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parent,  names);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parent,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parent,  names);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	93	None	replace
453	[BUG]  [BUGGY]  nameInfo.name  =  Classes.name;  [CE]  cannot  find  symbol  Classes  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  Classes.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  Classes.name;	  nameInfo.name    =    ns.name;    	non-compiled	[CE]  cannot  find  symbol  Classes	78	None	replace
454	[BUG]  [BUGGY]  nameInfo.name  =  types.name;  [CE]  cannot  find  symbol  types  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  types.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  types.name;	  nameInfo.name    =    ns.name;    	non-compiled	[CE]  cannot  find  symbol  types	78	None	replace
455	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(classes);  [CE]  package  ns  does  not  exist  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(classes);	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  package  ns  does  not  exist	95	None	replace
456	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t);  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t);	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  package  ns  does  not  exist	95	None	replace
457	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  classes);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  classes);	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  package  ns  does  not  exist	95	None	replace
458	[BUG]  [BUGGY]  nameInfo  =  t.newInstance();  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  t.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  t.newInstance();	  nameInfo.name    =    t.newInstance();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
459	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo);	  nameInfo.name    =    classes!=    null?    classes.name    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  name	69	None	replace
460	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    names);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
461	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents,  nameInfo.name);  [CE]  cannot  find  symbol  parents  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents,  nameInfo.name);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    names);    	non-compiled	[CE]  cannot  find  symbol  parents	63	None	replace
462	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  values);  [CE]  cannot  find  symbol  values  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  values);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  values);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    names);    	non-compiled	[CE]  cannot  find  symbol  values	63	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	12	None	replace
464	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	12	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	12	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  compiler.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  compiler.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  ns,  compiler.PageSelectionModel.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	12	None	replace
467	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameId;  [CE]  cannot  find  symbol  nameId  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameId;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameId;	  nameInfo.name    =    classes;    	non-compiled	[CE]  cannot  find  symbol  nameId	6	None	replace
468	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.get(classes.name);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  ns.get(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  ns.get(classes.name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
469	[BUG]  [BUGGY]  NameInfo  nameInfo  =  compiler.get(classes.name);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  compiler.get(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  compiler.get(classes.name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
470	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.name.get(name);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes.name.get(name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes.name.get(name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
471	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    classes;    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	108	None	replace
472	[BUG]  [BUGGY]  nameInfo.name  =  names  ==  null?  classes.name  :  names.subclassName;  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names  ==  null?  classes.name  :  names.subclassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names  ==  null?  classes.name  :  names.subclassName;	  nameInfo.name    =    names    ==    null?    classes.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	21	None	replace
473	[BUG]  [BUGGY]  nameInfo.name  =  names.findName(classes.name);  [CE]  cannot  find  symbol  name  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.findName(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.findName(classes.name);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	97	None	replace
474	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  t);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  t);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  t);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	97	None	replace
475	[BUG]  [BUGGY]  nameInfo.name  =  classes.createNameInformation(convention,  ns);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.createNameInformation(convention,  ns);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.createNameInformation(convention,  ns);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	44	None	replace
476	[BUG]  [BUGGY]  nameInfo.name  =  classes.createNameInformation(convention,  names);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.createNameInformation(convention,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.createNameInformation(convention,  names);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	44	None	replace
477	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  names;  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  names.subclassName  :  names;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  names.subclassName  :  names;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	23	None	replace
478	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  nameInfo.subclassName;  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  nameInfo.subclassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.name  :  nameInfo.subclassName;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    nameInfo.name;    	non-compiled	[CE]  cannot  find  symbol  names	23	None	replace
479	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.getSimpleName());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.getSimpleName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes.getSimpleName());	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
480	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.nameNode);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.nameNode);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes.nameNode);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
481	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation().name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation().name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation().name;	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
482	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);	  NameInfo    nameInfo    =    classes.name;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
483	[BUG]  [BUGGY]  nameInfo.name  =  namesToSet.createNameInformation(t,  n,  parent);  [CE]  cannot  find  symbol  namesToSet  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  namesToSet.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  namesToSet.createNameInformation(t,  n,  parent);	  nameInfo.name    =    names.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  namesToSet	62	None	replace
484	[BUG]  [BUGGY]  nameInfo.name  =  classes.createNameInformation(t,  n,  parent,  classes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.createNameInformation(t,  n,  parent,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
485	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameInfo.createNameInformation(t,  n,  parent,  classes);  [CE]  cannot  find  symbol  nameInfo  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameInfo.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameInfo.createNameInformation(t,  n,  parent,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  nameInfo	58	None	replace
486	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol	35	None	add
487	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    NameInfo  info  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol	35	None	add
488	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  incompatible  types  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  incompatible  types	35	None	add
489	[BUG]  [BUGGY]  nameInfo.name  =  names.newInstance(classes.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.newInstance(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.newInstance(classes.name);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
490	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  names);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  names);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
491	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  classes);  [CE]  cannot  find  symbol  name  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  classes);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
492	[BUG]  [BUGGY]  nameInfo.name  =  namesToUpdate.newInstance();  [CE]  cannot  find  symbol  namesToUpdate  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  namesToUpdate.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  namesToUpdate.newInstance();	  nameInfo.name    =    names.newInstance();    	non-compiled	[CE]  cannot  find  symbol  namesToUpdate	73	None	replace
493	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(t,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(t,  ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(t,  ns.PageSelectionModel);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  ns	46	None	replace
494	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(ns,  n.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(ns,  n.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(ns,  n.PageSelectionModel);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  ns	46	None	replace
495	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();	          NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
496	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(n);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(n);	  nameInfo.name    =    convention.createNameInformation(ns);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
497	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(node);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(node);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(node);	  nameInfo.name    =    convention.createNameInformation(ns);    	non-compiled	[CE]  cannot  find  symbol  node	68	None	replace
498	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(n,  parent);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(n,  parent);	  nameInfo.name    =    convention.createNameInformation(ns);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
499	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameInfo.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameInfo.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameInfo.createNameInformation(convention,  ns.PageSelectionModel.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	17	None	replace
500	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  classes.ChangeEvent.class);  [CE]  package  classes  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  classes.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  classes.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes  does  not  exist	17	None	replace
501	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.class);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
502	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.superclassName  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.superclassName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.superclassName  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	27	None	replace
503	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.superclassName  :  classes;  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.superclassName  :  classes;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.superclassName  :  classes;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    classes;    	non-compiled	[CE]  cannot  find  symbol  names	34	None	replace
504	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo,  nameInfo.name);  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo,  nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo,  nameInfo.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  name	100	None	replace
505	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes.name);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(nameInfo,  classes.name);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	100	None	replace
506	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  names);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  names);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	100	None	replace
507	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  DEFAULT_GLOBAL_NAMES;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  DEFAULT_GLOBAL_NAMES;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  DEFAULT_GLOBAL_NAMES;	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
508	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.getNameInformation()  :  new  NameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.getNameInformation()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes  ==  null?  classes.getNameInformation()  :  new  NameInformation();	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
509	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation(nameInfo);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation(nameInfo);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation(nameInfo);	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
510	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.getNameInformation(t);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes.getNameInformation(t);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes.getNameInformation(t);	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
511	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subClassName  :  nameInfo.name;  [CE]  cannot  find  symbol  subClassName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subClassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subClassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol  subClassName	83	None	add
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  union);  [CE]  cannot  find  symbol  union  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  union);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  union);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  union	15	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  legend);  [CE]  cannot  find  symbol  legend  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  legend);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  legend);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  legend	15	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  convention);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,CodingConvention)  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  convention);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  convention);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,CodingConvention)	15	None	replace
515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  nickname);  [CE]  cannot  find  symbol  nickname  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  nickname);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  nickname);	  NodeTraversal.traverse(compiler,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  nickname	15	None	replace
516	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  subClassName  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes    ==    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;  nameInfo.name  =  classes  ==  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol  subClassName	39	None	add
517	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.name,  classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.name,  classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes.name,  classes.name);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	86	None	replace
518	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent.class);  [CE]  illegal  character:  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  illegal  character:  	11	None	replace
519	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent.class));  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent.class));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent.class));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
520	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSError.class);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSError.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  NSError.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
521	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ClassDefiningFunction.class);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ClassDefiningFunction.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  ClassDefiningFunction.class);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
522	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;  [CE]  cannot  find  symbol  subClassName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol  subClassName	35	None	add
523	[BUG]  [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [CE]  cannot  find  symbol  subClassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name        =        classes!=        null?        classes.subclassName        :        nameInfo.name;        nameInfo.name    =    classes!=    null?    classes.subclassName    :    nameInfo.name;    nameInfo.name  =  classes!=  null?  classes.subClassName  :  nameInfo.name;  nameInfo.name  =  classes!=  null?  classes.subclassName  :  nameInfo.name;	  timeout    	non-compiled	[CE]  cannot  find  symbol  subClassName	35	None	add
524	[BUG]  [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.newInstance()  :  nameInfo;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes  ==  null?  classes.newInstance()  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes  ==  null?  classes.newInstance()  :  nameInfo;	  nameInfo.name    =    classes.newInstance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
525	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.newInstance()  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.newInstance()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.newInstance()  :  new  NameInformation();	  nameInfo.name    =    classes.newInstance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
526	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	          NameInformation    nameInfo    =    new    NameInformation().name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	90	None	replace
527	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));	          NameInformation    nameInfo    =    new    NameInformation().name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	90	None	replace
528	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(node.PageSelectionModel);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(node.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(node.PageSelectionModel);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
529	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(ns.PageSelectionModel,  classes);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(ns.PageSelectionModel,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(ns.PageSelectionModel,  classes);	  nameInfo.name    =    convention.createNameInformation(ns.PageSelectionModel);    	non-compiled	[CE]  cannot  find  symbol  ns	46	None	replace
530	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n);  [CE]  package  ns  does  not  exist  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n);	  nameInfo.name    =    ns.PageSelectionInformation.createNameInformation();    	non-compiled	[CE]  package  ns  does  not  exist	95	None	replace
531	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents,  classes);  [CE]  cannot  find  symbol  parents  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    names);    	non-compiled	[CE]  cannot  find  symbol  parents	63	None	replace
532	[BUG]  [BUGGY]  NameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [CE]  cannot  find  symbol  NameInfo  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    names);    	non-compiled	[CE]  cannot  find  symbol  NameInfo	63	None	replace
533	[BUG]  [BUGGY]  nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  classes,  parent);  [CE]  package  names  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  classes,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  classes,  parent);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  package  names  does  not  exist	59	None	replace
534	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  names);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent,  names);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	59	None	replace
535	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newNameInstance(classes.name);  [CE]  cannot  find  symbol  name  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newNameInstance(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newNameInstance(classes.name);	  nameInfo.name    =    ns.PageSelectionModel.newNameInstance();    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
536	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.name  :  nameInfo;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes  ==  null?  classes.name  :  nameInfo;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes  ==  null?  classes.name  :  nameInfo;	  NameInformation    nameInfo    =    classes.name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	103	None	replace
537	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent);	  nameInfo.name    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	26	None	replace
538	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
539	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)ns.classes.clone();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)ns.classes.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)ns.classes.clone();	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
540	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	13	None	replace
541	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  classes;  [CE]  cannot  find  symbol  name  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  classes;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.name  :  classes;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    classes;    	non-compiled	[CE]  cannot  find  symbol  name	34	None	replace
542	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name,  names);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo,  nameInfo.name,  names);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	100	None	replace
543	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo,  nameInfo.subclassName);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo,  nameInfo.subclassName);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.name  :  new  NameInformation(nameInfo,  nameInfo.subclassName);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo,    nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  name	100	None	replace
544	[BUG]  [BUGGY]  nameInfo.name  =  names  ==  null?  classes.name  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names  ==  null?  classes.name  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names  ==  null?  classes.name  :  new  NameInformation();	  nameInfo.name    =    classes    ==    null?    classes.subclassName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	29	None	replace
545	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo.name);	          NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	89	None	replace
546	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(classes.name);  [CE]  cannot  find  symbol  name  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newName(classes.name);	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  cannot  find  symbol  name	4	None	replace
547	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(classes.getName());  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newName(classes.getName());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newName(classes.getName());	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
548	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newNameInformation();  [CE]  package  ns  does  not  exist  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newNameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newNameInformation();	  nameInfo.name    =    ns.PageSelectionModel.newName();    	non-compiled	[CE]  package  ns  does  not  exist	4	None	replace
549	[BUG]  [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  names.subclassName;  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names!=  null?  classes.name  :  names.subclassName;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names!=  null?  classes.name  :  names.subclassName;	  nameInfo.name    =    classes!=    null?    names.subclassName    :    names.name;    	non-compiled	[CE]  cannot  find  symbol  names	50	None	replace
550	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  t.getModule());  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  t.getModule());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newInstance(classes,  t.getModule());	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes);    	non-compiled	[CE]  package  ns  does  not  exist	5	None	replace
551	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.namespace  :  new  NameInformation();  [CE]  cannot  find  symbol  namespace  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.namespace  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.namespace  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameNode    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  namespace	66	None	replace
552	[BUG]  [BUGGY]  nameInfo  =  classes!=  null?  classes.nameNode  :  new  NameInformation();  [CE]  cannot  find  symbol  nameNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  classes!=  null?  classes.nameNode  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  classes!=  null?  classes.nameNode  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameNode    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  nameNode	66	None	replace
553	[BUG]  [BUGGY]  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  names!=  null?  classes.name  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.name    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	30	None	replace
554	[BUG]  [BUGGY]  nameInfo  =  t.createNameInformation(n,  parent);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  t.createNameInformation(n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  t.createNameInformation(n,  parent);	  nameInfo.name    =    t.createNameInformation(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
555	[BUG]  [BUGGY]  nameInfo.name  =  t.createNameInformation(rhs,  parent);  [CE]  cannot  find  symbol  rhs  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.createNameInformation(rhs,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.createNameInformation(rhs,  parent);	  nameInfo.name    =    t.createNameInformation(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  rhs	60	None	replace
556	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes,  nameInfo.type);  [CE]  cannot  find  symbol  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes,  nameInfo.type);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes,  nameInfo.type);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name,    classes);    	non-compiled	[CE]  cannot  find  symbol  type	70	None	replace
557	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes,  nameInfo.union);  [CE]  cannot  find  symbol  union  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes,  nameInfo.union);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  classes.subclassName  :  new  NameInformation(nameInfo.name,  classes,  nameInfo.union);	  nameInfo.name    =    classes!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name,    classes);    	non-compiled	[CE]  cannot  find  symbol  union	70	None	replace
558	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.className  :  new  NameInformation();  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.className  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.className  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	27	None	replace
559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent);  [CE]  package  NSErrors  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  NSErrors  does  not  exist	12	None	replace
560	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent));  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
561	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent);  [CE]  illegal  character:  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent);	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  illegal  character:  	12	None	replace
562	[BUG]  [BUGGY]  nameInfo.name  =  t.getSingletonName();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t.getSingletonName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t.getSingletonName();	  nameInfo.name    =    ns.subclassName;    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
563	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(classes.subclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(classes.subclassName);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names!=  null?  classes.name  :  new  NameInformation(classes.subclassName);	  NameInformation    nameInfo    =    names!=    null?    classes.subclassName    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	55	None	replace
564	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.TYPE);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	18	None	replace
565	[BUG]  [BUGGY]  nameInfo.name  =  ns.ChangeSelectionModel.createNameInformation(convention,  classes.PageSelectionModel.TYPE);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.ChangeSelectionModel.createNameInformation(convention,  classes.PageSelectionModel.TYPE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.ChangeSelectionModel.createNameInformation(convention,  classes.PageSelectionModel.TYPE);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.TYPE);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	18	None	replace
566	[BUG]  [BUGGY]  nameInfo.name  =  classes.PageSelectionInformation.findName(ns.PageSelectionInformation.class);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.PageSelectionInformation.findName(ns.PageSelectionInformation.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.PageSelectionInformation.findName(ns.PageSelectionInformation.class);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	97	None	replace
567	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  t.getModule());  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  t.getModule());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.findName(classes.name,  t.getModule());	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	97	None	replace
568	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  ns.PageSelectionModel.name);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  ns.PageSelectionModel.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.findName(classes,  ns.PageSelectionModel.name);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	97	None	replace
569	[BUG]  [BUGGY]  nameInfo.name  =  classes.PageSelectionInformation.findName(ns.PageSelectionInformation.name);  [CE]  package  ns  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.PageSelectionInformation.findName(ns.PageSelectionInformation.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.PageSelectionInformation.findName(ns.PageSelectionInformation.name);	  nameInfo.name    =    ns.PageSelectionInformation.findName(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	97	None	replace
570	[BUG]  [BUGGY]  nameInfo.name  =  classes.names.createNameInformation(t,  n,  parent);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.names.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.names.createNameInformation(t,  n,  parent);	  nameInfo.name    =    names.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	62	None	replace
571	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n,  parents);  [CE]  cannot  find  symbol  parents  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(t,  n,  parents);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(t,  n,  parents);	  nameInfo.name    =    names.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  parents	62	None	replace
572	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  t.getModule());  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  t.getModule());  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  t.getModule());	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  package  ns  does  not  exist	48	None	replace
573	[BUG]  [BUGGY]  nameInfo.name  =  classes.PageSelectionModel.createNameInformation(ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.PageSelectionModel.createNameInformation(ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.PageSelectionModel.createNameInformation(ns.PageSelectionModel);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  ns	48	None	replace
574	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  t);  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  t);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes,  t);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes);    	non-compiled	[CE]  package  ns  does  not  exist	48	None	replace
575	[BUG]  [BUGGY]  nameInfo.name  =  t,  ns.newInstance();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  t,  ns.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  t,  ns.newInstance();	  nameInfo.name    =    t.newInstance();    	non-compiled	[CE]  ';'  expected	2	None	replace
576	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class));  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
577	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.getChangeEvent()));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.getChangeEvent()));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent.getChangeEvent()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
578	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.createChangeEvent()));  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.createChangeEvent()));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent.createChangeEvent()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	32	None	replace
579	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation(nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation(nameInfo.name);	          NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	88	None	replace
580	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.onlyAffectsClassName);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.onlyAffectsClassName);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.onlyAffectsClassName);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
581	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents);  [CE]  cannot  find  symbol  parents  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol  parents	7	None	replace
582	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  names);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  names);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol  names	7	None	replace
583	[BUG]  [BUGGY]  nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [CE]  package  names  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    classes);    	non-compiled	[CE]  package  names  does  not  exist	58	None	replace
584	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  names);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  names);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	58	None	replace
585	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.class);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes,  nameInfo.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent,    classes);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
586	[BUG]  [BUGGY]  nameInfo.name  =  ns.ChangeSelectionModel.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.class);  [CE]  package  classes.PageSelectionModel  does  not  exist  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.ChangeSelectionModel.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.ChangeSelectionModel.createNameInformation(convention,  classes.PageSelectionModel.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes.PageSelectionModel  does  not  exist	17	None	replace
587	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  names.PageSelectionModel.ChangeEvent.class);  [CE]  package  names.PageSelectionModel  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  names.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  names.PageSelectionModel.ChangeEvent.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  names.PageSelectionModel  does  not  exist	17	None	replace
588	[BUG]  [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.createNameInformation(convention,  ns.PageSelectionModel);	  nameInfo.name    =    names.createNameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  ns	47	None	replace
589	[BUG]  [BUGGY]  nameInfo.name  =  classes.names.PageSelectionInformation.getName();  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.names.PageSelectionInformation.getName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.names.PageSelectionInformation.getName();	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  cannot  find  symbol  names	96	None	replace
590	[BUG]  [BUGGY]  nameInfo.name  =  classes.name.getName();  [CE]  cannot  find  symbol  name  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.name.getName();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.name.getName();	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  cannot  find  symbol  name	96	None	replace
591	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.name;  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.name;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.name;	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  package  ns  does  not  exist	96	None	replace
592	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.getName(classes);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.getName(classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.getName(classes);	  nameInfo.name    =    ns.PageSelectionInformation.getName();    	non-compiled	[CE]  package  ns  does  not  exist	96	None	replace
593	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameInformation;  [CE]  cannot  find  symbol  nameInformation  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameInformation;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameInformation;	  nameInfo.name    =    classes.nameName;    	non-compiled	[CE]  cannot  find  symbol  nameInformation	81	None	replace
594	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.class);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.class);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.class);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
595	[BUG]  [BUGGY]  nameInfo.name  =  names.PageSelectionModel.createNameInformation(convention,  classes);  [CE]  package  names  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.PageSelectionModel.createNameInformation(convention,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.PageSelectionModel.createNameInformation(convention,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  package  names  does  not  exist	44	None	replace
596	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.allAffects);  [CE]  cannot  find  symbol  allAffects  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.allAffects);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention,  classes,  nameInfo.allAffects);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  allAffects	44	None	replace
597	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent);	  nameInfo.name    =    new    NameInformation(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	98	None	replace
598	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.INSTANCE);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.INSTANCE);	  nameInfo.name    =    new    NameInformation(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	98	None	replace
599	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.name();  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.name();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.name();	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  package  ns  does  not  exist	80	None	replace
600	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSectionDeclaration.name();  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSectionDeclaration.name();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSectionDeclaration.name();	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  package  ns  does  not  exist	80	None	replace
601	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionDeclaration.name();  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionDeclaration.name();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionDeclaration.name();	  nameInfo.name    =    classes.name();    	non-compiled	[CE]  package  ns  does  not  exist	80	None	replace
602	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.className;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  ns.className;  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  ns.className;	  NameInfo    nameInfo    =    classes.name;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
603	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getClasses().clone();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getClasses().clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.getClasses().clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
604	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.node.clone();  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.node.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.node.clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
605	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.nameMap.clone();  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.nameMap.clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.nameMap.clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
606	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getDeclaringConvention().clone();  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =(NameInformation)classes.getDeclaringConvention().clone();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =(NameInformation)classes.getDeclaringConvention().clone();	  NameInfo    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
607	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  package  ns  does  not  exist	82	None	replace
608	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  new  NameInformation(classes,  ns.PageSelectionProvider);	  nameInfo.name    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  ns	82	None	replace
609	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.names.get(name);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes.names.get(name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes.names.get(name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
610	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.name.get(names);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes.name.get(names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes.name.get(names);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
611	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.nameMap.get(name);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInfo  nameInfo  =  classes.nameMap.get(name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInfo  nameInfo  =  classes.nameMap.get(name);	  NameInfo    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
612	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parents);  [CE]  cannot  find  symbol  parents  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parents);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  parents);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol  parents	94	None	replace
613	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  names);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  names);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionProvider.createNameInformation(t,  n,  names);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol  names	94	None	replace
614	[BUG]  [BUGGY]  nameInfo  =  classes!=  null?  convention.getName()  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  classes!=  null?  convention.getName()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  classes!=  null?  convention.getName()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.getName()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
615	[BUG]  [BUGGY]  nameInfo  =  classes!=  null?  classes.getName()  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  classes!=  null?  classes.getName()  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  classes!=  null?  classes.getName()  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.getName()    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
616	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
617	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
618	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.INSTANCE);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.INSTANCE);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
619	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.ChangeEvent);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  ns.PageSelectionModel.ChangeEvent);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
620	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.name,  classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NameInformation  nameInfo  =  names.get(classes.name,  classes.name);	          NameInformation    nameInfo    =    names.get(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	106	None	replace
621	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.newInstance(classes.name,  classes.name);	  nameInfo.name    =    ns.PageSelectionModel.newInstance(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
622	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n,  parent);  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n,  parent);	  nameInfo.name    =    classes;    	non-compiled	[CE]  package  ns  does  not  exist	6	None	replace
623	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(parent,  classes);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.findName(parent,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionInformation.findName(parent,  classes);	  nameInfo.name    =    classes;    	non-compiled	[CE]  package  ns  does  not  exist	6	None	replace
624	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes.name);  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(classes.name);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation();    	non-compiled	[CE]  cannot  find  symbol  name	9	None	replace
625	[BUG]  [BUGGY]  nameInfo.name  =  classes.names.newInstance();  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.names.newInstance();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.names.newInstance();	  nameInfo.name    =    names.newInstance();    	non-compiled	[CE]  cannot  find  symbol  names	73	None	replace
626	[BUG]  [BUGGY]  nameInfo.name  =  classes.nameForName(ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes.nameForName(ns.PageSelectionProvider);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes.nameForName(ns.PageSelectionProvider);	  nameInfo.name    =    names.newInstance();    	non-compiled	[CE]  cannot  find  symbol  ns	73	None	replace
627	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation(classes.name);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation(classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.name  :  new  NameInformation(classes.name);	  nameInfo.name    =    classes!=    null?    classes.name    :    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	69	None	replace
628	[BUG]  [BUGGY]  nameInfo.name  =  names.PageSelectionProvider.createNameInformation(t,  n,  parent);  [CE]  package  names  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.PageSelectionProvider.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.PageSelectionProvider.createNameInformation(t,  n,  parent);	  nameInfo.name    =    ns.PageSelectionProvider.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  package  names  does  not  exist	93	None	replace
629	[BUG]  [BUGGY]  nameInfo  =  classes!=  null?  classes.nameOfName  :  new  NameInformation();  [CE]  cannot  find  symbol  nameOfName  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  classes!=  null?  classes.nameOfName  :  new  NameInformation();  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  classes!=  null?  classes.nameOfName  :  new  NameInformation();	  nameInfo.name    =    classes!=    null?    classes.nameOfName    :    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol  nameOfName	65	None	replace
630	[BUG]  [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(convention.name,  classes);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(convention.name,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  classes!=  null?  names.subclassName  :  new  NameInformation(convention.name,  classes);	  nameInfo.name    =    classes!=    null?    names.subclassName    :    new    NameInformation(nameInfo.name,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	99	None	replace
631	[BUG]  [BUGGY]  nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  classes);  [CE]  package  names  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  classes);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  names.PageSelectionModel.createNameInformation(t,  n,  classes);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(t,    n,    classes);    	non-compiled	[CE]  package  names  does  not  exist	8	None	replace
632	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent));	  NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	16	None	replace
633	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation(classes.name,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo  =  new  NameInformation(classes.name,  classes.name);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo  =  new  NameInformation(classes.name,  classes.name);	  nameInfo    =    new    NameInformation();    timeout    	non-compiled	[CE]  cannot  find  symbol  name	25	None	replace
634	[BUG]  [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes,  nameInfo);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();      [BUGGY]  nameInfo.name  =  convention.createNameInformation(classes,  nameInfo);  [BUGGY]      nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1369	1369	2	replace	nameInfo.name  =  convention.createNameInformation(classes,  nameInfo);	  nameInfo.name    =    ns.PageSelectionModel.createNameInformation(classes,    convention);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
