bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(nameInfo.name);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
2	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes.name);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
3	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(convention.getName());  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(convention.getName());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(convention.getName());	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
4	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(singletonGetterClass);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(singletonGetterClass);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(singletonGetterClass);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
5	[BUG]  [BUGGY]  naming.onlyAffectsClassDef  =  true;  [CE]  cannot  find  symbol  naming  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  naming.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	naming.onlyAffectsClassDef  =  true;	  naming.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol  naming	35	None	replace
6	[BUG]  [BUGGY]  NameInformation.onlyAffectsClassDef  =  false;  [CE]  non-static  variable  onlyAffectsClassDef  cannot  be  referenced  from  a  static  context  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation.onlyAffectsClassDef  =  false;	  naming.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  non-static  variable  onlyAffectsClassDef  cannot  be  referenced  from  a  static  context	35	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  FindDependencyScopes());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,NameAnalyzer.FindDependencyScopes)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  FindDependencyScopes());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  FindDependencyScopes());	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship,NameAnalyzer.FindDependencyScopes)	42	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  classes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NameAnalyzer.FindDependencyScopes,SubclassRelationship)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  classes);	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NameAnalyzer.FindDependencyScopes,SubclassRelationship)	42	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  names);  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  names);	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  cannot  find  symbol  names	42	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  methods,  new  FindDependencyScopes());  [CE]  cannot  find  symbol  methods  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  methods,  new  FindDependencyScopes());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  methods,  new  FindDependencyScopes());	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  cannot  find  symbol  methods	42	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  1,  new  FindDependencyScopes());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,NameAnalyzer.FindDependencyScopes)  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  1,  new  FindDependencyScopes());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  1,  new  FindDependencyScopes());	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,NameAnalyzer.FindDependencyScopes)	42	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  methods);  [CE]  cannot  find  symbol  methods  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  methods);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  methods);	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  cannot  find  symbol  methods	42	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  types,  new  FindDependencyScopes());  [CE]  cannot  find  symbol  types  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  types,  new  FindDependencyScopes());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  types,  new  FindDependencyScopes());	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  cannot  find  symbol  types	42	None	replace
14	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  true;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  true;	  namens.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	53	None	replace
15	[BUG]  [BUGGY]  ns.onlyAffectsClassDef  =  true;  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  ns.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	ns.onlyAffectsClassDef  =  true;	  namens.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  cannot  find  symbol  ns	53	None	replace
16	[BUG]  [BUGGY]  NameInformation.onlyAffectsClassDef  =  true;  [CE]  non-static  variable  onlyAffectsClassDef  cannot  be  referenced  from  a  static  context  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation.onlyAffectsClassDef  =  true;	  namens.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  non-static  variable  onlyAffectsClassDef  cannot  be  referenced  from  a  static  context	53	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  classes);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  classes);	  NodeTraversal.traverse(compiler,    n,    parent,    new    CreateNameInformation());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  names);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  names);	  NodeTraversal.traverse(compiler,    n,    parent,    new    CreateNameInformation());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  nameInfo);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  nameInfo);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  nameInfo);	  NodeTraversal.traverse(compiler,    n,    parent,    new    CreateNameInformation());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  new  CreateNameInformation());  [CE]  cannot  find  symbol  parents  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  new  CreateNameInformation());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parents,  new  CreateNameInformation());	  NodeTraversal.traverse(compiler,    n,    parent,    new    CreateNameInformation());    	non-compiled	[CE]  cannot  find  symbol  parents	64	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  classes,  new  CreateNameInformation());  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  classes,  new  CreateNameInformation());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  classes,  new  CreateNameInformation());	  NodeTraversal.traverse(compiler,    n,    parent,    new    CreateNameInformation());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
22	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
23	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
24	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfos,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfos,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfos,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
25	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  namesCopy));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  namesCopy));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  namesCopy));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
26	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  false));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  false));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  false));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
27	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
28	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  predicate));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  predicate));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  predicate));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
29	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.onlyAffectsClassDef  =  false;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
30	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  names.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  names.onlyAffectsClassDef  =  false;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
31	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes,  nameInfo.onlyAffectsClassDef  =  false;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  classes,  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  classes,  nameInfo.onlyAffectsClassDef  =  false;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  ';'  expected	59	None	replace
32	[BUG]  [BUGGY]  NameInfo  nameInfo  =  types.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  types.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  types.onlyAffectsClassDef  =  false;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
33	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
34	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(t,  n));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(t,  n));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(t,  n));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
35	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(t,  n));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(t,  n));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(t,  n));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
36	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes.name));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes.name));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes.name));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
37	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.createNameInformation(t,  n));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.createNameInformation(t,  n));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.createNameInformation(t,  n));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
38	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  names));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  names));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  names));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  FindDependencyScope());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  FindDependencyScope());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  FindDependencyScope());	          NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScope());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  classes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  classes);	          NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScope());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  classes,  new  FindDependencyScope());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  classes,  new  FindDependencyScope());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  classes,  new  FindDependencyScope());	          NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScope());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  new  FindDependencyScope());  [CE]  cannot  find  symbol  parents  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  new  FindDependencyScope());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parents,  new  FindDependencyScope());	          NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScope());    	non-compiled	[CE]  cannot  find  symbol  parents	65	None	replace
43	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;	          NameInformation    nameInfo    =    new    NameInformation();    nameInfo.name    =    names.subclassName;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
44	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;	          NameInformation    nameInfo    =    new    NameInformation();    nameInfo.name    =    names.subclassName;    	non-compiled	[CE]  cannot  find  symbol  names	23	None	replace
45	[BUG]  [BUGGY]  timeout  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	add	nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;	          NameInformation    nameInfo    =    new    NameInformation();    nameInfo.name    =    names.subclassName;    	compilable	timeout	23	1	replace
46	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;  timeout  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;	          NameInformation    nameInfo    =    new    NameInformation();    nameInfo.name    =    names.subclassName;    	compilable	timeout	23	1	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class);  [CE]  package  parent  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  parent  does  not  exist	20	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol  ns	20	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent.class);  [CE]  package  parent.PageSelectionModel  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  parent.PageSelectionModel  does  not  exist	20	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol  ns	20	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class);  [CE]  package  classes  does  not  exist  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes  does  not  exist	20	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	20	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.createChangeEvent());  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.createChangeEvent());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent.createChangeEvent());	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
54	[BUG]  [BUGGY]  NameInformation  nameInfo.onlyAffectsClassDef  =  true;  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo.onlyAffectsClassDef  =  true;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  ';'  expected	9	None	replace
55	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	9	None	replace
56	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
57	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
58	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
59	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(nameInfo.name);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(nameInfo.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(nameInfo.name);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
60	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.ERROR);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.ERROR);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.ERROR);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
61	[BUG]  [BUGGY]  NameInformation  nameInfo  =  fn.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  fn.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  fn.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    fn.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	57	None	replace
62	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  classes.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  classes.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    fn.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	57	None	replace
63	[BUG]  [BUGGY]  NameInformation  nameInfo  =  n.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  n.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  n.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    fn.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	57	None	replace
64	[BUG]  [BUGGY]  NameInformation  nameInfo  =  fn.onlyAffectsClassDef;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  fn.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  fn.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    fn.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	57	None	replace
65	[BUG]  [BUGGY]  nameInfo  =  fn.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  fn  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  fn.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  fn.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    fn.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol  fn	57	None	replace
66	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  classes.name);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo,  classes.name);	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
67	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo.name,  classes);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo.name,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo.name,  classes);	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
68	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.name);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.name);	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
69	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  t.name);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  t.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo,  t.name);	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
70	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  names.name);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  names.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo,  names.name);	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
71	[BUG]  [BUGGY]  NameInfo  info  =  new  NameInfoInformation();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  info  =  new  NameInfoInformation();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  info  =  new  NameInfoInformation();	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
72	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
73	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
74	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(nameInfo.name);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(nameInfo.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(nameInfo.name);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
75	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
76	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.TYPE);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.TYPE);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.TYPE);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
77	[BUG]  [BUGGY]  timeout  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	add	nameInfo  =  new  NameInformation();	  nameInfo.onlyAffectsClassDef    =    false;    NameAnalyzer    nameInfo    =    new    NameInformation();    	compilable	timeout	45	1	replace
78	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  timeout  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  new  NameInformation();	  nameInfo.onlyAffectsClassDef    =    false;    NameAnalyzer    nameInfo    =    new    NameInformation();    	compilable	timeout	45	1	replace
79	[BUG]  [BUGGY]  timeout  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	add	nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    new    NameInformation();    nameInfo.onlyAffectsClassDef    =    false;    	compilable	timeout	8	1	replace
80	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  timeout  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    new    NameInformation();    nameInfo.onlyAffectsClassDef    =    false;    	compilable	timeout	8	1	replace
81	[BUG]  [BUGGY]  nameInfo  =  classes.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  classes.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  classes.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    classes.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	56	None	replace
82	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.onlyAffectsClassDef;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  classes.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    classes.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	56	None	replace
83	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
84	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.Name);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.Name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.Name);	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
85	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.TYPE);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.TYPE);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.TYPE);	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
86	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent());	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
87	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.NAME);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.NAME);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.NAME);	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
88	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  classes,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  classes,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  classes,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(convention,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	5	None	replace
89	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(convention,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(convention,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.createNameInformation(convention,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(convention,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	5	None	replace
90	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  parent,  classes));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  parent,  classes));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  parent,  classes));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(convention,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	5	None	replace
91	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(convention,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	5	None	replace
92	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.createNameInformation(convention,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.createNameInformation(convention,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(t.createNameInformation(convention,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(convention,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	5	None	replace
93	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  classes));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  classes));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  classes));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(convention,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	5	None	replace
94	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  ns.PageSelectionModel.createNameInformation(n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  ns.PageSelectionModel.createNameInformation(n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name,  ns.PageSelectionModel.createNameInformation(n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(convention,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	5	None	replace
95	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
96	[BUG]  [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(ns,  n,  parent);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(ns,  n,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  t.createNameInformation(ns,  n,  parent);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
97	[BUG]  [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(n,  ns.PageSelectionModel,  parent);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(n,  ns.PageSelectionModel,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  t.createNameInformation(n,  ns.PageSelectionModel,  parent);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
98	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  names);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  names);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
99	[BUG]  [BUGGY]  NameInfo  nameInfo  =  t.PageSelectionModel.createNameInformation(n,  ns,  parent);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  t.PageSelectionModel.createNameInformation(n,  ns,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  t.PageSelectionModel.createNameInformation(n,  ns,  parent);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
100	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent());  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent());	  NameInfo.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  ';'  expected	27	None	replace
101	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent();	  NameInfo.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  ';'  expected	27	None	replace
102	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef;  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef;	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef;    	non-compiled	[CE]  ';'  expected	54	None	replace
103	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  names.onlyAffectsClassDef;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  names.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  names.onlyAffectsClassDef;	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef;    	non-compiled	[CE]  ';'  expected	54	None	replace
104	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef;	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef;    	non-compiled	[CE]  ';'  expected	54	None	replace
105	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  types.onlyAffectsClassDef;  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  types.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  types.onlyAffectsClassDef;	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef;    	non-compiled	[CE]  ';'  expected	54	None	replace
106	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	49	None	replace
107	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	49	None	replace
108	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	49	None	replace
109	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	49	None	replace
110	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.class);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	49	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	21	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	21	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	21	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent.PageSelectionModel.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	21	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	21	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  t,  parent,  ns.PageSelectionModel.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	21	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  parent,  classes.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	21	None	replace
118	[BUG]  [BUGGY]  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  nameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	add	nameInfo.name    =    classes.subclassName;    nameInfo.name  =  classes.subclassName;	  timeout    	compilable	timeout	38	1	add
119	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  nameInfo.name  =  classes.subclassName;  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  nameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name    =    classes.subclassName;    nameInfo.name  =  classes.subclassName;	  timeout    	compilable	timeout	38	1	add
120	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInformation  nameInfo  =  classes.subclassName;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInformation  nameInfo  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name    =    classes.subclassName;    NameInformation  nameInfo  =  classes.subclassName;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	38	None	add
121	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInfo.name  =  classes.subclassName;  [CE]  cannot  find  symbol  NameInfo  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name    =    classes.subclassName;    NameInfo.name  =  classes.subclassName;	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameInfo	38	None	add
122	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  nameInfo.name  =  classes.subClassName;  [CE]  cannot  find  symbol  subClassName  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  nameInfo.name  =  classes.subClassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name    =    classes.subclassName;    nameInfo.name  =  classes.subClassName;	  timeout    	non-compiled	[CE]  cannot  find  symbol  subClassName	38	None	add
123	[BUG]  [BUGGY]  timeout  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	add	nameInfo.name    =    classes.subclassName;    name  =  classes.subclassName;	  timeout    	compilable	timeout	38	1	add
124	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  name  =  classes.subclassName;  timeout  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name    =    classes.subclassName;    name  =  classes.subclassName;	  timeout    	compilable	timeout	38	1	add
125	[BUG]  [BUGGY]  timeout  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	add	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	compilable	timeout	6	1	add
126	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  timeout  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	compilable	timeout	6	1	add
127	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	6	None	add
128	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	6	None	add
129	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  NameInfo  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    NameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameInfo	6	None	add
130	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInfo  info  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInfo  info  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    NameInfo  info  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	add
131	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name);  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name);  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    NameInformation  nameInfo  =  new  NameInformation(nameInfo.name);  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	6	None	add
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent));  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.ChangeEvent.class,  parent));  [CE]  ';'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.ChangeEvent.class,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.ChangeEvent.class,  parent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  nameInfo.name));  [CE]  ';'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  nameInfo.name));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  nameInfo.name));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class));  [CE]  ';'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class));  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getType()));  [CE]  ';'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getType()));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent.class,  parent.getType()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
139	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef);	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  ';'  expected	55	None	replace
140	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  names.onlyAffectsClassDef);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  names.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  names.onlyAffectsClassDef);	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  ';'  expected	55	None	replace
141	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef);	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  ';'  expected	55	None	replace
142	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  types.onlyAffectsClassDef);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  types.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  types.onlyAffectsClassDef);	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  ';'  expected	55	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,SubclassRelationship)	25	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  names);  [CE]  cannot  find  symbol  names  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  names);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  names	25	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nameInfo);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NameInformation)  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nameInfo);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  nameInfo);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NameInformation)	25	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodesToKeep);  [CE]  cannot  find  symbol  nodesToKeep  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodesToKeep);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodesToKeep);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  nodesToKeep	25	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  parent,  n);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	25	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classDefiningFunction);  [CE]  cannot  find  symbol  classDefiningFunction  [FE]                                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classDefiningFunction);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classDefiningFunction);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  classDefiningFunction	25	None	replace
149	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;  [CE]  cannot  find  symbol  NameInfo  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;	  NameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	29	None	replace
150	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  names;  [CE]  cannot  find  symbol  NameInfo  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  names;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  names;	  NameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	29	None	replace
151	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffects;  [CE]  cannot  find  symbol  NameInfo  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  classes.onlyAffects;	  NameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	29	None	replace
152	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes;  [CE]  cannot  find  symbol  NameInfo  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  classes;	  NameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	29	None	replace
153	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  nameInfo;  [CE]  cannot  find  symbol  NameInfo  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  nameInfo;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  nameInfo;	  NameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	29	None	replace
154	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.onlyAffectsClassDef  =  true;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.onlyAffectsClassDef  =  true;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
155	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.onlyAffectsClassDef  =  true;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  names.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  names.onlyAffectsClassDef  =  true;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
156	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes,  nameInfo.onlyAffectsClassDef  =  true;  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  classes,  nameInfo.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  classes,  nameInfo.onlyAffectsClassDef  =  true;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  ';'  expected	61	None	replace
157	[BUG]  [BUGGY]  NameInfo  nameInfo  =  types.onlyAffectsClassDef  =  true;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  types.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  types.onlyAffectsClassDef  =  true;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
158	[BUG]  [BUGGY]  NameInfo,  nameInfo.onlyAffectsClassDef  =  true;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo,  nameInfo.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo,  nameInfo.onlyAffectsClassDef  =  true;	  NameInfo,    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  not  a  statement	28	None	replace
159	[BUG]  [BUGGY]  NameInfo,  names.onlyAffectsClassDef  =  false;  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo,  names.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo,  names.onlyAffectsClassDef  =  false;	  NameInfo,    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  not  a  statement	28	None	replace
160	[BUG]  [BUGGY]  NameInfo  info  =  new  NameInfo(nameInfo.name,  classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  info  =  new  NameInfo(nameInfo.name,  classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  info  =  new  NameInfo(nameInfo.name,  classes.onlyAffectsClassDef);	  NameInfo,    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
161	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
162	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  names);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
163	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
164	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
165	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.superclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.superclassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
166	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
167	[BUG]  [BUGGY]  timeout  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	add	nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  true;	  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef    =    false;    timeout    	compilable	timeout	7	1	replace
168	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  true;  timeout  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  true;	  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef    =    false;    timeout    	compilable	timeout	7	1	replace
169	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	12	None	replace
170	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	12	None	replace
171	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	12	None	replace
172	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassDef);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassDef);	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	12	None	replace
173	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	51	None	replace
174	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.subclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.subclassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	51	None	replace
175	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	51	None	replace
176	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	51	None	replace
177	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subclassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	51	None	replace
178	[BUG]  [BUGGY]  nameInfo.onlyAffectsTypeDef  =  classes.onlyAffectsTypeDef;  [CE]  cannot  find  symbol  onlyAffectsTypeDef  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsTypeDef  =  classes.onlyAffectsTypeDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsTypeDef  =  classes.onlyAffectsTypeDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsTypeDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsTypeDef	18	None	replace
179	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo.name;  [CE]  cannot  find  symbol  onlyAffectsTypeDef  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo.name;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsTypeDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsTypeDef	18	None	replace
180	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo.onlyAffectsClassDef;  [CE]  cannot  find  symbol  onlyAffectsTypeDef  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsTypeDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsTypeDef	18	None	replace
181	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  ns.onlyAffectsTypeDef;  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  ns.onlyAffectsTypeDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  ns.onlyAffectsTypeDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsTypeDef;    	non-compiled	[CE]  cannot  find  symbol  ns	18	None	replace
182	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo;  [CE]  cannot  find  symbol  onlyAffectsTypeDef  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsTypeDef  :  nameInfo;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsTypeDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsTypeDef	18	None	replace
183	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  nameInfo.onlyAffects;  [CE]  cannot  find  symbol  onlyAffects  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  nameInfo.onlyAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  nameInfo.onlyAffects;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  onlyAffects	14	None	replace
184	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffects  :  nameInfo.onlyAffects;  [CE]  cannot  find  symbol  onlyAffects  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffects  :  nameInfo.onlyAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffects  :  nameInfo.onlyAffects;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  onlyAffects	14	None	replace
185	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  nameInfo.name;  [CE]  cannot  find  symbol  onlyAffects  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  nameInfo.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  nameInfo.name;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  onlyAffects	14	None	replace
186	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  names;  [CE]  cannot  find  symbol  onlyAffects  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  names;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects  :  names;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  onlyAffects	14	None	replace
187	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  ns.onlyAffects;  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  ns.onlyAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  ns.onlyAffects;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  ns	14	None	replace
188	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;	          NameInformation    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	19	None	replace
189	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  names.subclassName;	  NameAnalyzer    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	40	None	replace
190	[BUG]  [BUGGY]  NameInfo  info  =  new  NameInfo();  nameInfo.name  =  classes.subclassName;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  info  =  new  NameInfo();  nameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  info  =  new  NameInfo();  nameInfo.name  =  classes.subclassName;	  NameAnalyzer    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
191	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  names.name  =  classes.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  names.name  =  classes.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation();  names.name  =  classes.name;	  NameInformation    nameInfo    =    new    NameInformation().name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	50	None	replace
192	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo.onlyAffectsClassDef;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	13	None	replace
193	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo.name;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo.name;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	13	None	replace
194	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffectsClassDef  :  nameInfo.onlyAffectsClassDef;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffectsClassDef  :  nameInfo.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffectsClassDef  :  nameInfo.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	13	None	replace
195	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffectsClassDef  :  nameInfo.name;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffectsClassDef  :  nameInfo.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes  ==  null?  classes.onlyAffectsClassDef  :  nameInfo.name;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	13	None	replace
196	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  ns.onlyAffectsClassDef;  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  ns.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  ns.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  ns	13	None	replace
197	[BUG]  [BUGGY]  NameInformation  nameInfo  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	46	None	replace
198	[BUG]  [BUGGY]  NameInformation  nameInfo  =  null;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  null;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  null;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	46	None	replace
199	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	1	None	replace
200	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	1	None	replace
201	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.name);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.name);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
202	[BUG]  [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(ns.PageSelectionModel,  n);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(ns.PageSelectionModel,  n);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  t.createNameInformation(ns.PageSelectionModel,  n);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
203	[BUG]  [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(ns,  n);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(ns,  n);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  t.createNameInformation(ns,  n);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
204	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.class);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.class);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
205	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
206	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.createNameInformation(t,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.createNameInformation(t,  ns.PageSelectionModel);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.createNameInformation(t,  ns.PageSelectionModel);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
207	[BUG]  [BUGGY]  NameInfo  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;	  NameInfo    nameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  ';'  expected	48	None	replace
208	[BUG]  [BUGGY]  NameInfo  nameInfo.onlyAffectsClassDef  =  classes.onlyAffects;  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo.onlyAffectsClassDef  =  classes.onlyAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo.onlyAffectsClassDef  =  classes.onlyAffects;	  NameInfo    nameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  ';'  expected	48	None	replace
209	[BUG]  [BUGGY]  NameInfo  nameInfo.onlyAffectsClassDef  =  names;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo.onlyAffectsClassDef  =  names;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo.onlyAffectsClassDef  =  names;	  NameInfo    nameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  ';'  expected	48	None	replace
210	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	3	None	replace
211	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	3	None	replace
212	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	3	None	replace
213	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(DEFAULT_GLOBAL_NAMES,  classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(DEFAULT_GLOBAL_NAMES,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(DEFAULT_GLOBAL_NAMES,  classes);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	3	None	replace
214	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  names);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  names);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	3	None	replace
215	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  namesCopy);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  namesCopy);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  namesCopy);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	3	None	replace
216	[BUG]  [BUGGY]  nameInfo.name  =  classes.name;  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  classes.name;	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  cannot  find  symbol  name	39	None	replace
217	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(convention);	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
218	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance();  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.newInstance();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionModel.newInstance();	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
219	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent);  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent);	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
220	[BUG]  [BUGGY]  nameInfo.name  =  new  NameInformation();  [CE]  incompatible  types  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  new  NameInformation();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  new  NameInformation();	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  incompatible  types	39	None	replace
221	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.getName(convention);  [CE]  package  ns  does  not  exist  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.getName(convention);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionModel.getName(convention);	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
222	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.getName();  [CE]  package  ns  does  not  exist  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.getName();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionModel.getName();	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
223	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  classes,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	2	None	replace
224	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	2	None	replace
225	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	2	None	replace
226	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.createNameInformation(n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.createNameInformation(n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(t.createNameInformation(n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	2	None	replace
227	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes.name));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes.name));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes.name));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	2	None	replace
228	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  names;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  names;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  names;	  nameInfo.onlyAffectsClassDef    =    classes;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	15	None	replace
229	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  nameInfo;	  nameInfo.onlyAffectsClassDef    =    classes;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	15	None	replace
230	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsCLASSDef;  [CE]  cannot  find  symbol  onlyAffectsCLASSDef  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsCLASSDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsCLASSDef;	  nameInfo.onlyAffectsClassDef    =    classes;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsCLASSDef	15	None	replace
231	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDecl;  [CE]  cannot  find  symbol  onlyAffectsDecl  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDecl;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDecl;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsName;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsDecl	16	None	replace
232	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsFunctionName;  [CE]  cannot  find  symbol  onlyAffectsFunctionName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsFunctionName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsFunctionName;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsName;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsFunctionName	16	None	replace
233	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsInformation;  [CE]  cannot  find  symbol  onlyAffectsInformation  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsInformation;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsInformation;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsName;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsInformation	16	None	replace
234	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDeclaration;  [CE]  cannot  find  symbol  onlyAffectsDeclaration  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDeclaration;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDeclaration;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsName;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsDeclaration	16	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent));  [CE]  ';'  expected  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  t,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  t,  ns.PageSelectionModel.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.ChangeEvent));  [CE]  ';'  expected  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
241	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  Collections.EMPTY_LIST;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  Collections.EMPTY_LIST;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  Collections.EMPTY_LIST;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
242	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo.name;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo.name;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
243	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  names;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  names;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  names;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
244	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo.class;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo.class;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo.class;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
245	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  nameInfo;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
246	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  Classes.onlyAffectsClassDef);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  Classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  Classes.onlyAffectsClassDef);	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  ';'  expected	55	None	replace
247	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes,  nameInfo.subclassName;  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes,  nameInfo.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes,  nameInfo.subclassName;	  NameInfo    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  ';'  expected	37	None	replace
248	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.PageSelectionModel);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.PageSelectionModel);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
249	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameInfo.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  NameInfo  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true;  NameInfo.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	10	None	replace
250	[BUG]  [BUGGY]  timeout  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	add	nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInfo.onlyAffectsClassDef    =    false;    	compilable	timeout	10	1	replace
251	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  false;  timeout  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInfo.onlyAffectsClassDef    =    false;    	compilable	timeout	10	1	replace
252	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	12	None	replace
253	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsSimpleName;  [CE]  cannot  find  symbol  onlyAffectsSimpleName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsSimpleName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsSimpleName;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsName;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsSimpleName	16	None	replace
254	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsType;  [CE]  cannot  find  symbol  onlyAffectsType  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsType;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsType;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsName;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsType	16	None	replace
255	[BUG]  [BUGGY]  namesInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;  [CE]  cannot  find  symbol  namesInfo  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  namesInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	namesInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  namesInfo	13	None	replace
256	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef  +  1;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef  +  1;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef  +  1;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	13	None	replace
257	[BUG]  [BUGGY]  namingInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;  [CE]  cannot  find  symbol  namingInfo  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  namingInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	namingInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  namingInfo	13	None	replace
258	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    new    NameInformation();    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
259	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  ns.PageSelectionModel.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	20	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.class);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol  ns	20	None	replace
262	[BUG]  [BUGGY]  nameInfo.name  =  names.subclassName;  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  names.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  names.subclassName;	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  cannot  find  symbol  names	39	None	replace
263	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.getName();  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.getName();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionInformation.getName();	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
264	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    NameInfo  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	add
265	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInfo  info  =  new  NameInformation(nameInfo.name);  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInfo  info  =  new  NameInformation(nameInfo.name);  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    NameInfo  info  =  new  NameInformation(nameInfo.name);  nameInfo.onlyAffectsClassDef  =  false;  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	add
266	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  false;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  false;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
267	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  new  HashMap  <  String,Object>();  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  new  HashMap  <  String,Object>();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  new  HashMap  <  String,Object>();	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
268	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  new  HashSet  <  String>();  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  new  HashSet  <  String>();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffects()  :  new  HashSet  <  String>();	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
269	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameAnalyzer  nameInfo  =  new  NameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameAnalyzer  nameInfo  =  new  NameInformation();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true;  NameAnalyzer  nameInfo  =  new  NameInformation();	  nameInfo.onlyAffectsClassDef    =    false;    NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	45	None	replace
270	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(classes.name);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(classes.name);	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
271	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo);	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent));  [CE]  ';'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  #PageSelectionModel.ChangeEvent));  [CE]  illegal  character:  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  #PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent,  #PageSelectionModel.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  illegal  character:  	24	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent));  [CE]  ';'  expected  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel,  parent));  [CE]  ';'  expected  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns.PageSelectionModel,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns.PageSelectionModel,  parent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent));    	non-compiled	[CE]  ';'  expected	24	None	replace
276	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  ns.PageSelectionModel.ChangeEvent);	  NameInfo.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  ';'  expected	27	None	replace
277	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.superclassName;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.superclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.superclassName;	          NameInformation    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	19	None	replace
278	[BUG]  [BUGGY]  names.onlyAffectsClassDef  =  classes.onlyAffects;  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  names.onlyAffectsClassDef  =  classes.onlyAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	names.onlyAffectsClassDef  =  classes.onlyAffects;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  names	14	None	replace
279	[BUG]  [BUGGY]  namingInfo.onlyAffectsClassDef  =  classes.onlyAffects;  [CE]  cannot  find  symbol  namingInfo  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  namingInfo.onlyAffectsClassDef  =  classes.onlyAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	namingInfo.onlyAffectsClassDef  =  classes.onlyAffects;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  namingInfo	14	None	replace
280	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAllAffects;  [CE]  cannot  find  symbol  onlyAllAffects  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAllAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAllAffects;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  onlyAllAffects	14	None	replace
281	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsNameDef;  [CE]  cannot  find  symbol  onlyAffectsNameDef  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsNameDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsNameDef;	  nameInfo.onlyAffectsClassDef    =    classes;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsNameDef	15	None	replace
282	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInformation  nameInfo.name  =  classes.subclassName;  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInformation  nameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name    =    classes.subclassName;    NameInformation  nameInfo.name  =  classes.subclassName;	  timeout    	non-compiled	[CE]  ';'  expected	38	None	add
283	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInfo  nameInfo  =  classes.subclassName;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInfo  nameInfo  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name    =    classes.subclassName;    NameInfo  nameInfo  =  classes.subclassName;	  timeout    	non-compiled	[CE]  cannot  find  symbol	38	None	add
284	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInfo  info  =  classes.subclassName;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  classes.subclassName;  NameInfo  info  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name    =    classes.subclassName;    NameInfo  info  =  classes.subclassName;	  timeout    	non-compiled	[CE]  cannot  find  symbol	38	None	add
285	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  names.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  names.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true;  names.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef    =    false;    timeout    	non-compiled	[CE]  cannot  find  symbol  names	7	None	replace
286	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  NameInfo  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true;  nameInfo.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef    =    false;    timeout    	non-compiled	[CE]  cannot  find  symbol  NameInfo	7	None	replace
287	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
288	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation().name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation().name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation().name;	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
289	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.subclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.subclassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes.subclassName);	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
290	[BUG]  [BUGGY]  NameAnalyzer.onlyAffectsClassDef  =  false;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer.onlyAffectsClassDef  =  false;	  naming.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	35	None	replace
291	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.onlyAffectsClassDef;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  classes.onlyAffectsClassDef;	  NameInfo    nameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
292	[BUG]  [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(n,  ns,  parent);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(n,  ns,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  t.createNameInformation(n,  ns,  parent);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
293	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parents);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
294	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  classes.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  classes.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  classes.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    classes.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	56	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  names);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  names);	          NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScope());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  CreateNameInformation());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  CreateNameInformation());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes,  new  CreateNameInformation());	  NodeTraversal.traverse(compiler,    n,    parent,    new    CreateNameInformation());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
297	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  fn.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  fn.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  fn.onlyAffectsClassDef  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    fn.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	57	None	replace
298	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo().name;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo().name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo().name;	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
299	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo.node);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo.node);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo.node);	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
300	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo.class);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo.class);	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
301	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.NameAnalyzer.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.NameAnalyzer.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.NameAnalyzer.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	2	None	replace
302	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	2	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	21	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent,  ns.PageSelectionModel.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	21	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  compiler.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  compiler.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  compiler.PageSelectionModel.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	21	None	replace
306	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
307	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation().name;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation().name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation().name;	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
308	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
309	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(nameInfo.class);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(nameInfo.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(nameInfo.class);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
310	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.NameAnalyzer.createNameInformation(t,  n));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.NameAnalyzer.createNameInformation(t,  n));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.NameAnalyzer.createNameInformation(t,  n));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
311	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n),  names);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n),  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n),  names);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
312	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
313	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  names));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  names));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  names));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
314	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
315	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.name);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.name);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
316	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation().name;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation().name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation().name;	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  namesInfo);  [CE]  cannot  find  symbol  namesInfo  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  namesInfo);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  namesInfo);	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  cannot  find  symbol  namesInfo	42	None	replace
318	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  new  FindDependencyScopes());  [CE]  cannot  find  symbol  parents  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  new  FindDependencyScopes());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parents,  new  FindDependencyScopes());	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  cannot  find  symbol  parents	42	None	replace
319	[BUG]  [BUGGY]  NameInfo  nameInfo,  classes.onlyAffectsClassDef  =  false;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo,  classes.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo,  classes.onlyAffectsClassDef  =  false;	  NameInfo,    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  ';'  expected	28	None	replace
320	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo.name,  classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo.name,  classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo.name,  classes.onlyAffectsClassDef);	  NameInfo,    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NameAnalyzer)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NameAnalyzer)	25	None	replace
322	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsTypeDef  +  1;  [CE]  cannot  find  symbol  onlyAffectsTypeDef  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsTypeDef  +  1;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsTypeDef  +  1;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsTypeDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsTypeDef	18	None	replace
323	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsTypeDef;  [CE]  cannot  find  symbol  NameInfo  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsTypeDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsTypeDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsTypeDef;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	18	None	replace
324	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsRelationshipDef;  [CE]  cannot  find  symbol  onlyAffectsRelationshipDef  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsRelationshipDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsRelationshipDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsTypeDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsRelationshipDef	18	None	replace
325	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	51	None	replace
326	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	51	None	replace
327	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	1	None	replace
328	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	1	None	replace
329	[BUG]  [BUGGY]  NameInfo  info  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  info  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  info  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;	  NameAnalyzer    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
330	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;	  NameAnalyzer    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	40	None	replace
331	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.superclassName;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.superclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.superclassName;	  NameAnalyzer    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	40	None	replace
332	[BUG]  [BUGGY]  NameInfo  nameInfo.onlyAffectsClassDef  = " ";  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo.onlyAffectsClassDef  = " ";  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo.onlyAffectsClassDef  = " ";	  NameInfo    nameInfo.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  	30	None	replace
333	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffects();  [CE]  cannot  find  symbol  NameInfo  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffects();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  classes.onlyAffects();	  NameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	29	None	replace
334	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsName;  [CE]  cannot  find  symbol  NameInfo  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  classes.onlyAffectsName;	  NameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol  NameInfo	29	None	replace
335	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  true;  NameInformation  nameInfo  =  false;	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	46	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.class));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.class));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class));  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.PageSelectionModel.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.getChangeEvent()));  [CE]  ';'  expected  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.getChangeEvent()));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.getChangeEvent()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
339	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation().name  +  classes.subclassName;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation().name  +  classes.subclassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation().name  +  classes.subclassName;	  NameInformation    nameInfo    =    new    NameInformation().name;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	50	None	replace
340	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  Classes.onlyAffectsClassDef;  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  Classes.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  Classes.onlyAffectsClassDef;	  NameInfo.onlyAffectsClassDef    =    false,    classes.onlyAffectsClassDef;    	non-compiled	[CE]  ';'  expected	54	None	replace
341	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassName;  [CE]  cannot  find  symbol  onlyAffectsClassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassName;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsClassName;	  nameInfo.onlyAffectsClassDef    =    classes;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassName	15	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent.class);  [CE]  illegal  character:  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  #PageSelectionModel.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  illegal  character:  	20	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent.class));  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent.class));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent.class));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes.ChangeEvent.class);  [CE]  package  classes  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  classes.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  classes.ChangeEvent.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes  does  not  exist	20	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSError.class);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSError.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  NSError.class);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
346	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
347	[BUG]  [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(ns,  parent);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  t.createNameInformation(ns,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  t.createNameInformation(ns,  parent);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.getChangeEvent()));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent.getChangeEvent()));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent.getChangeEvent()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.createChangeEvent()));  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  ns,  parent.createChangeEvent()));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  ns,  parent.createChangeEvent()));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent.class));    	non-compiled	[CE]  ';'  expected	22	None	replace
350	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef  =  false;  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef        =        false;        nameInfo.onlyAffectsClassDef    =    false;    NameInformation  nameInfo  =  new  NameInformation();  nameInfo.onlyAffectsClassDef  =  false;	  timeout    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	6	None	add
351	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent());	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
352	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n,  parent);	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	9	None	replace
353	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  n);	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	9	None	replace
354	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation();  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  ns.PageSelectionModel.createNameInformation();	  nameInfo.onlyAffectsClassDef    =    false;    NameInformation    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	9	None	replace
355	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.DEFAULT_GLOBAL_NAMES);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	3	None	replace
356	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	3	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent);  [CE]  package  NSErrors  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  NSErrors.PageSelectionModel.ChangeEvent);	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  NSErrors  does  not  exist	21	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent));  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ChangeEvent(ns.PageSelectionModel.ChangeEvent));	          NodeTraversal.traverse(compiler,    parent,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
359	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.PageSelectionModel.createNameInformation(t,  n,  classes));  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.PageSelectionModel.createNameInformation(t,  n,  classes));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.PageSelectionModel.createNameInformation(t,  n,  classes));	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
360	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.PageSelectionProvider.createNameInformation(t,  n,  classes));  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.PageSelectionProvider.createNameInformation(t,  n,  classes));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(nameInfo,  ns.PageSelectionProvider.createNameInformation(t,  n,  classes));	  NameInfo    nameInfo    =    new    NameInfo(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
361	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  methods);  [CE]  cannot  find  symbol  methods  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  methods);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  methods);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  methods	25	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  NameAnalyzer());  [CE]  constructor  NameAnalyzer  in  class  NameAnalyzer  cannot  be  applied  to  given  types;  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  NameAnalyzer());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  NameAnalyzer());	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  constructor  NameAnalyzer  in  class  NameAnalyzer  cannot  be  applied  to  given  types;	25	None	replace
363	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  types.onlyAffects;  [CE]  cannot  find  symbol  types  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  types.onlyAffects;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  types.onlyAffects;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffects;    	non-compiled	[CE]  cannot  find  symbol  types	14	None	replace
364	[BUG]  [BUGGY]  nameInfo.name  =(classes!=  null)?  classes.subclassName  :  new  NameInformation();  [CE]  incompatible  types  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =(classes!=  null)?  classes.subclassName  :  new  NameInformation();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =(classes!=  null)?  classes.subclassName  :  new  NameInformation();	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  incompatible  types	39	None	replace
365	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.getClassName(parent);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionProvider.getClassName(parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionProvider.getClassName(parent);	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
366	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation();  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionInformation.createNameInformation();	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
367	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n,  parent);  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n,  parent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.name  =  ns.PageSelectionInformation.createNameInformation(t,  n,  parent);	  nameInfo.name    =    classes.subclassName;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	39	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation()));  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation()));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation()));	  NodeTraversal.traverse(compiler,    n,    parent,    new    CreateNameInformation());    	non-compiled	[CE]  ';'  expected	64	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  methods);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  methods);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  CreateNameInformation(),  methods);	  NodeTraversal.traverse(compiler,    n,    parent,    new    CreateNameInformation());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
370	[BUG]  [BUGGY]  ns.PageSelectionProvider  <  N,  V>  parent  =  ns.PageSelectionProvider.getParent();  [CE]  package  ns  does  not  exist  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  ns.PageSelectionProvider  <  N,  V>  parent  =  ns.PageSelectionProvider.getParent();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	ns.PageSelectionProvider  <  N,  V>  parent  =  ns.PageSelectionProvider.getParent();	  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef    =    false;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	7	None	replace
371	[BUG]  [BUGGY]  ns.PageSelectionProvider  provider  =  t.getSelectionProvider();  nameInfo.onlyAffectsClassDef  =  true;  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  ns.PageSelectionProvider  provider  =  t.getSelectionProvider();  nameInfo.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	ns.PageSelectionProvider  provider  =  t.getSelectionProvider();  nameInfo.onlyAffectsClassDef  =  true;	  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef    =    false;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	7	None	replace
372	[BUG]  [BUGGY]  ns.PageSelectionProvider  provider  =  t.getSelectionProvider();  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  ns.PageSelectionProvider  provider  =  t.getSelectionProvider();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	ns.PageSelectionProvider  provider  =  t.getSelectionProvider();	  nameInfo.onlyAffectsClassDef    =    false;    nameInfo.onlyAffectsClassDef    =    false;    timeout    	non-compiled	[CE]  package  ns  does  not  exist	7	None	replace
373	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  info.onlyAffectsClassDef;  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  info.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes!=  null?  classes.onlyAffectsClassDef  :  info.onlyAffectsClassDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsClassDef;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	13	None	replace
374	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.name);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.name);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
375	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.INSTANCE);  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.INSTANCE);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	4	None	replace
376	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.ClassDefiningFunction);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.ClassDefiningFunction);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  ns.PageSelectionModel.createNameInformation(t,  ns.ClassDefiningFunction);	  NameInfo    nameInfo    =    ns.PageSelectionModel.createNameInformation(t,    n);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
377	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.onlyAffectsClassDef;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  names.onlyAffectsClassDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  names.onlyAffectsClassDef;	  NameInfo    nameInfo.onlyAffectsClassDef    =    null;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
378	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
379	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameAnalyzer  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.createNameInformation(t,  n,  parent));	          NameAnalyzer    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	43	None	replace
380	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  parent,  classes.name));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  parent,  classes.name));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(convention,  n,  parent,  classes.name));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(convention,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	5	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(t,  ns.PageSelectionModel.ChangeEvent()));  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(t,  ns.PageSelectionModel.ChangeEvent()));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(t,  ns.PageSelectionModel.ChangeEvent()));	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  package  ns  does  not  exist	42	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  convention);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NameAnalyzer.FindDependencyScopes,CodingConvention)  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  convention);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScopes(),  convention);	  NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScopes());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NameAnalyzer.FindDependencyScopes,CodingConvention)	42	None	replace
383	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(classes.onlyAffectsClassDef  =  true);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(classes.onlyAffectsClassDef  =  true);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(classes.onlyAffectsClassDef  =  true);	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
384	[BUG]  [BUGGY]  NameInfo  nameInfo  =  groups.onlyAffectsClassDef  =  true;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  groups.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  groups.onlyAffectsClassDef  =  true;	  NameInfo    nameInfo    =    classes.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
385	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent.class,  ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
386	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent(),  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent(),  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.ChangeEvent(),  ns.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
387	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInfo(ns.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInfo    nameInfo    =    new    NameInfo();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
388	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDef;  [CE]  cannot  find  symbol  onlyAffectsDef  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDef;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDef;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsName;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsDef	16	None	replace
389	[BUG]  [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDeclared;  [CE]  cannot  find  symbol  onlyAffectsDeclared  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDeclared;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo.onlyAffectsClassDef  =  classes.onlyAffectsDeclared;	  nameInfo.onlyAffectsClassDef    =    classes.onlyAffectsName;    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsDeclared	16	None	replace
390	[BUG]  [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef();  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo.onlyAffectsClassDef  =  true,  classes.onlyAffectsClassDef();	  NameInfo.onlyAffectsClassDef    =    true;    	non-compiled	[CE]  ';'  expected	27	None	replace
391	[BUG]  [BUGGY]  NameInfo,  names.onlyAffectsClassDef  =  true;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo,  names.onlyAffectsClassDef  =  true;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo,  names.onlyAffectsClassDef  =  true;	  NameInfo,    nameInfo.onlyAffectsClassDef    =    false;    	non-compiled	[CE]  not  a  statement	28	None	replace
392	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.createNameInformation(classes,  n));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.createNameInformation(classes,  n));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.createNameInformation(classes,  n));	  NameInformation    nameInfo    =    new    NameInformation(ns.PageSelectionModel.createNameInformation(t,    n));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	63	None	replace
393	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;	          NameInformation    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
394	[BUG]  [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.name;	          NameInformation    nameInfo    =    new    NameInformation();    nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  name	19	None	replace
395	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
396	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
397	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent());  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent());  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent());	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
398	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes.name));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes.name));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(t,  n,  parent,  classes.name));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
399	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.PageSelectionModel.createNameInformation(t,  n,  parent));  [CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.PageSelectionModel.createNameInformation(t,  n,  parent));  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.PageSelectionModel.createNameInformation(t,  n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.createNameInformation(t,    n,    parent));    	non-compiled	[CE]  variable  nameInfo  is  already  defined  in  method  createNameInformation(NodeTraversal,Node,Node)	62	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  convention);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  convention);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  convention);	          NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScope());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  methods);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  classes.subclassName;      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  methods);  [BUGGY]      nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  nameInfo.name  =  singletonGetterClass;  nameInfo.onlyAffectsClassDef  =  true;  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1370	1370	2	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FindDependencyScope(),  methods);	          NodeTraversal.traverse(compiler,    n,    parent,    new    FindDependencyScope());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
