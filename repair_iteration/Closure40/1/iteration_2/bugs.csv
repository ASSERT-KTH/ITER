bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.name);  [CE]  cannot  find  symbol  names  [FE]        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  names	12	None	replace
2	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.onlyAffectsClassDef);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	12	None	replace
3	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.name);  [CE]  cannot  find  symbol  subclassName  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  subclassName	12	None	replace
4	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  subclassName	12	None	replace
5	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.name);  [CE]  cannot  find  symbol  subclassName  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  subclassName	12	None	replace
6	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	8	None	replace
7	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
8	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
9	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
10	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes);  [CE]  cannot  find  symbol  classes  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  classes	8	None	replace
11	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.class);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
12	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	6	None	replace
13	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	6	None	replace
14	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	6	None	replace
15	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  true);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  true);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	6	None	replace
16	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  parent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  parent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	6	None	replace
17	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	6	None	replace
18	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	9	None	replace
19	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	9	None	replace
20	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
21	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	9	None	replace
22	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
23	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
24	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
25	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	5	None	replace
26	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	5	None	replace
27	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	5	None	replace
28	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	5	None	replace
29	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.subclassName);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
30	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName());  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
31	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getName(),  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getName(),  classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	2	None	replace
32	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));  [CE]  cannot  find  symbol  singletonGetterClass  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	2	None	replace
33	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
34	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.getName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.getName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
35	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.getName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.getName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	2	None	replace
36	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName);    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	11	None	replace
37	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	11	None	replace
38	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  true);  [CE]  cannot  find  symbol  subClassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  true);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	11	None	replace
39	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.name);  [CE]  cannot  find  symbol  subClassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	11	None	replace
40	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent));  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent));  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent));	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	1	None	replace
41	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	1	None	replace
42	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	1	None	replace
43	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	1	None	replace
44	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.clone();  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)classes.clone();	      	non-compiled	[CE]  clone()  has  protected  access  in  Object	7	None	replace
45	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.class);	      	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	7	None	replace
46	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName;  [CE]  cannot  find  symbol  nameInfo  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  nameInfo.name  =  classes.subclassName;  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	nameInfo.name  =  classes.subclassName;	      	non-compiled	[CE]  cannot  find  symbol  nameInfo	7	None	replace
47	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent);	      	non-compiled	[CE]  package  ns  does  not  exist	7	None	replace
48	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.getNameInformation();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  classes.getNameInformation();  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.getNameInformation();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
49	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME);	      	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	7	None	replace
50	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	10	None	replace
51	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	10	None	replace
52	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName);  [CE]  cannot  find  symbol  name  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	10	None	replace
53	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	10	None	replace
54	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.name);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  cannot  find  symbol  ns	10	None	replace
55	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName());  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
56	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getSimpleName());  [CE]  cannot  find  symbol  ns  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getSimpleName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  ns	3	None	replace
57	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getSimpleName(),  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getSimpleName(),  classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getSimpleName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	3	None	replace
58	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
59	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getSimpleName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
60	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getSimpleName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
61	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
62	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getReferenceName(),  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getReferenceName(),  classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	4	None	replace
63	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getReferenceName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getReferenceName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
64	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getReferenceName());  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getReferenceName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  ns	4	None	replace
65	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getReferenceName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getReferenceName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
66	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	1	None	replace
67	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(parent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	1	None	replace
68	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	11	None	replace
69	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  compiler);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
70	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  names);  [CE]  cannot  find  symbol  names  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  names);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  names	8	None	replace
71	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
72	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
73	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  cannot  find  symbol  ns	8	None	replace
74	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	5	None	replace
75	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	5	None	replace
76	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	5	None	replace
77	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.sourceName);  [CE]  cannot  find  symbol  sourceName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.sourceName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.sourceName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  sourceName	5	None	replace
78	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getName());  [CE]  cannot  find  symbol  ns  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol  ns	2	None	replace
79	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getName());  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
80	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =  new  NameInformation();  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
81	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.getNameInfo();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =  classes.getNameInfo();  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  classes.getNameInfo();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
82	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.nameInfo;  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =  classes.nameInfo;  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  classes.nameInfo;	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
83	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  classes.getNameAnalyzer();  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameAnalyzer  nameInfo  =  classes.getNameAnalyzer();  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  classes.getNameAnalyzer();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
84	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation();  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
85	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.nameInfo;  [CE]  cannot  find  symbol  nameInfo  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  classes.nameInfo;  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.nameInfo;	      	non-compiled	[CE]  cannot  find  symbol  nameInfo	7	None	replace
86	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  names  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  names);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	9	None	replace
87	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  false);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
88	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  conn);  [CE]  cannot  find  symbol  conn  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  conn);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  conn);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  conn	9	None	replace
89	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  names);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  names);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	6	None	replace
90	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	6	None	replace
91	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	6	None	replace
92	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allNames);  [CE]  cannot  find  symbol  allNames  [FE]        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allNames);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allNames);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  allNames	12	None	replace
93	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.defaultName);  [CE]  cannot  find  symbol  defaultName  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.defaultName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.defaultName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  defaultName	12	None	replace
94	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.languageVersion);  [CE]  cannot  find  symbol  languageVersion  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.languageVersion);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.languageVersion);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  languageVersion	12	None	replace
95	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.localName);  [CE]  cannot  find  symbol  localName  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.localName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.localName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  localName	12	None	replace
96	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName());  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  ')'  expected	2	None	replace
97	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	2	None	replace
98	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.name);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	6	None	replace
99	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	6	None	replace
100	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.naming);  [CE]  cannot  find  symbol  naming  [FE]        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.naming);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.naming);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  naming	12	None	replace
101	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.className);  [CE]  cannot  find  symbol  ns  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.className);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.className);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  ns	12	None	replace
102	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName());  [CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName());    	non-compiled	[CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;	3	None	replace
103	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getReferenceName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getReferenceName());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	4	None	replace
104	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
105	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.clone();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.clone();  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.clone();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
106	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
107	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
108	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
109	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
110	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getModule());  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
111	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
112	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
113	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
114	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName);  [CE]  cannot  find  symbol  className  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  className	9	None	replace
115	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	5	None	replace
116	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName);  [CE]  cannot  find  symbol  subClassName  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	11	None	replace
117	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  names);  [CE]  cannot  find  symbol  subClassName  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  names);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	11	None	replace
118	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  package  ns  does  not  exist  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	10	None	replace
119	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent    [CONTEXT]    break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {    [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]    nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name);    	non-compiled	[CE]  package  ns  does  not  exist	10	None	replace
