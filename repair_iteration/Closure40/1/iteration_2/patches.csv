bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  true);  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	36	None	replace
2	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.onlyAffectsClassDef);  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	36	None	replace
3	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.onlyAffectsClassDef);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  ns	36	None	replace
4	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassDef);  [CE]  cannot  find  symbol  singletonGetterClassDef  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClassDef	36	None	replace
5	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.onlyAffectsClassDef);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	36	None	replace
6	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	21	None	replace
7	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  classes.superclassName);  [CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;	21	None	replace
8	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	21	None	replace
9	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	21	None	replace
10	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.superclassName);  [CE]  cannot  find  symbol  name  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  name	18	None	replace
11	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.superclassName);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
12	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.superclassName,  classes.subclassName);  [CE]  cannot  find  symbol  superclassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  superclassName	18	None	replace
13	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  true);  [CE]  cannot  find  symbol  subclassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	18	None	replace
14	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	18	None	replace
15	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.className);  [CE]  cannot  find  symbol  className  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.className);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    ns.className);    	non-compiled	[CE]  cannot  find  symbol  className	101	None	replace
16	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  parent.className);  [CE]  cannot  find  symbol  className  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  parent.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  parent.className);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    ns.className);    	non-compiled	[CE]  cannot  find  symbol  className	101	None	replace
17	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.className);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.className);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    ns.className);    	non-compiled	[CE]  cannot  find  symbol  names	101	None	replace
18	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.subclassName,  classes.className);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.subclassName,  classes.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.subclassName,  classes.className);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    ns.className);    	non-compiled	[CE]  cannot  find  symbol  ns	101	None	replace
19	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.name);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    ns.className);    	non-compiled	[CE]  cannot  find  symbol  ns	101	None	replace
20	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getReferenceName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
21	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getReferenceName(),  classes);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(compiler.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
22	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getReferenceName());  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  ns	65	None	replace
23	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getReferenceName());  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
24	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getReferenceName());  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
25	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getReferenceName());  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
26	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getReferenceName());  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
27	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo);  [CE]  cannot  find  symbol  nameInfo  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.languageVersion);    	non-compiled	[CE]  cannot  find  symbol  nameInfo	94	None	replace
28	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.node);  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.node);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.node);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.languageVersion);    	non-compiled	[CE]  cannot  find  symbol  node	94	None	replace
29	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes,    names);    	non-compiled	[CE]  cannot  find  symbol  names	70	None	replace
30	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes,    names);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	70	None	replace
31	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes,    names);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	70	None	replace
32	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.getName(),  classes);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(name.getName());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
33	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.getName());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.getName());	  NameInformation    nameInfo    =    new    NameInformation(name.getName());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
34	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  t.getName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  t.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  t.getName());	  NameInformation    nameInfo    =    new    NameInformation(name.getName());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
35	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.getName());  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.getName());	  NameInformation    nameInfo    =    new    NameInformation(name.getName());    	non-compiled	[CE]  cannot  find  symbol  names	34	None	replace
36	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
37	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes,  true);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	71	None	replace
38	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
39	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
40	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
41	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  true,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
42	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
43	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	74	None	replace
44	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.globalNames);  [CE]  cannot  find  symbol  globalNames  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.globalNames);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.globalNames);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  globalNames	74	None	replace
45	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
46	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
47	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
48	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
49	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(convention.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(convention.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(convention.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
50	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
51	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.getNameInformation();  [CE]  cannot  find  symbol  ns  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  ns.getNameInformation();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  ns.getNameInformation();	  NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  cannot  find  symbol  ns	48	None	replace
52	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.getNameInformation();  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.getNameInformation();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.getNameInformation();	  NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  cannot  find  symbol  names	48	None	replace
53	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  nameInfo;  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  nameInfo;	  NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
54	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.classes.getNameInformation();  [CE]  package  ns  does  not  exist  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  ns.classes.getNameInformation();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  ns.classes.getNameInformation();	  NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  package  ns  does  not  exist	48	None	replace
55	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation();  [CE]  cannot  find  symbol  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  new  NameInformation();	  NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
56	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes);  [CE]  cannot  find  symbol  subclassName  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes);    	non-compiled	[CE]  cannot  find  symbol  subclassName	109	None	replace
57	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	109	None	replace
58	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes);  [CE]  cannot  find  symbol  subclassName  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes);    	non-compiled	[CE]  cannot  find  symbol  subclassName	109	None	replace
59	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	109	None	replace
60	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  null);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  null);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  null);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    conn);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	88	None	replace
61	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  compiler);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  compiler);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  compiler);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    conn);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	88	None	replace
62	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionModel);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionModel);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    conn);    	non-compiled	[CE]  cannot  find  symbol  ns	88	None	replace
63	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  false);  [CE]  cannot  find  symbol  subclassName  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  cannot  find  symbol  subclassName	87	None	replace
64	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(false,  classes.superclassName,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(false,  classes.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(false,  classes.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	87	None	replace
65	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.superclassName,  false);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.superclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.superclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	87	None	replace
66	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  false);  [CE]  cannot  find  symbol  subclassName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  cannot  find  symbol  subclassName	87	None	replace
67	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	87	None	replace
68	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  false);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	87	None	replace
69	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	26	None	replace
70	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.singletonGetterClassName);  [CE]  cannot  find  symbol  singletonGetterClassName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.singletonGetterClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.singletonGetterClassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClassName	26	None	replace
71	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subclassName);  [CE]  cannot  find  symbol  name  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	26	None	replace
72	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.node);  [CE]  cannot  find  symbol  node  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.node);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.node);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName);    	non-compiled	[CE]  cannot  find  symbol  node	26	None	replace
73	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes.subclassName);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	28	None	replace
74	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	28	None	replace
75	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.className,  classes.subclassName);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.className,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.className,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	28	None	replace
76	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	28	None	replace
77	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names.subclassName);  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	28	None	replace
78	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	28	None	replace
79	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  parent);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	28	None	replace
80	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	51	None	replace
81	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	51	None	replace
82	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  name	51	None	replace
83	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  classes.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  classes.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns,  classes.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	119	None	replace
84	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  parent.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	119	None	replace
85	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  conn.ChangeEvent);  [CE]  cannot  find  symbol  conn  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  conn.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  conn.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  conn	119	None	replace
86	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent,  names);  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.ChangeEvent,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	119	None	replace
87	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	119	None	replace
88	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getScope());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getScope());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  t.getScope());	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	119	None	replace
89	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclassName);  [CE]  cannot  find  symbol  superclassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  superclassName	68	None	replace
90	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	68	None	replace
91	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSuperclassName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSuperclassName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSuperclassName());	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
92	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	68	None	replace
93	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	68	None	replace
94	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.SingletonGetterClass);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.SingletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.SingletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(classes,    singletonGetterClass);    	non-compiled	[CE]  cannot  find  symbol  ns	90	None	replace
95	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(singletonGetterClass));  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(singletonGetterClass));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createNameInformation(singletonGetterClass));	  NameInformation    nameInfo    =    new    NameInformation(classes,    singletonGetterClass);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	90	None	replace
96	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createSingletonGetterClassName(parent));  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createSingletonGetterClassName(parent));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.createSingletonGetterClassName(parent));	  NameInformation    nameInfo    =    new    NameInformation(classes,    singletonGetterClass);    	non-compiled	[CE]  package  ns  does  not  exist	90	None	replace
97	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subClassName,  classes);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subClassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.subClassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	117	None	replace
98	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subClassName);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	117	None	replace
99	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  names);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    names);    	non-compiled	[CE]  cannot  find  symbol  name	117	None	replace
100	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  names);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    names);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	117	None	replace
101	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(namings.subClassName,  classes);  [CE]  cannot  find  symbol  namings  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(namings.subClassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(namings.subClassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    names);    	non-compiled	[CE]  cannot  find  symbol  namings	117	None	replace
102	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  names);  [CE]  cannot  find  symbol  subClassName  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    names);    	non-compiled	[CE]  cannot  find  symbol  subClassName	117	None	replace
103	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.naming);  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.naming);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.naming);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.naming);    	non-compiled	[CE]  cannot  find  symbol  names	100	None	replace
104	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.naming);  [CE]  cannot  find  symbol  subclassName  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.naming);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.naming);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.naming);    	non-compiled	[CE]  cannot  find  symbol  subclassName	100	None	replace
105	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.localName);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.localName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.localName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.localName);    	non-compiled	[CE]  cannot  find  symbol  names	95	None	replace
106	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.localName);  [CE]  cannot  find  symbol  subclassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.localName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.localName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.localName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	95	None	replace
107	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName()));  [CE]  cannot  find  symbol  singletonGetterClass  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName()));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName()));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	96	None	replace
108	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n.getName());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
109	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
110	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass,  parent.getName());  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
111	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName(),  classes);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
112	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName(),  classes);  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
113	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	110	None	replace
114	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.getModule());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
115	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.getModule());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	110	None	replace
116	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getModule(),  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getModule(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t.getModule(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	110	None	replace
117	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getModule());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
118	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getModule());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
119	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.getModule());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
120	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes.subclassName);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	12	None	replace
121	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.className);  [CE]  cannot  find  symbol  className  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.className);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  className	12	None	replace
122	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	12	None	replace
123	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	12	None	replace
124	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	12	None	replace
125	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.subclassName);  [CE]  cannot  find  symbol  ns  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  ns.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	12	None	replace
126	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  n,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  n,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  n,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	22	None	replace
127	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  names.superclassName);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  names.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  names.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	22	None	replace
128	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	22	None	replace
129	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.superclassName);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	22	None	replace
130	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	22	None	replace
131	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	22	None	replace
132	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.nameInfo;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  ns.nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  ns.nameInfo;	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
133	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.nameInfo;  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  names.nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  names.nameInfo;	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
134	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names;  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  names;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  names;	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
135	[BUG]  [BUGGY]  NameInfo  nameInfo  =  types.nameInfo;  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  types.nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  types.nameInfo;	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
136	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInfo(classes.nameInfo);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInfo(classes.nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInfo(classes.nameInfo);	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
137	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  convention.getSingletonGetterClassName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  convention.getSingletonGetterClassName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  convention.getSingletonGetterClassName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	102	None	replace
138	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName,  convention.getSingletonGetterClassName());  [CE]  cannot  find  symbol  singletonGetterClassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName,  convention.getSingletonGetterClassName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName,  convention.getSingletonGetterClassName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClassName	102	None	replace
139	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getSingletonGetterClassName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getSingletonGetterClassName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.getSingletonGetterClassName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	102	None	replace
140	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent);  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName());    	non-compiled	[CE]  ')'  expected	102	None	replace
141	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass),  t);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass),  t);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass),  t);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	102	None	replace
142	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	20	None	replace
143	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  n,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  n,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  n,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	20	None	replace
144	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	20	None	replace
145	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  names.superclassName);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  names.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  names.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	20	None	replace
146	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.superclassName);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	20	None	replace
147	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	20	None	replace
148	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
149	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.name);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
150	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.subclassName,  classes.name);  [CE]  cannot  find  symbol  subclassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  subclassName	3	None	replace
151	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  convention.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  convention.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  convention.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  subclassName	3	None	replace
152	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.name);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names.name);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  names	3	None	replace
153	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
154	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getName(),  classes);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
155	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
156	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent.getName(),  classes);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(parent.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
157	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName(),  classes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
158	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getName(),  classes);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName(),    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	31	None	replace
159	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  parent.subclassName);  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  parent.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  parent.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	17	None	replace
160	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  names.singletonGetterClass);  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  names.singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  names.singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	17	None	replace
161	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  singletonGetterClass);  [CE]  cannot  find  symbol  names  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	17	None	replace
162	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	17	None	replace
163	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	89	None	replace
164	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  uniquetonGetterClass);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  uniquetonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  uniquetonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
165	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  singletonGetterClass);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
166	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  SINGLE_GetterClass);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  SINGLE_GetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  SINGLE_GetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
167	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
168	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  SingletonGetterClass);  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  SingletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  SingletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
169	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className);  [CE]  cannot  find  symbol  className  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.className);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName);    	non-compiled	[CE]  cannot  find  symbol  className	25	None	replace
170	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(n,  parent);	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	67	None	replace
171	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent);	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	67	None	replace
172	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  parent);	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	67	None	replace
173	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  parent);	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	67	None	replace
174	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  parent);	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	67	None	replace
175	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  parent);	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	67	None	replace
176	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.ChangeEvent.class);  [CE]  package  convention  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(convention.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  convention  does  not  exist	45	None	replace
177	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.class.get(classes.PageSelectionModel.ChangeEvent.class);  [CE]  package  classes.PageSelectionModel  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  ns.class.get(classes.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  ns.class.get(classes.PageSelectionModel.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes.PageSelectionModel  does  not  exist	45	None	replace
178	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent.class);  [CE]  package  classes.PageSelectionModel  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes.PageSelectionModel  does  not  exist	45	None	replace
179	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.ChangeEvent.class);  [CE]  package  classes  does  not  exist  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.get(classes.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes  does  not  exist	45	None	replace
180	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.PageSelectionModel.ChangeEvent.class);  [CE]  package  convention.PageSelectionModel  does  not  exist  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(convention.PageSelectionModel.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  convention.PageSelectionModel  does  not  exist	45	None	replace
181	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent.class);  [CE]  package  compiler  does  not  exist  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  compiler  does  not  exist	45	None	replace
182	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.name);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.name);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	5	None	replace
183	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	5	None	replace
184	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	5	None	replace
185	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  names.name);  [CE]  cannot  find  symbol  subclassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  names.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  names.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  subclassName	5	None	replace
186	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	42	None	replace
187	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	42	None	replace
188	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.ChangeEvent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	42	None	replace
189	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	42	None	replace
190	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	42	None	replace
191	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	42	None	replace
192	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName(),  classes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
193	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName(),  classes);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getSimpleName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
194	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getSimpleName(),  classes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getSimpleName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getSimpleName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
195	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getSimpleName(),  classes);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getSimpleName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.getSimpleName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName(),    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	57	None	replace
196	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent.getSimpleName(),  classes);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent.getSimpleName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(parent.getSimpleName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
197	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getSimpleName(),  classes);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getSimpleName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t.getSimpleName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
198	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(t.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
199	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  n.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(t.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
200	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  t.getSimpleName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  t.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  t.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(t.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	59	None	replace
201	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(t.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
202	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  n,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  n,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  n,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	72	None	replace
203	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  n,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	72	None	replace
204	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	72	None	replace
205	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(n,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	72	None	replace
206	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	72	None	replace
207	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	50	None	replace
208	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.name);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	50	None	replace
209	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	50	None	replace
210	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.name);    	non-compiled	[CE]  cannot  find  symbol  name	50	None	replace
211	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.sourceName);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.sourceName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.sourceName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.sourceName);    	non-compiled	[CE]  cannot  find  symbol  ns	77	None	replace
212	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.sourceName);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.sourceName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.sourceName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.sourceName);    	non-compiled	[CE]  cannot  find  symbol  names	77	None	replace
213	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	99	None	replace
214	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	99	None	replace
215	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	99	None	replace
216	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  names,  classes.subclassName);  [CE]  cannot  find  symbol  names  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  names,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  names,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	99	None	replace
217	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	99	None	replace
218	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  prefix);  [CE]  cannot  find  symbol  prefix  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  prefix);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  prefix);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  prefix	99	None	replace
219	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  names.subclassName);  [CE]  cannot  find  symbol  names  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  names.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	99	None	replace
220	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subClassName);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	39	None	replace
221	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subClassName);  [CE]  cannot  find  symbol  subClassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  subClassName	39	None	replace
222	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  classes.name);  [CE]  cannot  find  symbol  subClassName  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  subClassName	39	None	replace
223	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	39	None	replace
224	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.name);  [CE]  cannot  find  symbol  name  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  parent.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	39	None	replace
225	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subClassName);  [CE]  cannot  find  symbol  name  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	39	None	replace
226	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	16	None	replace
227	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	16	None	replace
228	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n,  classes.subclassName,  parent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n,  classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	16	None	replace
229	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  parent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	16	None	replace
230	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  n);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  n);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  n);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	16	None	replace
231	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  parent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	16	None	replace
232	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent));  [CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent));    	non-compiled	[CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;	40	None	replace
233	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass),  parent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass),  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass),  parent);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent));    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	40	None	replace
234	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass,  parent));  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass,  parent));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass,  parent));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent));    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	40	None	replace
235	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n));  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent));    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	40	None	replace
236	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n),  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n),  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n),  parent);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent));    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	40	None	replace
237	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getSingletonGetterClassName(parent));  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getSingletonGetterClassName(parent));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getSingletonGetterClassName(parent));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent));    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
238	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  ns.PageSelectionModel.getName());  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  ns.PageSelectionModel.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  package  ns  does  not  exist	97	None	replace
239	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.getName());  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  cannot  find  symbol  ns	97	None	replace
240	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.getName());  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  cannot  find  symbol  ns	97	None	replace
241	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.getName());  [CE]  package  ns  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  package  ns  does  not  exist	97	None	replace
242	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getName(),  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	97	None	replace
243	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.getName());  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  cannot  find  symbol  ns	97	None	replace
244	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.classes);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.classes);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	10	None	replace
245	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  classes);  [CE]  cannot  find  symbol  classes  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  classes);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.classes);    	non-compiled	[CE]  cannot  find  symbol  classes	10	None	replace
246	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  names);  [CE]  cannot  find  symbol  classes  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.classes);    	non-compiled	[CE]  cannot  find  symbol  classes	10	None	replace
247	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.classes);  [CE]  cannot  find  symbol  classes  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.classes);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.classes);    	non-compiled	[CE]  cannot  find  symbol  classes	10	None	replace
248	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.classes);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.classes);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.classes);    	non-compiled	[CE]  cannot  find  symbol  ns	10	None	replace
249	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  names.superclassName);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  names.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  names.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	111	None	replace
250	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	111	None	replace
251	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	111	None	replace
252	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.superclassName);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	111	None	replace
253	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	111	None	replace
254	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  conn);  [CE]  cannot  find  symbol  conn  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  conn);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  conn);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  conn	111	None	replace
255	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	111	None	replace
256	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
257	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass.getName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass.getName());	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
258	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass.getSimpleName());  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass.getSimpleName());	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
259	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass,  classes);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(singletonGetterClass,  classes);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
260	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allAffectsClassDef);  [CE]  cannot  find  symbol  allAffectsClassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.defaultName);    	non-compiled	[CE]  cannot  find  symbol  allAffectsClassDef	93	None	replace
261	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  ns.getNameAnalyzer();  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameAnalyzer  nameInfo  =  ns.getNameAnalyzer();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  ns.getNameAnalyzer();	  NameAnalyzer    nameInfo    =    classes.getNameAnalyzer();    	non-compiled	[CE]  cannot  find  symbol  ns	83	None	replace
262	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  names.getNameAnalyzer();  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameAnalyzer  nameInfo  =  names.getNameAnalyzer();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  names.getNameAnalyzer();	  NameAnalyzer    nameInfo    =    classes.getNameAnalyzer();    	non-compiled	[CE]  cannot  find  symbol  names	83	None	replace
263	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  conn.getNameAnalyzer();  [CE]  cannot  find  symbol  conn  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameAnalyzer  nameInfo  =  conn.getNameAnalyzer();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  conn.getNameAnalyzer();	  NameAnalyzer    nameInfo    =    classes.getNameAnalyzer();    	non-compiled	[CE]  cannot  find  symbol  conn	83	None	replace
264	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameAnalyzer(classes.getNameAnalyzer());  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameAnalyzer(classes.getNameAnalyzer());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  new  NameAnalyzer(classes.getNameAnalyzer());	  NameAnalyzer    nameInfo    =    classes.getNameAnalyzer();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
265	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  types.getNameAnalyzer();  [CE]  cannot  find  symbol  types  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameAnalyzer  nameInfo  =  types.getNameAnalyzer();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  types.getNameAnalyzer();	  NameAnalyzer    nameInfo    =    classes.getNameAnalyzer();    	non-compiled	[CE]  cannot  find  symbol  types	83	None	replace
266	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  true);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    true);    	non-compiled	[CE]  cannot  find  symbol  name	38	None	replace
267	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  false);  [CE]  cannot  find  symbol  subClassName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    true);    	non-compiled	[CE]  cannot  find  symbol  subClassName	38	None	replace
268	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  true);  [CE]  cannot  find  symbol  subClassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    true);    	non-compiled	[CE]  cannot  find  symbol  subClassName	38	None	replace
269	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  true);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    true);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
270	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  true);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    true);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	38	None	replace
271	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.names);  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.allNames);    	non-compiled	[CE]  cannot  find  symbol  names	92	None	replace
272	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.localNames);  [CE]  cannot  find  symbol  localNames  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.localNames);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.localNames);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.allNames);    	non-compiled	[CE]  cannot  find  symbol  localNames	92	None	replace
273	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.getSimpleName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
274	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
275	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	13	None	replace
276	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.singletonGetterClass);  [CE]  cannot  find  symbol  name  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
277	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(parent,  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	6	None	replace
278	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	19	None	replace
279	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.superclassName);  [CE]  cannot  find  symbol  superclassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  superclassName	19	None	replace
280	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	19	None	replace
281	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclassName,  classes.subclassName);  [CE]  cannot  find  symbol  superclassName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  superclassName	19	None	replace
282	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	19	None	replace
283	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclass,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclass,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.superclass,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	19	None	replace
284	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.subclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	27	None	replace
285	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
286	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getSimpleName());  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  ns	60	None	replace
287	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
288	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
289	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
290	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
291	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  parent);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	7	None	replace
292	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	7	None	replace
293	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	7	None	replace
294	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  conn);  [CE]  cannot  find  symbol  conn  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  conn);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  conn);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes);    	non-compiled	[CE]  cannot  find  symbol  conn	7	None	replace
295	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  ns);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  ns);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	7	None	replace
296	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  n,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  n,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  n,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	112	None	replace
297	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	112	None	replace
298	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	112	None	replace
299	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  names.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	112	None	replace
300	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	112	None	replace
301	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  names.superclassName);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  names.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  names.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	112	None	replace
302	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	112	None	replace
303	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
304	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.getSimpleName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	58	None	replace
305	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName(),  classes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
306	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getReferenceName(),  classes);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
307	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent.getReferenceName(),  classes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(parent.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
308	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getReferenceName(),  classes);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName(),    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	62	None	replace
309	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(consume.getReferenceName(),  classes);  [CE]  cannot  find  symbol  consume  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(consume.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(consume.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName(),    classes);    	non-compiled	[CE]  cannot  find  symbol  consume	62	None	replace
310	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes);  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names,  classes);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	8	None	replace
311	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  parent);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
312	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  convention);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
313	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns,  classes);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  ns,  classes);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	8	None	replace
314	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  convention,  classes);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
315	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.getNameInfo();  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  ns.getNameInfo();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  ns.getNameInfo();	  NameInfo    nameInfo    =    classes.getNameInfo();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
316	[BUG]  [BUGGY]  NameInfo  nameInfo  =  names.getNameInfo();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  names.getNameInfo();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  names.getNameInfo();	  NameInfo    nameInfo    =    classes.getNameInfo();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
317	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.classes.getNameInfo();  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  ns.classes.getNameInfo();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  ns.classes.getNameInfo();	  NameInfo    nameInfo    =    classes.getNameInfo();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
318	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.getNameInfo()  :  nameInfo;  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.getNameInfo()  :  nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  classes!=  null?  classes.getNameInfo()  :  nameInfo;	  NameInfo    nameInfo    =    classes.getNameInfo();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
319	[BUG]  [BUGGY]  NameInfo  nameInfo  =  types.getNameInfo();  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  types.getNameInfo();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  types.getNameInfo();	  NameInfo    nameInfo    =    classes.getNameInfo();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
320	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getSimpleName());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
321	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getSimpleName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
322	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName(),  names);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName(),  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSimpleName(),  names);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
323	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getReferenceName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
324	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getReferenceName());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
325	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
326	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
327	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
328	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
329	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
330	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo  ==  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo  ==  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo  ==  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
331	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getName());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
332	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
333	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
334	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  names);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  names);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
335	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.getName());  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.name,  classes.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getName());    	non-compiled	[CE]  cannot  find  symbol  name	30	None	replace
336	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	15	None	replace
337	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  true);  [CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    true);    	non-compiled	[CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;	15	None	replace
338	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName,  classes.subclassName,  true);  [CE]  cannot  find  symbol  getSingletonGetterClassName  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName,  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    true);    	non-compiled	[CE]  cannot  find  symbol  getSingletonGetterClassName	15	None	replace
339	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.singletonGetterClass,  classes.subclassName,  true);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.singletonGetterClass,  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.singletonGetterClass,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    true);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	15	None	replace
340	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	15	None	replace
341	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  classes.subclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	15	None	replace
342	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
343	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass.getName());  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass.getName());	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
344	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass.getSimpleName());	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
345	[BUG]  [BUGGY]  NameInfo  info  =  new  NameInfoInformation();  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  info  =  new  NameInfoInformation();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  info  =  new  NameInfoInformation();	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
346	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass,  classes);  [CE]  cannot  find  symbol  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(singletonGetterClass,  classes);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
347	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
348	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getName(),  classes.subclassName);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getName(),  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getName(),  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
349	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  nameInfo.subclassName);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  nameInfo.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  nameInfo.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
350	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getName(),  classes.subclassName);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getName(),  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getName(),  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
351	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName(),  classes.subclassName);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName(),  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.getName(),  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
352	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  convention.subclassName);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  convention.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  convention.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
353	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  nameInfo.className);  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  nameInfo.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  nameInfo.className);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
354	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getName(),  classes.subclassName);  [CE]  cannot  find  symbol  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getName(),  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getName(),  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
355	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)ns.classes.clone();  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)ns.classes.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)ns.classes.clone();	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  package  ns  does  not  exist	44	None	replace
356	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(0);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(0);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(0);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
357	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(n);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(n);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(n);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
358	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)superclasses.clone();  [CE]  cannot  find  symbol  superclasses  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)superclasses.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)superclasses.clone();	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol  superclasses	44	None	replace
359	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)types.clone();  [CE]  cannot  find  symbol  types  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)types.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)types.clone();	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol  types	44	None	replace
360	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent.class);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	44	None	replace
361	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getName());  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.getName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getName());    	non-compiled	[CE]  cannot  find  symbol  ns	79	None	replace
362	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.getName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
363	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getName());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  t.getName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
364	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  compiler.getName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
365	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getName());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  n.getName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
366	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  convention);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  convention);	  NameInformation    nameInfo    =    new    NameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	43	None	replace
367	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  convention);	  NameInformation    nameInfo    =    new    NameInformation(convention);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	43	None	replace
368	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  convention);	  NameInformation    nameInfo    =    new    NameInformation(convention);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	43	None	replace
369	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names);	  NameInformation    nameInfo    =    new    NameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  names	43	None	replace
370	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  DEFAULT_GLOBAL_NAMES,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  DEFAULT_GLOBAL_NAMES,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  DEFAULT_GLOBAL_NAMES,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  package  ns  does  not  exist	118	None	replace
371	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  package  ns  does  not  exist	118	None	replace
372	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  classes.DEFAULT_GLOBAL_NAMES);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  classes.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns,  classes.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  cannot  find  symbol  ns	118	None	replace
373	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  Context.DEFAULT_GLOBAL_NAMES);  [CE]  cannot  find  symbol  Context  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  Context.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  Context.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  cannot  find  symbol  Context	118	None	replace
374	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  names);  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  package  ns  does  not  exist	118	None	replace
375	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ClassDefiningFunction.DEFAULT_GLOBAL_NAMES);  [CE]  cannot  find  symbol  ClassDefiningFunction  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ClassDefiningFunction.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ClassDefiningFunction.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  cannot  find  symbol  ClassDefiningFunction	118	None	replace
376	[BUG]  [BUGGY]  nameInfo.name  =  classes.name;  [CE]  cannot  find  symbol  nameInfo  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  nameInfo.name  =  classes.name;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	nameInfo.name  =  classes.name;	  nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	46	None	replace
377	[BUG]  [BUGGY]  nameInfo.name  =  names.subclassName;  [CE]  cannot  find  symbol  nameInfo  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  nameInfo.name  =  names.subclassName;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	nameInfo.name  =  names.subclassName;	  nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	46	None	replace
378	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes);  [CE]  cannot  find  symbol  nameInfo  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	nameInfo.name  =  ns.PageSelectionModel.createNameInformation(t,  n,  classes);	  nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	46	None	replace
379	[BUG]  [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.getName(parent);  [CE]  cannot  find  symbol  nameInfo  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  nameInfo.name  =  ns.PageSelectionModel.getName(parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	nameInfo.name  =  ns.PageSelectionModel.getName(parent);	  nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	46	None	replace
380	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  n,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	113	None	replace
381	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	113	None	replace
382	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  n.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	113	None	replace
383	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes,  nameInfo.superclassName,  classes.subclassName);  [CE]  cannot  find  symbol  superclassName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes,  nameInfo.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes,  nameInfo.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  superclassName	113	None	replace
384	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes,  nameInfo.superclassName,  classes);  [CE]  cannot  find  symbol  superclassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes,  nameInfo.superclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes,  nameInfo.superclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  superclassName	113	None	replace
385	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n,  classes.subclassName,  classes.SuperclassName);  [CE]  cannot  find  symbol  SuperclassName  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  n,  classes.subclassName,  classes.SuperclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  n,  classes.subclassName,  classes.SuperclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  SuperclassName	113	None	replace
386	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.getReferenceName());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
387	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.superclassName);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  name	116	None	replace
388	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  classes.superclassName);  [CE]  cannot  find  symbol  subClassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subClassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	116	None	replace
389	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subClassName);  [CE]  cannot  find  symbol  subClassName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	116	None	replace
390	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	116	None	replace
391	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subClassName,  classes.superclassName);  [CE]  cannot  find  symbol  subClassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subClassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subClassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	116	None	replace
392	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)super.names.clone();  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)super.names.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)super.names.clone();	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
393	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)types.clone();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)types.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)types.clone();	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
394	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.classes.clone();  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.classes.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.classes.clone();	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
395	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)convention.classes.clone();  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)convention.classes.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)convention.classes.clone();	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
396	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.clone();  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.clone();	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
397	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent.class);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent.class);	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
398	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.ChangeEvent.NAME);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.ChangeEvent.NAME);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(convention.ChangeEvent.NAME);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	49	None	replace
399	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent.NAME);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent.NAME);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent.NAME);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	49	None	replace
400	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.ChangeEvent.NAME);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.ChangeEvent.NAME);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.get(classes.ChangeEvent.NAME);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	49	None	replace
401	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent.NAME);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent.NAME);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent.NAME);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	49	None	replace
402	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.classes.get(Ns.PageSelectionModel.ChangeEvent.NAME);  [CE]  package  Ns.PageSelectionModel  does  not  exist  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  ns.classes.get(Ns.PageSelectionModel.ChangeEvent.NAME);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  ns.classes.get(Ns.PageSelectionModel.ChangeEvent.NAME);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  package  Ns.PageSelectionModel  does  not  exist	49	None	replace
403	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME,  ns.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME,  ns.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME,  ns.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	49	None	replace
404	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	14	None	replace
405	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names,  classes.subclassName);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  names,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	14	None	replace
406	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	14	None	replace
407	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  conn);  [CE]  cannot  find  symbol  conn  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  conn);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  conn);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  conn	14	None	replace
408	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  names.subclassName);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  names.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	76	None	replace
409	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  classes.subclassName);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	76	None	replace
410	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.className);  [CE]  cannot  find  symbol  className  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.className);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.className,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  className	114	None	replace
411	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.className,  classes.subclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.className,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.className,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.className,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	114	None	replace
412	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.className,  classes.subclassName);  [CE]  cannot  find  symbol  className  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.className,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.className,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.className,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  className	114	None	replace
413	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	98	None	replace
414	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  classes.singletonGetterClass);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  classes.singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  classes.singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	98	None	replace
415	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name,  classes.subclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	98	None	replace
416	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  classes.name);  [CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(),  classes.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;	98	None	replace
417	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassDef);  [CE]  cannot  find  symbol  superclassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  superclassDef	2	None	replace
418	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.onlyAffectsClassDef);  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  names	2	None	replace
419	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.onlyAffectsClassDef);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  ns	2	None	replace
420	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getName());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  compiler.getName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getName());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
421	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.getName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.getName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getName());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
422	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	52	None	replace
423	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  parent);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	52	None	replace
424	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  true);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	52	None	replace
425	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.get(ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.get(ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	47	None	replace
426	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(convention.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	47	None	replace
427	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.get(classes.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	47	None	replace
428	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(convention.ChangeEvent);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	47	None	replace
429	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.get(classes.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.get(classes.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.get(classes.ChangeEvent);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	47	None	replace
430	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.ChangeEvent);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	47	None	replace
431	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.type);  [CE]  cannot  find  symbol  subclassName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  subclassName	75	None	replace
432	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(type,  classes.subclassName);  [CE]  cannot  find  symbol  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(type,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(type,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  type	75	None	replace
433	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes.type);  [CE]  cannot  find  symbol  name  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  name	75	None	replace
434	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.type);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	75	None	replace
435	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.type);  [CE]  cannot  find  symbol  subclassName  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  subclassName	75	None	replace
436	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName,  classes.type);  [CE]  cannot  find  symbol  subclassName  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  subclassName	75	None	replace
437	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.class);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.class);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
438	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
439	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.class);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  nameInfo.class);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	11	None	replace
440	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.class);  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.class);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  package  ns  does  not  exist	11	None	replace
441	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  names);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
442	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.class);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.class);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
443	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  parent);  [CE]  cannot  find  symbol  subclassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  subclassName	24	None	replace
444	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  parent);  [CE]  cannot  find  symbol  subclassName  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  subclassName	24	None	replace
445	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  n,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  n,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  n,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	24	None	replace
446	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  n);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  n);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  n);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	24	None	replace
447	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  parent.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  subclassName	24	None	replace
448	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	24	None	replace
449	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	91	None	replace
450	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	91	None	replace
451	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.subclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	91	None	replace
452	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  true);  [CE]  cannot  find  symbol  subclassName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    true);    	non-compiled	[CE]  cannot  find  symbol  subclassName	23	None	replace
453	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	23	None	replace
454	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	23	None	replace
455	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  true);  [CE]  cannot  find  symbol  name  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    true);    	non-compiled	[CE]  cannot  find  symbol  name	23	None	replace
456	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  n.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  n.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  n.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent.subclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	4	None	replace
457	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.getName());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent.subclassName);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
458	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(parent,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	4	None	replace
459	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  parent);  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  parent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names);    	non-compiled	[CE]  cannot  find  symbol  names	66	None	replace
460	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  SingletonGetterClass);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  SingletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  SingletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names);    	non-compiled	[CE]  cannot  find  symbol  names	66	None	replace
461	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	66	None	replace
462	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes.name);  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    names.name);    	non-compiled	[CE]  cannot  find  symbol  names	1	None	replace
463	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    names.name);    	non-compiled	[CE]  cannot  find  symbol  names	1	None	replace
464	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(namings.subclassName,  classes.name);  [CE]  cannot  find  symbol  namings  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(namings.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(namings.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    names.name);    	non-compiled	[CE]  cannot  find  symbol  namings	1	None	replace
465	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.subclassName,  classes.name);  [CE]  cannot  find  symbol  subclassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    names.name);    	non-compiled	[CE]  cannot  find  symbol  subclassName	1	None	replace
466	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName);  [CE]  cannot  find  symbol  subClassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.subClassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	37	None	replace
467	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subClassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.subClassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	37	None	replace
468	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.subClassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.subClassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	37	None	replace
469	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
470	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
471	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
472	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(compiler.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
473	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
474	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel,  nameInfo);  [CE]  cannot  find  symbol  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
475	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	9	None	replace
476	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  names,  classes);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	9	None	replace
477	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  parent,  classes);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
478	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  compiler,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  compiler,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  compiler,  classes);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
479	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	9	None	replace
480	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.getReferenceName());  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  ns.PageSelectionModel.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getReferenceName());    	non-compiled	[CE]  package  ns  does  not  exist	103	None	replace
481	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.getReferenceName());  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  ns.PageSelectionModel.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getReferenceName());    	non-compiled	[CE]  package  ns  does  not  exist	103	None	replace
482	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.getReferenceName());  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  ns	103	None	replace
483	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getReferenceName(),  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.PageSelectionModel.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	103	None	replace
484	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.getReferenceName());  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.name,  ns.PageSelectionModel.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  ns	103	None	replace
485	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getReferenceName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  compiler.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
486	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getReferenceName());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  convention.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
487	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName(),  names);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName(),  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getReferenceName(),  names);	  NameInformation    nameInfo    =    new    NameInformation(convention.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
488	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.nameInfo;  [CE]  cannot  find  symbol  ns  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  ns.nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  ns.nameInfo;	  NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol  ns	85	None	replace
489	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;  [CE]  cannot  find  symbol  nameInfo  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  nameInfo;	  NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	85	None	replace
490	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names;  [CE]  cannot  find  symbol  names  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names;	  NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol  names	85	None	replace
491	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.nameInfo;  [CE]  cannot  find  symbol  names  [FE]                                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.nameInfo;	  NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol  names	85	None	replace
492	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();  [CE]  cannot  find  symbol  nameInfo  [FE]                                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation();	  NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	85	None	replace
493	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  compiler);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  compiler);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  compiler);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	69	None	replace
494	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes,  compiler);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes,  compiler);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes,  compiler);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	69	None	replace
495	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes,  compiler);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes,  compiler);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes,  compiler);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	69	None	replace
496	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  classes.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  classes.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.name,  classes.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	53	None	replace
497	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	53	None	replace
498	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	53	None	replace
499	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  name  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  name	53	None	replace
500	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.ChangeEvent);  [CE]  cannot  find  symbol  name  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  name	53	None	replace
501	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	41	None	replace
502	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  names);  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  names	41	None	replace
503	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.onlyAffectsClassDef);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	41	None	replace
504	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	115	None	replace
505	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes.subclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	115	None	replace
506	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	115	None	replace
507	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	115	None	replace
508	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	115	None	replace
509	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.getName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  n.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	35	None	replace
510	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  parent.getName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
511	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  parent.getName());  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
512	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.getName(),  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  parent.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	35	None	replace
513	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  parent.getName());  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
514	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n,  parent.getName());  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(n,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
515	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent,  parent.getName());  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(parent,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(parent,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
516	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.superclassName,  classes);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.superclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.superclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	86	None	replace
517	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes.superclassName,  classes);  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes.superclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  classes.superclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	86	None	replace
518	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.GlobalScope);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.GlobalScope);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.GlobalScope);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  ns	86	None	replace
519	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.name);    	non-compiled	[CE]  cannot  find  symbol  name	54	None	replace
520	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.name);  [CE]  cannot  find  symbol  name  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.name);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.name);    	non-compiled	[CE]  cannot  find  symbol  name	54	None	replace
521	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  classes.name);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.name);    	non-compiled	[CE]  cannot  find  symbol  ns	54	None	replace
522	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  names.name);  [CE]  cannot  find  symbol  names  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  names.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  names.name);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.name);    	non-compiled	[CE]  cannot  find  symbol  names	54	None	replace
523	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.ChangeEvent));  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.ChangeEvent));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.ChangeEvent));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));    	non-compiled	[CE]  package  ns  does  not  exist	32	None	replace
524	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(name));  [CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(name));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(name));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));    	non-compiled	[CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;	32	None	replace
525	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getSingletonGetterClassName(singletonGetterClass));  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getSingletonGetterClassName(singletonGetterClass));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getSingletonGetterClassName(singletonGetterClass));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	32	None	replace
526	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns));  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));    	non-compiled	[CE]  cannot  find  symbol  ns	32	None	replace
527	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)names.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
528	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
529	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
530	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo  ==  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo  ==  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo  ==  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
531	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
532	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(convention.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(convention.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(convention.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
533	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  classes));  [CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  classes));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  classes));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent));    	non-compiled	[CE]  method  getSingletonGetterClassName  in  interface  CodingConvention  cannot  be  applied  to  given  types;	40	None	replace
534	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  classes);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent));    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	40	None	replace
535	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	51	None	replace
536	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  names);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name);    	non-compiled	[CE]  cannot  find  symbol  names	51	None	replace
537	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameNode);  [CE]  cannot  find  symbol  nameNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameNode);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameNode);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.sourceName);    	non-compiled	[CE]  cannot  find  symbol  nameNode	77	None	replace
538	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  names);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    names);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
539	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  conn);  [CE]  cannot  find  symbol  conn  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  conn);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  conn);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes);    	non-compiled	[CE]  cannot  find  symbol  conn	109	None	replace
540	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  names);  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	52	None	replace
541	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  false);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	52	None	replace
542	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.name,  classes.subclassName);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.name,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	52	None	replace
543	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  t.getSimpleName());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  t.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  t.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
544	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.class);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.class);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
545	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionNode);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionNode);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionNode);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	119	None	replace
546	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	119	None	replace
547	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunction);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunction);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunction);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	119	None	replace
548	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionDeclaration);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionDeclaration);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionDeclaration);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	119	None	replace
549	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classes.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classes.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  classes.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	119	None	replace
550	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	112	None	replace
551	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	112	None	replace
552	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.superclassName,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	112	None	replace
553	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassDef);  [CE]  cannot  find  symbol  superclassDef  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes.superclassDef);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  superclassDef	112	None	replace
554	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  true,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
555	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  t);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  t);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  true,  t);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
556	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  conn);  [CE]  cannot  find  symbol  conn  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  conn);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  true,  conn);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  cannot  find  symbol  conn	71	None	replace
557	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.name,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.name,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes.name,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  name	113	None	replace
558	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  t.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	113	None	replace
559	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.superclassName,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	113	None	replace
560	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	113	None	replace
561	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.name,  classes.superclassName);  [CE]  cannot  find  symbol  name  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.name,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.name,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  name	113	None	replace
562	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent,  ns);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  parent,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  parent,  ns);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent);    	non-compiled	[CE]  cannot  find  symbol  ns	72	None	replace
563	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  n);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  n);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  n);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	72	None	replace
564	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	111	None	replace
565	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	111	None	replace
566	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.superclassName,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	111	None	replace
567	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes.superclassName);  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  name	111	None	replace
568	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(ns,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(ns,  ns.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
569	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.superclassName,  true);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    true);    	non-compiled	[CE]  cannot  find  symbol  ns	23	None	replace
570	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  names);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    true);    	non-compiled	[CE]  cannot  find  symbol  names	23	None	replace
571	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  names.subclassName,  classes.superclassName,  true);  [CE]  cannot  find  symbol  names  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  names.subclassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  names.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    true);    	non-compiled	[CE]  cannot  find  symbol  names	23	None	replace
572	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  subClassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	116	None	replace
573	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.superclassName);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
574	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getSubClassName(),  classes.superclassName);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getSubClassName(),  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getSubClassName(),  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
575	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
576	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
577	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  convention.name);  [CE]  cannot  find  symbol  name  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  convention.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  convention.name);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
578	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  convention.subclassName);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  convention.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  convention.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
579	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  t);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  t);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  t);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	7	None	replace
580	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  pred);  [CE]  cannot  find  symbol  pred  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  pred);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes,  pred);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes);    	non-compiled	[CE]  cannot  find  symbol  pred	7	None	replace
581	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  DEFAULT_GLOBAL_NAMES;  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  DEFAULT_GLOBAL_NAMES;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.getNameInformation()  :  DEFAULT_GLOBAL_NAMES;	  NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
582	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.nameInformation();  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.nameInformation();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.nameInformation();	  NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
583	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	15	None	replace
584	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass,  true);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass,  true);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    true);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	15	None	replace
585	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	22	None	replace
586	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	22	None	replace
587	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  conn);  [CE]  cannot  find  symbol  conn  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  conn);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  conn);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  conn	22	None	replace
588	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.superclassName,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	22	None	replace
589	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  convention.subclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  convention.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  convention.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	12	None	replace
590	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.name,  classes.subclassName);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.name,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	12	None	replace
591	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	21	None	replace
592	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	21	None	replace
593	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  singletonGetterClass,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	21	None	replace
594	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  classes);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  classes);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName());    	non-compiled	[CE]  ')'  expected	102	None	replace
595	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName());    	non-compiled	[CE]  ')'  expected	102	None	replace
596	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  names);  [CE]  cannot  find  symbol  names  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent),  names);	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName());    	non-compiled	[CE]  cannot  find  symbol  names	102	None	replace
597	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.subclassName,  classes.name);  [CE]  cannot  find  symbol  ns  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    names.name);    	non-compiled	[CE]  cannot  find  symbol  ns	1	None	replace
598	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.defaultAffectsClassDef);  [CE]  cannot  find  symbol  defaultAffectsClassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.defaultAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.defaultAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  defaultAffectsClassDef	2	None	replace
599	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	41	None	replace
600	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	4	None	replace
601	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  className);  [CE]  cannot  find  symbol  className  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  className);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent.subclassName);    	non-compiled	[CE]  cannot  find  symbol  className	4	None	replace
602	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getClasses(),  classes);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler.getClasses(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler.getClasses(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
603	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  cannot  find  symbol  names	69	None	replace
604	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  methods);  [CE]  cannot  find  symbol  methods  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  methods);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  methods);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  cannot  find  symbol  methods	69	None	replace
605	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.singletonGetterClass);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.singletonGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.singletonGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
606	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  singularGetterClass);  [CE]  cannot  find  symbol  singularGetterClass  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  singularGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  singularGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singularGetterClass	13	None	replace
607	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  singularGetterClass);  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  singularGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  singularGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names);    	non-compiled	[CE]  cannot  find  symbol  names	66	None	replace
608	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  uniqueGetterClass);  [CE]  cannot  find  symbol  names  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  uniqueGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  uniqueGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names);    	non-compiled	[CE]  cannot  find  symbol  names	66	None	replace
609	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.ChangeEvent.class);  [CE]  package  classes  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(classes.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes  does  not  exist	45	None	replace
610	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.ChangeEvent.class);  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns  does  not  exist	45	None	replace
611	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.class);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(classes.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
612	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classNames);  [CE]  cannot  find  symbol  classNames  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  classNames);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  classNames);	  NameInformation    nameInfo    =    new    NameInformation(classes,    names);    	non-compiled	[CE]  cannot  find  symbol  classNames	70	None	replace
613	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	38	None	replace
614	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	38	None	replace
615	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.superclassName);  [CE]  cannot  find  symbol  names  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	19	None	replace
616	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.superclassName);  [CE]  cannot  find  symbol  className  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  className	19	None	replace
617	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	115	None	replace
618	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  values);  [CE]  cannot  find  symbol  values  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  values);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  values);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  values	115	None	replace
619	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  nameInfo.className);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  nameInfo.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  nameInfo.className);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	115	None	replace
620	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	98	None	replace
621	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	98	None	replace
622	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  classes.subclassName,  classes.name);  [CE]  cannot  find  symbol  nameNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  classes.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameNode,  classes.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  nameNode	98	None	replace
623	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	14	None	replace
624	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	14	None	replace
625	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.compiler);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.compiler);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.compiler);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	14	None	replace
626	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.ChangeEvent.NAME);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.ChangeEvent.NAME);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(classes.ChangeEvent.NAME);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	49	None	replace
627	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME  +  1);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME  +  1);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME  +  1);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	49	None	replace
628	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.Name);  [CE]  cannot  find  symbol  Name  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.Name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(classes.Name);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  cannot  find  symbol  Name	49	None	replace
629	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  uniqueGetterClass);  [CE]  cannot  find  symbol  uniqueGetterClass  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  uniqueGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  uniqueGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes);    	non-compiled	[CE]  cannot  find  symbol  uniqueGetterClass	6	None	replace
630	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.name);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
631	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.subClassName);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.getName(),  classes.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
632	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.subclassName;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  classes.subclassName;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  classes.subclassName;	  nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
633	[BUG]  [BUGGY]  nameInfo.name  =  classes.subclassName  +  1;  [CE]  cannot  find  symbol  nameInfo  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  nameInfo.name  =  classes.subclassName  +  1;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	nameInfo.name  =  classes.subclassName  +  1;	  nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	46	None	replace
634	[BUG]  [BUGGY]  nameInfo  =  classes.subclassName;  [CE]  cannot  find  symbol  nameInfo  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  nameInfo  =  classes.subclassName;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	nameInfo  =  classes.subclassName;	  nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	46	None	replace
635	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  t.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
636	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
637	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
638	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes.name);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
639	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName,  classes.nameInfo);  [CE]  cannot  find  symbol  [FE]                                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName,  classes.nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName,  classes.nameInfo);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
640	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  pred);  [CE]  cannot  find  symbol  pred  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  pred);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  pred);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  cannot  find  symbol  pred	9	None	replace
641	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  conn);  [CE]  cannot  find  symbol  conn  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  conn);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  conn);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  cannot  find  symbol  conn	9	None	replace
642	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  compiler);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  compiler);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  compiler);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
643	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns.class);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns.class);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
644	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  ns.PageSelectionModel.getName());  [CE]  cannot  find  symbol  nameNode  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  ns.PageSelectionModel.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameNode,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  cannot  find  symbol  nameNode	97	None	replace
645	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.getName());  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  package  ns  does  not  exist	97	None	replace
646	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.class.getName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.class.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.class.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	97	None	replace
647	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  names.subclassName);  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  names.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.subclassName,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	17	None	replace
648	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  names.subclassName);  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  names.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	17	None	replace
649	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.subclassName);  [CE]  cannot  find  symbol  names  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	17	None	replace
650	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.className);  [CE]  cannot  find  symbol  className  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.className);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName);    	non-compiled	[CE]  cannot  find  symbol  className	26	None	replace
651	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.sourceName);  [CE]  cannot  find  symbol  sourceName  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.sourceName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.sourceName);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName);    	non-compiled	[CE]  cannot  find  symbol  sourceName	26	None	replace
652	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  parent.getName());  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol  ns	35	None	replace
653	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  DEFAULT_GLOBAL_NAMES;  [CE]  cannot  find  symbol  nameInfo  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  DEFAULT_GLOBAL_NAMES;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  DEFAULT_GLOBAL_NAMES;	  NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	85	None	replace
654	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo);  [CE]  cannot  find  symbol  nameInfo  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes!=  null?  classes.nameInfo  :  new  NameInformation(nameInfo);	  NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	85	None	replace
655	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  ns);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  ns);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  ns	8	None	replace
656	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.type);  [CE]  cannot  find  symbol  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.type);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
657	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(classes.getName());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(classes.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(classes.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
658	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.getName());  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
659	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  n.getName());  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  n.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent,  n.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
660	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName()));  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName()));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(parent.getName()));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
661	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  convention.subclassName);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  convention.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  convention.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
662	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  names.subclassName);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  names.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getName(),  classes,  names.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention.getName(),    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
663	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  ns.getSimpleName());  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  ns.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  ns.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(t.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  ns	59	None	replace
664	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(t.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
665	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.getNameInfo()  :  DEFAULT_GLOBAL_NAMES;  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  classes!=  null?  classes.getNameInfo()  :  DEFAULT_GLOBAL_NAMES;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  classes!=  null?  classes.getNameInfo()  :  DEFAULT_GLOBAL_NAMES;	  NameInfo    nameInfo    =    classes.getNameInfo();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
666	[BUG]  [BUGGY]  NameInfo  nameInfo  =  classes.nameInfo();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  classes.nameInfo();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  classes.nameInfo();	  NameInfo    nameInfo    =    classes.getNameInfo();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
667	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  false);  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	36	None	replace
668	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.ignoreAffectsClassDef);  [CE]  cannot  find  symbol  ignoreAffectsClassDef  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.ignoreAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.ignoreAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  ignoreAffectsClassDef	36	None	replace
669	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n.getName());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(n.getName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getName());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
670	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  nameInfo.subclassName);  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  nameInfo.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  nameInfo.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  name	5	None	replace
671	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n.getReferenceName());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(n.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
672	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getReferenceName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
673	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel));  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));    	non-compiled	[CE]  cannot  find  symbol  ns	32	None	replace
674	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.class));  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.class));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.class));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
675	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.superclassName,  false);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.superclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.superclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  cannot  find  symbol  ns	87	None	replace
676	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  false);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  cannot  find  symbol  name	87	None	replace
677	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	87	None	replace
678	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo,  false);  [CE]  cannot  find  symbol  nameInfo  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  cannot  find  symbol  nameInfo	87	None	replace
679	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.subclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	16	None	replace
680	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  ns);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  ns);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	16	None	replace
681	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.node);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.node);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.node);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName);    	non-compiled	[CE]  cannot  find  symbol  node	25	None	replace
682	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.sourceName);  [CE]  cannot  find  symbol  sourceName  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.sourceName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.sourceName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName);    	non-compiled	[CE]  cannot  find  symbol  sourceName	25	None	replace
683	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.type);  [CE]  cannot  find  symbol  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.type);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName);    	non-compiled	[CE]  cannot  find  symbol  type	25	None	replace
684	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.ChangeEvent);  [CE]  cannot  find  symbol  name  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  ns.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  name	53	None	replace
685	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  convention.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  subclassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  convention.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  convention.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	20	None	replace
686	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.superclassName,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	20	None	replace
687	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	20	None	replace
688	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	68	None	replace
689	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	68	None	replace
690	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	68	None	replace
691	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  subclassName  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	18	None	replace
692	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)types.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)types.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)types.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
693	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(Ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
694	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoImpl(classes.nameInfo);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoImpl(classes.nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoImpl(classes.nameInfo);	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
695	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.nameInfo);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes.nameInfo);	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
696	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(classes.nameInfo);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfo(classes.nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfo(classes.nameInfo);	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
697	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  parent);  [CE]  cannot  find  symbol  ns  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns,  parent);	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  cannot  find  symbol  ns	67	None	replace
698	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  parent);  [CE]  cannot  find  symbol  nameNode  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameNode,  parent);	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  cannot  find  symbol  nameNode	67	None	replace
699	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ref.getReferenceName(),  classes);  [CE]  cannot  find  symbol  ref  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ref.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ref.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName(),    classes);    	non-compiled	[CE]  cannot  find  symbol  ref	62	None	replace
700	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  new  NameAnalyzer(classes,  compiler.getNameAnalyzer());  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameAnalyzer  nameInfo  =  new  NameAnalyzer(classes,  compiler.getNameAnalyzer());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  new  NameAnalyzer(classes,  compiler.getNameAnalyzer());	  NameAnalyzer    nameInfo    =    classes.getNameAnalyzer();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
701	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  names);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
702	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  methods);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  methods);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  methods);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
703	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  uniqueGetterClass);  [CE]  cannot  find  symbol  names  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  uniqueGetterClass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  uniqueGetterClass);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
704	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  globalNames);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  globalNames);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  globalNames);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    names);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	86	None	replace
705	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes);  [CE]  cannot  find  symbol  name  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  name	86	None	replace
706	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  prefix);  [CE]  cannot  find  symbol  prefix  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  prefix);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  prefix);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  prefix	86	None	replace
707	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  names);  [CE]  cannot  find  symbol  names  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  names	75	None	replace
708	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.type,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.type,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.type,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	75	None	replace
709	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  true);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	75	None	replace
710	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.type);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  ns	75	None	replace
711	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.type,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	75	None	replace
712	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionNode.DEFAULT_GLOBAL_NAMES);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionNode.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ClassDefiningFunctionNode.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  package  ns  does  not  exist	118	None	replace
713	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent.DEFAULT_GLOBAL_NAMES);  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  package  ns  does  not  exist	118	None	replace
714	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.get(classes.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
715	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(compiler.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
716	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.get(classes.PageSelectionModel.ChangeEvent);  names.put(ns.PageSelectionModel.ChangeEvent,  nameInfo);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    names.put(ns.PageSelectionModel.ChangeEvent,    nameInfo);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
717	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parents);  [CE]  cannot  find  symbol  parents  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parents);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parents);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    conn);    	non-compiled	[CE]  cannot  find  symbol  parents	88	None	replace
718	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  predicate);  [CE]  cannot  find  symbol  predicate  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  predicate);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  predicate);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    conn);    	non-compiled	[CE]  cannot  find  symbol  predicate	88	None	replace
719	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(classes.ChangeEvent);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	47	None	replace
720	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent,  ns.class);  [CE]  package  ns  does  not  exist  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent,  ns.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent,  ns.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	47	None	replace
721	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent);  [CE]  cannot  find  symbol  ChangeEvent  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(compiler.ChangeEvent);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ChangeEvent	47	None	replace
722	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.subclassName);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.subclassName);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
723	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.name);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.name);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
724	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
725	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.subclassName,  classes.nameInfo);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
726	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation());  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation());	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
727	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n.getSimpleName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(n.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(n.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
728	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(parent);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(parent);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
729	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.toArray(new  NameInformation[classes.size()  ]);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.toArray(new  NameInformation[classes.size()  ]);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)classes.toArray(new  NameInformation[classes.size()  ]);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
730	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.class);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  nameInfo.class);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.className,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
731	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.className,  nameInfo.className);  [CE]  cannot  find  symbol  className  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.className,  nameInfo.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.className,  nameInfo.className);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.className,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  className	114	None	replace
732	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes.subclassName);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.className,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
733	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  ns	24	None	replace
734	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parent,  ns);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parent,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  parent,  ns);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  ns	24	None	replace
735	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  convention);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	24	None	replace
736	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.SingletonGetterClass,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	42	None	replace
737	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.getReferenceName());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
738	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getReferenceName());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  t.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
739	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  t.getReferenceName());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  t.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  t.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
740	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	99	None	replace
741	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.compiler);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.compiler);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.compiler);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	99	None	replace
742	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  conn);  [CE]  cannot  find  symbol  conn  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  conn);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  conn);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  conn	99	None	replace
743	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)super.classes.clone();  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)super.classes.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)super.classes.clone();	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
744	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfo.clone();  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfo.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)nameInfo.clone();	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
745	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.getName());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.getName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getName());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
746	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.getName());  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.getName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getName());    	non-compiled	[CE]  cannot  find  symbol  ns	33	None	replace
747	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getName());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  t.getName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getName());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
748	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  t.getModule());  [CE]  cannot  find  symbol  classes  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.classes,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol  classes	110	None	replace
749	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  n.getModule());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  n.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  n.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
750	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allAffects);  [CE]  cannot  find  symbol  allAffects  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allAffects);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.allAffects);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.allNames);    	non-compiled	[CE]  cannot  find  symbol  allAffects	92	None	replace
751	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.getReferenceName());  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getReferenceName());    	non-compiled	[CE]  package  ns  does  not  exist	103	None	replace
752	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.getReferenceName());  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel,  ns.PageSelectionModel.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  ns	103	None	replace
753	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  ns);	  NameInformation    nameInfo    =    new    NameInformation(convention);    	non-compiled	[CE]  cannot  find  symbol  ns	43	None	replace
754	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(consume.getSimpleName(),  classes);  [CE]  cannot  find  symbol  consume  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(consume.getSimpleName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(consume.getSimpleName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getSimpleName(),    classes);    	non-compiled	[CE]  cannot  find  symbol  consume	57	None	replace
755	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.name,  classes.subclassName);  [CE]  cannot  find  symbol  name  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.name,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.name,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	28	None	replace
756	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns.className);  [CE]  cannot  find  symbol  ns  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  ns.className);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	28	None	replace
757	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	28	None	replace
758	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes.subclassName);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	28	None	replace
759	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  compiler,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  compiler,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  compiler,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	28	None	replace
760	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	28	None	replace
761	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	21	None	replace
762	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName,  ns.PageSelectionModel);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName,  ns.PageSelectionModel);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.superclassName,  ns.PageSelectionModel);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	21	None	replace
763	[BUG]  [BUGGY]  NameInfo  nameInfo  =  ns.class.getNameInfo();  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  ns.class.getNameInfo();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  ns.class.getNameInfo();	  NameInfo    nameInfo    =    classes.getNameInfo();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
764	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME,  names);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.NAME,  names);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	49	None	replace
765	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.ChangeEvent.NAME);  [CE]  package  ns  does  not  exist  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.ChangeEvent.NAME);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.ChangeEvent.NAME);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.NAME);    	non-compiled	[CE]  package  ns  does  not  exist	49	None	replace
766	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclass);  [CE]  cannot  find  symbol  superclass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclass);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclass);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.languageVersion);    	non-compiled	[CE]  cannot  find  symbol  superclass	94	None	replace
767	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	12	None	replace
768	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName,  classes.name);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	12	None	replace
769	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName);    	non-compiled	[CE]  package  ns  does  not  exist	12	None	replace
770	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    conn);    	non-compiled	[CE]  cannot  find  symbol  ns	88	None	replace
771	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.name,  classes.subclassName,  classes.superclassName);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.name,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.name,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	112	None	replace
772	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  name  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.subclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(classes.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  name	52	None	replace
773	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  classes.onlyAffectsClassDef);  [CE]  cannot  find  symbol  onlyAffectsClassDef  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  classes.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.onlyAffectsClassDef,  classes.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  onlyAffectsClassDef	36	None	replace
774	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyClassDef);  [CE]  cannot  find  symbol  onlyClassDef  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.onlyClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.onlyClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  onlyClassDef	36	None	replace
775	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.onlyAffectsClassDef);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  ns	36	None	replace
776	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  nameInfo.onlyAffectsClassDef);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  nameInfo.onlyAffectsClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  nameInfo.onlyAffectsClassDef);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.onlyAffectsClassDef);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	41	None	replace
777	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	113	None	replace
778	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getSourceName(),  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getSourceName(),  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  t.getSourceName(),  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	113	None	replace
779	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getSourceName(),  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  t.getSourceName(),  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  t.getSourceName(),  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	113	None	replace
780	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  t,  classes.subclassName,  classes.superclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  t,  classes.subclassName,  classes.superclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  t,  classes.subclassName,  classes.superclassName);	  NameInformation    nameInfo    =    new    NameInformation(t,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	113	None	replace
781	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	14	None	replace
782	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);  [CE]  package  ns  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  package  ns  does  not  exist	14	None	replace
783	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  convention);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	14	None	replace
784	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionDeclaration);  [CE]  cannot  find  symbol  ns  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionDeclaration);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  ns.PageSelectionDeclaration);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	14	None	replace
785	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name,  names);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.name,  names);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	13	None	replace
786	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	99	None	replace
787	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  package  ns  does  not  exist	99	None	replace
788	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  convention);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	99	None	replace
789	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.ClassDefiningFunction);  [CE]  cannot  find  symbol  ns  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.ClassDefiningFunction);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(name,  classes.subclassName,  ns.ClassDefiningFunction);	  NameInformation    nameInfo    =    new    NameInformation(name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	99	None	replace
790	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  convention);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	111	None	replace
791	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	111	None	replace
792	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.subclassName);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.onlyAffectsClassDef,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.name);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	5	None	replace
793	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.name);  [CE]  cannot  find  symbol  className  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  className	5	None	replace
794	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.className);  [CE]  cannot  find  symbol  className  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.className);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.classes);    	non-compiled	[CE]  cannot  find  symbol  className	10	None	replace
795	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.classes);  [CE]  cannot  find  symbol  classes  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.classes);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.classes);    	non-compiled	[CE]  cannot  find  symbol  classes	10	None	replace
796	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getName());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t.getName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getName());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
797	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  subclassName  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.subclassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(convention.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subclassName	18	None	replace
798	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)ns.classes.get(ns.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
799	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Convention.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)classes.get(Convention.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)classes.get(Convention.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
800	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.getSimpleName());  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(classes.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  ns	58	None	replace
801	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.superclassName,  classes.subclassName);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  names.superclassName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  names.superclassName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  names	20	None	replace
802	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.getSimpleName());  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  names	56	None	replace
803	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getSimpleName());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
804	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.getSimpleName());  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  ns.getSimpleName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  ns.getSimpleName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  ns	55	None	replace
805	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfo.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfo.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)nameInfo.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
806	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfo.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfo.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)nameInfo.get(classes.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
807	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfos.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [CE]  cannot  find  symbol  [FE]                                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfos.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)nameInfos.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  return  nameInfo;  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    return    nameInfo;    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
808	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  values);  [CE]  cannot  find  symbol  values  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  values);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  values);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  values	86	None	replace
809	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionDeclaration);  [CE]  cannot  find  symbol  ns  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionDeclaration);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  ns.PageSelectionDeclaration);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  ns	86	None	replace
810	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfo.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)nameInfo.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)nameInfo.get(ns.PageSelectionModel.ChangeEvent);  if(nameInfo!=  null)  {  nameInfo  =  new  NameInformation();  }	  NameInfo    nameInfo    =(NameInfo)classes.get(ns.PageSelectionModel.ChangeEvent);    if(nameInfo!=    null)    {    nameInfo    =    new    NameInformation();    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
811	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.PageSelectionModel.ChangeEvent.class);  [CE]  package  classes.PageSelectionModel  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(classes.PageSelectionModel.ChangeEvent.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(classes.PageSelectionModel.ChangeEvent.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  classes.PageSelectionModel  does  not  exist	45	None	replace
812	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.class,  ns.class);  [CE]  package  ns.PageSelectionModel  does  not  exist  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.class,  ns.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(ns.PageSelectionModel.ChangeEvent.class,  ns.class);	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent.class);    	non-compiled	[CE]  package  ns.PageSelectionModel  does  not  exist	45	None	replace
813	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));  [CE]  package  ns  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.PageSelectionModel.createNameInformation(t,  n));	  NameInformation    nameInfo    =    new    NameInformation(parent);    	non-compiled	[CE]  package  ns  does  not  exist	67	None	replace
814	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  compiler,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  package  ns  does  not  exist	69	None	replace
815	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes,  compiler);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes,  compiler);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes,  compiler);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
816	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler,  ns.PageSelectionModel.INSTANCE);  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  compiler,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  compiler,  ns.PageSelectionModel.INSTANCE);	  NameInformation    nameInfo    =    new    NameInformation(classes,    compiler);    	non-compiled	[CE]  package  ns  does  not  exist	69	None	replace
817	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName,  names);  [CE]  cannot  find  symbol  subClassName  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	116	None	replace
818	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName,  true);  [CE]  cannot  find  symbol  subClassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName,  true);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.superclassName,  true);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  subClassName	116	None	replace
819	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.class.getReferenceName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.class.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.class.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	103	None	replace
820	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.name);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.superclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
821	[BUG]  [BUGGY]  nameInfo.name  =  classes.minName;  [CE]  cannot  find  symbol  nameInfo  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  nameInfo.name  =  classes.minName;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	nameInfo.name  =  classes.minName;	  nameInfo.name    =    classes.subclassName;    	non-compiled	[CE]  cannot  find  symbol  nameInfo	46	None	replace
822	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.PageSelectionModel.getName());  [CE]  package  ns  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.PageSelectionModel.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.PageSelectionModel.getName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getName());    	non-compiled	[CE]  package  ns  does  not  exist	79	None	replace
823	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.class.getName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.class.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.class.getName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
824	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns,  parent);  [CE]  cannot  find  symbol  ns  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    parent);    	non-compiled	[CE]  cannot  find  symbol  ns	72	None	replace
825	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getName());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
826	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	119	None	replace
827	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  package  ns  does  not  exist	119	None	replace
828	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent,  names);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.ChangeEvent,  names);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  ns	119	None	replace
829	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName);  [CE]  cannot  find  symbol  singletonGetterClassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClassName);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.subclassName);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClassName	25	None	replace
830	[BUG]  [BUGGY]  NameInfo  nameInfo  =  _classes.nameInfo;  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  _classes.nameInfo;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  _classes.nameInfo;	  NameInfo    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
831	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  nameInfo.name);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  nameInfo.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  nameInfo.name);	  NameInformation    nameInfo    =    new    NameInformation(compiler,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	9	None	replace
832	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.sourceName,  classes.subclassName);  [CE]  cannot  find  symbol  sourceName  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.sourceName,  classes.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.sourceName,  classes.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.sourceName);    	non-compiled	[CE]  cannot  find  symbol  sourceName	77	None	replace
833	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.allNames);  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.allNames);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  names.allNames);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    names.name);    	non-compiled	[CE]  cannot  find  symbol  names	1	None	replace
834	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  classes.subClassName);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(ns.name,  classes.subClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(ns.name,  classes.subClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  ns	39	None	replace
835	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.ChangeEvent);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.ChangeEvent);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	42	None	replace
836	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  t.getModule());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
837	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  t.getModule());  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  t.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes,  t.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	110	None	replace
838	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  classes.getModule());  [CE]  cannot  find  symbol  nameNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  classes.getModule());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameNode,  classes.getModule());	  NameInformation    nameInfo    =    new    NameInformation(classes,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol  nameNode	110	None	replace
839	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes);  [CE]  cannot  find  symbol  className  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes);    	non-compiled	[CE]  cannot  find  symbol  className	109	None	replace
840	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  classes.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	109	None	replace
841	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getReferenceName(),  classes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getReferenceName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  parent.getReferenceName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getReferenceName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
842	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	115	None	replace
843	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);  [CE]  package  ns  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionModel.INSTANCE);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  package  ns  does  not  exist	115	None	replace
844	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionDeclaration);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionDeclaration);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  ns.PageSelectionDeclaration);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.name,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	115	None	replace
845	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName,  names);  [CE]  cannot  find  symbol  className  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName,  names);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.className,    classes.subclassName);    	non-compiled	[CE]  cannot  find  symbol  className	114	None	replace
846	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.class);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  nameInfo.class);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
847	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.class);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass.class);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
848	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName,  parent);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName,  parent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t,  classes.subclassName,  classes.superclassName,  parent);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    parent);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	24	None	replace
849	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    parent);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	16	None	replace
850	[BUG]  [BUGGY]  NameInformation  nameInfo  =  ns.class.getNameInformation();  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  ns.class.getNameInformation();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  ns.class.getNameInformation();	  NameInformation    nameInfo    =    classes.getNameInformation();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
851	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes.name);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.subclassName,  classes.name);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	98	None	replace
852	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.name,  names);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.name,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  classes.name,  names);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    classes.name);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	98	None	replace
853	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.getName());  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  ns.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	35	None	replace
854	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  parent.getName());  [CE]  cannot  find  symbol  nameNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameNode,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameNode,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    parent.getName());    	non-compiled	[CE]  cannot  find  symbol  nameNode	35	None	replace
855	[BUG]  [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent);  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =(NameInformation)classes.get(ns.PageSelectionModel.ChangeEvent);	  NameInformation    nameInfo    =(NameInformation)classes.clone();    	non-compiled	[CE]  package  ns  does  not  exist	44	None	replace
856	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent.getName());  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(n,  parent.getName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(parent.getName());    	non-compiled	[CE]  ')'  expected	96	None	replace
857	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(classes.subclassName,  classes.name);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
858	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInformation(ns.PageSelectionModel.ChangeEvent);	  NameInfo    nameInfo    =    new    NameInformation();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
859	[BUG]  [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.getName());  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  classes.get(convention.getName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  classes.get(convention.getName());	  NameInformation    nameInfo    =    classes.get(ns.PageSelectionModel.ChangeEvent);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
860	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getReferenceName());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
861	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  t.getReferenceName());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  t.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  t.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(convention.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
862	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  names,  convention);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  names,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  classes.subclassName,  names,  convention);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	89	None	replace
863	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  symbols);  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  symbols);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  classes.subclassName,  symbols);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    classes.subclassName,    names);    	non-compiled	[CE]  cannot  find  symbol  names	89	None	replace
864	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  syntaxConvention);  [CE]  cannot  find  symbol  names  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  syntaxConvention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  syntaxConvention);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names);    	non-compiled	[CE]  cannot  find  symbol  names	66	None	replace
865	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names,  classes);  [CE]  cannot  find  symbol  singletonGetterClass  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(singletonGetterClass,  names,  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names);    	non-compiled	[CE]  cannot  find  symbol  singletonGetterClass	66	None	replace
866	[BUG]  [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName,  classes.name);  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName,  classes.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =  new  NameInfoInformation(classes.subclassName,  classes.name);	  NameInfo    nameInfo    =    new    NameInfoInformation();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
867	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  true,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  true,  convention);	  NameInformation    nameInfo    =    new    NameInformation(classes,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	71	None	replace
868	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  cannot  find  symbol  PageSelectionModel  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  cannot  find  symbol  PageSelectionModel	118	None	replace
869	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [CE]  cannot  find  symbol  name  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.PageSelectionModel.DEFAULT_GLOBAL_NAMES);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.name,  classes.PageSelectionModel.DEFAULT_GLOBAL_NAMES);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  cannot  find  symbol  name	118	None	replace
870	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes.allNamesCopy);  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes.allNamesCopy);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES,  classes.allNamesCopy);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns.PageSelectionModel.DEFAULT_GLOBAL_NAMES);    	non-compiled	[CE]  package  ns  does  not  exist	118	None	replace
871	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  convention.subclassName);  [CE]  cannot  find  symbol  names  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  convention.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  convention.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	17	None	replace
872	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  syntaxConvention.subclassName);  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names,  syntaxConvention.subclassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names,  syntaxConvention.subclassName);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass,    names.subclassName);    	non-compiled	[CE]  cannot  find  symbol  names	17	None	replace
873	[BUG]  [BUGGY]  NameInformation  nameInfo  =  names.name;  [CE]  cannot  find  symbol  names  [FE]                                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  names.name;  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  names.name;	  NameInformation    nameInfo    =    classes.nameInfo;    	non-compiled	[CE]  cannot  find  symbol  names	85	None	replace
874	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.getReferenceName());  [CE]  cannot  find  symbol  names  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(names.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(names.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(ns.getReferenceName());    	non-compiled	[CE]  cannot  find  symbol  names	64	None	replace
875	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.allNames);  [CE]  cannot  find  symbol  subClassName  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.allNames);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subClassName,  classes.allNames);	  NameInformation    nameInfo    =    new    NameInformation(classes.subClassName,    names);    	non-compiled	[CE]  cannot  find  symbol  subClassName	117	None	replace
876	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.superclassName,  true,  convention);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    true);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	23	None	replace
877	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getName(),  classes);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(t.getName(),  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(t.getName(),  classes);	  NameInformation    nameInfo    =    new    NameInformation(singletonGetterClass.getName(),    classes);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
878	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.implementsClassName);  [CE]  cannot  find  symbol  implementsClassName  [FE]            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.implementsClassName);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.implementsClassName);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.allNames);    	non-compiled	[CE]  cannot  find  symbol  implementsClassName	92	None	replace
879	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  convention.getNameAnalyzer();  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameAnalyzer  nameInfo  =  convention.getNameAnalyzer();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  convention.getNameAnalyzer();	  NameAnalyzer    nameInfo    =    classes.getNameAnalyzer();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
880	[BUG]  [BUGGY]  NameAnalyzer  nameInfo  =  clazz.getNameAnalyzer();  [CE]  cannot  find  symbol  clazz  [FE]                                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameAnalyzer  nameInfo  =  clazz.getNameAnalyzer();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameAnalyzer  nameInfo  =  clazz.getNameAnalyzer();	  NameAnalyzer    nameInfo    =    classes.getNameAnalyzer();    	non-compiled	[CE]  cannot  find  symbol  clazz	83	None	replace
881	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.TEST));  [CE]  package  ns  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.TEST));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.TEST));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));    	non-compiled	[CE]  package  ns  does  not  exist	32	None	replace
882	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.TreeElement));  [CE]  package  ns  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.TreeElement));  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention.getSingletonGetterClassName(ns.PageSelectionModel.TreeElement));	  NameInformation    nameInfo    =    new    NameInformation(convention.getSingletonGetterClassName(singletonGetterClass));    	non-compiled	[CE]  package  ns  does  not  exist	32	None	replace
883	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.PageSelectionModel.getReferenceName());  [CE]  package  ns  does  not  exist  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.PageSelectionModel.getReferenceName());  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(compiler,  ns.PageSelectionModel.getReferenceName());	  NameInformation    nameInfo    =    new    NameInformation(compiler.getReferenceName());    	non-compiled	[CE]  package  ns  does  not  exist	65	None	replace
884	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.INSTANCE);  [CE]  package  ns  does  not  exist  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.INSTANCE);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.PageSelectionModel.INSTANCE);	  NameInformation    nameInfo    =    new    NameInformation(classes,    singletonGetterClass);    	non-compiled	[CE]  package  ns  does  not  exist	90	None	replace
885	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.class);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.class);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.class);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
886	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.type);  [CE]  cannot  find  symbol  ns  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.type);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns);    	non-compiled	[CE]  cannot  find  symbol  ns	73	None	replace
887	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.className);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes,  ns.className);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes,  ns.className);	  NameInformation    nameInfo    =    new    NameInformation(classes,    ns);    	non-compiled	[CE]  cannot  find  symbol  ns	73	None	replace
888	[BUG]  [BUGGY]  NameInfo  nameInfo  =(NameInfo)superclasses.clone();  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInfo  nameInfo  =(NameInfo)superclasses.clone();  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInfo  nameInfo  =(NameInfo)superclasses.clone();	  NameInfo    nameInfo    =(NameInfo)classes.clone();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
889	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.oneClassDef);  [CE]  cannot  find  symbol  oneClassDef  [FE]              junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.oneClassDef);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(classes.subclassName,  classes.oneClassDef);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.onlyAffectsClassDef);    	non-compiled	[CE]  cannot  find  symbol  oneClassDef	2	None	replace
890	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.name);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.name);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  nameInfo.name);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
891	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  names);  [CE]  cannot  find  symbol  names  [FE]                  junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  names);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(convention,  classes,  names);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  cannot  find  symbol  names	8	None	replace
892	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  convention,  classes);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  convention,  classes);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  convention,  classes);	  NameInformation    nameInfo    =    new    NameInformation(convention,    classes);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	8	None	replace
893	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.type);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	75	None	replace
894	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName,  classes.type);  [CE]  cannot  find  symbol  className  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.className,  classes.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol  className	75	None	replace
895	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.type);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	75	None	replace
896	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes.subclassName,  classes.type);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes.subclassName,  classes.type);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.class,  classes.subclassName,  classes.type);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.type);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
897	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  convention);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  convention);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  convention);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	22	None	replace
898	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);  [CE]  cannot  find  symbol  ns  [FE]                        junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo,  classes.subclassName,  classes.superclassName,  ns.PageSelectionProvider);	  NameInformation    nameInfo    =    new    NameInformation(nameInfo,    classes.subclassName,    classes.superclassName);    	non-compiled	[CE]  cannot  find  symbol  ns	22	None	replace
899	[BUG]  [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  false);  [CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  Result:  goog.inherits(ns.PageSelectionModel.ChangeEvent      [CONTEXT]      break;  }  }    if  (parent.isCall()  &&  t.inGlobalScope())  {  CodingConvention  convention  =  compiler.getCodingConvention();  SubclassRelationship  classes  =  convention.getClassesDefinedByCall(parent);  if  (classes  !=  null)  {      [BUGGY]  NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  false);  [BUGGY]      nameInfo.name  =  classes.subclassName;  nameInfo.onlyAffectsClassDef  =  true;  nameInfo.superclass  =  classes.superclassName;  return  nameInfo;  }  String  singletonGetterClass  =  convention.getSingletonGetterClassName(parent);  if  (singletonGetterClass  !=  null)  {  NameInformation  nameInfo  =  new  NameInformation();  [CLASS]  NameAnalyzer  AliasSet  RefType  ReferencePropagationCallback  NameInformation  JsName  JsNameRefNode  PrototypeSetNode  SpecialReferenceNode  ClassDefiningFunctionNode  InstanceOfCheckNode  ProcessExternals  FindDependencyScopes  HoistVariableAndFunctionDeclarations  FindDeclarationsAndSetters  1  FindReferences  NodeAccumulator  RemoveListener  TriState  [METHOD]  createNameInformation  [RETURN_TYPE]  NameAnalyzer$NameInformation  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  NameInformation  nameInfo  Set  DEFAULT_GLOBAL_NAMES  allNamesCopy  externalNames  globalNames  names  nodesToKeep  NodeTraversal  t  Node  ancestor  callNode  child  condition  containingNode  decl  elseBranch  externs  gramps  hook  input  iter  n  nameNode  node  objLit  objLitParent  original  parent  pred  prop  rhs  root  rootNameNode  step  thenBranch  value  SubclassRelationship  classes  String  FUNCTION  PROTOTYPE_SUBSTRING  WINDOW  alias  className  curName  fromName  name  name1  name2  nodeName  parentName  prototypeClass  prototypeProperty  referringName  singletonGetterClass  superclass  text  toName  int  PROTOTYPE_SUBSTRING_LEN  PROTOTYPE_SUFFIX_LEN  Predicate  NON_LOCAL_RESULT_PREDICATE  RefType  INHERITANCE  REGULAR  callSite  depType  AbstractCompiler  compiler  boolean  bNameWasShortened  canCreate  elseHasSideEffects  externallyDefined  hasInstanceOfReference  hasWrittenDescendants  isExternallyReferenceable  isPrototype  onlyAffectsClassDef  referenced  removeUnreferenced  thenHasSideEffects  JsName  checkedClass  curJsName  from  jsName  jsn  name  nameInfo  node  parent  parentJsName  rhs  to  CodingConvention  convention  List  prototypeNames  refNodes  referencedBy  refersTo  DiGraph  referenceGraph  TriState  BOTH  FALSE  TRUE  Map  aliases  allNames  scopes  AstChangeProxy  changeProxy  	projects/Closure40/src/com/google/javascript/jscomp/NameAnalyzer.java	0.3333333333333333	1368	1368	2	replace	NameInformation  nameInfo  =  new  NameInformation(nameInfo.name,  classes.subclassName,  classes.superclassName,  false);	  NameInformation    nameInfo    =    new    NameInformation(classes.subclassName,    classes.superclassName,    false);    	non-compiled	[CE]  constructor  NameInformation  in  class  NameInformation  cannot  be  applied  to  given  types;	87	None	replace
