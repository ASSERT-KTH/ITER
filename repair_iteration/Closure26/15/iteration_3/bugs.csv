bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")&&  currentFilename.startsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java ")&&  currentFilename.startsWith( ".java "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".java ")&&  currentFilename.startsWith( ".java "))  {	  if(requiredFilename.startsWith(   ".       "    +    File.separator)&&    currentFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
9	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
10	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
11	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
12	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
13	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
14	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
15	[BUG]  [BUGGY]  pendingFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  pendingFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	pendingFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
16	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {	  if(currentFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
17	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {	  if(currentFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
18	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".jpg ")||  currentFilename.startsWith( ".jpg "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".jpg ")||  currentFilename.startsWith( ".jpg "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".jpg ")||  currentFilename.startsWith( ".jpg "))  {	  if(currentFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
19	[BUG]  [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( "..   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
20	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
21	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
22	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
23	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
24	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  requiredFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
26	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")&&  currentFilename.startsWith( "..   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")&&  currentFilename.startsWith( "..   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")&&  currentFilename.startsWith( "..   "  +  File.separator))  {	  if(currentFilename.startsWith(   "..   ")&&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
27	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( "..   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( "..   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( "..   "  +  File.separator))  {	  if(currentFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
28	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    requiredFilename.length();    ++i)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    requiredFilename.length();    ++i)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    requiredFilename.length();    ++i)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    requiredFilename.length();    ++i)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.length();  ++i)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    requiredFilename.length();    ++i)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
33	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  ++i)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  ++i)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  ++i)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    requiredFilename.length();    ++i)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
35	[BUG]  [BUGGY]  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
36	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
37	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
38	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
39	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
40	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
41	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( "... ".equals(filename)))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( "... ".equals(filename)))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( "... ".equals(filename)))  {	  if(requiredFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
42	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( "...   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( "...   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( "...   "  +  File.separator))  {	  if(requiredFilename.startsWith(   "..   ")||    currentFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
43	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( "... ".equals(filename)))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( "... ".equals(filename)))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( "... ".equals(filename)))  {	  if(requiredFilename.startsWith(   "..   ")||    currentFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
44	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")&&  currentFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")&&  currentFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")&&  currentFilename.startsWith( ".. "))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)&&    requiredFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
45	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {	  if(currentFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
46	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {	  if(currentFilename.startsWith(   "..   ")||    currentFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
47	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  if(module  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
50	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  if(module!=  null)  {  int  scriptNodeCount  =  module.getModuleCount();  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  int  scriptNodeCount  =  module.getModuleCount();  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  int  scriptNodeCount  =  module.getModuleCount();  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
52	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
53	[BUG]  [BUGGY]  int  scriptNodeCount  =  requiredFilename.lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  requiredFilename.lastIndexOf('.');  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  requiredFilename.lastIndexOf('.');	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
54	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  -1);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  -1);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  -1);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
55	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  0);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  0);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  0);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
56	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  module);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  module);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  module);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
57	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  filename.length());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  filename.length());  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  filename.length());	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
58	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
59	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
60	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. ".  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. ".  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. ".  +  File.separator))  {	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {	  if(currentFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
62	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
63	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
64	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
69	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
70	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
71	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {	  if(currentFilename.startsWith(   ".   ")&&    requiredFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
72	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")&&  currentFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")&&  currentFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ". ")&&  currentFilename.startsWith( ".. "))  {	  if(currentFilename.startsWith(   ".   ")&&    requiredFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
73	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "  +  File.separator))  {	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
74	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "... ".equals(filename)))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "... ".equals(filename)))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "... ".equals(filename)))  {	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
75	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "))  {	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...   "))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
76	[BUG]  [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "...   "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "...   "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "...   "))  {	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...   "))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
77	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( "...   "))  {	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...   "))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
78	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( "...   "))  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( "...   "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( "...   "))  {	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...   "))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
79	[BUG]  [BUGGY]  int  scriptNodeCount  =  requiredFilename.length();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  requiredFilename.length();  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  requiredFilename.length();	  int    scriptNodeCount    =    currentFilename.length();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
80	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.length()  -  1;  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.length()  -  1;	  int    scriptNodeCount    =    currentFilename.length();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
81	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.length()  +  1;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.length()  +  1;  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.length()  +  1;	  int    scriptNodeCount    =    currentFilename.length();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
82	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.length()  -  2;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.length()  -  2;  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.length()  -  2;	  int    scriptNodeCount    =    currentFilename.length();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
83	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
84	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
85	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
86	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {	  if(requiredFilename.startsWith(   ".       "    +    File.separator)&&    requiredFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
87	[BUG]  [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".../.. "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".../.. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".../.. "))  {	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   ".../..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
88	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".../.. "))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".../.. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".../.. "))  {	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   ".../..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
89	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)&&  requiredFilename.startsWith( ".../.. "))  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)&&  requiredFilename.startsWith( ".../.. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( "..   "  +  File.separator)&&  requiredFilename.startsWith( ".../.. "))  {	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   ".../..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
90	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".../.. "))  {  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".../.. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".../.. "))  {	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   ".../..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
91	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
92	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
94	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
95	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  currentFilename.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  currentFilename.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  currentFilename.getModuleCount();  i++)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
96	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
97	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
98	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
99	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
101	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
102	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
103	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
104	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
105	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
106	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
107	[BUG]  [BUGGY]  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
108	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
109	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. ".  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. ".  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. ".  +  File.separator))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "..   ".    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
110	[BUG]  [BUGGY]  if  (requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "... ".  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if  (requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "... ".  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if  (requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "... ".  +  File.separator))  {	  if    (requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
111	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)&&  requiredFilename.startsWith( ". "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)&&  requiredFilename.startsWith( ". "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)&&  requiredFilename.startsWith( ". "))  {	  if(requiredFilename.startsWith(   ".       "    +    File.separator)&&    currentFilename.startsWith(   ".   "))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
112	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".... "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".... "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".... "  +  File.separator))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
113	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)&&  currentFilename.startsWith( "...   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)&&  currentFilename.startsWith( "...   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( "..   "  +  File.separator)&&  currentFilename.startsWith( "...   "  +  File.separator))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
114	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
115	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
116	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
117	[BUG]  [BUGGY]  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
118	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
119	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
120	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
122	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
123	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
124	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i));  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
125	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
126	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  currentFilename);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
128	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  current  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  current  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  current	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
129	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
130	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
131	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
132	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")&&  requiredFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java ")&&  requiredFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".java ")&&  requiredFilename.startsWith( ".. "))  {	  if(requiredFilename.startsWith(   ".       "    +    File.separator)&&    currentFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
133	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( "...   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( "...   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( "...   "  +  File.separator))  {	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
134	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")&&  requiredFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js ")&&  requiredFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".js ")&&  requiredFilename.startsWith( ".js "))  {	  if(requiredFilename.startsWith(   ".       "    +    File.separator)&&    currentFilename.startsWith(   ".   "))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
135	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
136	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String(i),	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
137	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
139	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
140	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
141	[BUG]  [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)&&  requiredFilename.startsWith( "...   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)&&  requiredFilename.startsWith( "...   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( "..   "  +  File.separator)&&  requiredFilename.startsWith( "...   "  +  File.separator))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
142	[BUG]  [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "...n "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "...n "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "...n "  +  File.separator))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
143	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_PREFIX);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_PREFIX);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_PREFIX);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
144	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_SEPARATOR);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_SEPARATOR);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
145	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.'  +  File.separator);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.'  +  File.separator);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.'  +  File.separator);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
146	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  if(!currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
147	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
148	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  if(!currentFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
149	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
150	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.endsWith( ".java "))  {	  if(currentFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
151	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ". "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ". "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ". "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
152	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
153	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
154	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  expectedFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  expectedFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  expectedFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
156	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
157	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( "...   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( "...   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( "...   "  +  File.separator))  {	  if(requiredFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
158	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
159	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
160	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".../.. "))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".../.. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".../.. "))  {	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   ".../..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
161	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.length()  +  2;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.length()  +  2;  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.length()  +  2;	  int    scriptNodeCount    =    currentFilename.length();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
162	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  else  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
163	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
164	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    requiredFilename.length();    ++i)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
165	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
166	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
167	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  expectedFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  expectedFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  expectedFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
169	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  module.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
171	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {	  if(currentFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
172	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".../.. "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".../.. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".../.. "))  {	  if(requiredFilename.startsWith(   "..   ")||    currentFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
173	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
174	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  actualFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  actualFilename.length();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  actualFilename.length();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
175	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)  ==  '/')  {  return  toModuleName(new  String(i));  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)  ==  '/')  {  return  toModuleName(new  String(i));  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)  ==  '/')  {  return  toModuleName(new  String(i));  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
176	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i)  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i)  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.charAt(i)!=  '/')  {  return  toModuleName(new  String(i)	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.charAt(i)!=    '/')    {    return    toModuleName(new    String(i));    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
177	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  '/');  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  '/');  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  '/');	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
178	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  '-');  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  '-');  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  '-');	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
179	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  1);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  1);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  1);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
180	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  2);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  2);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  2);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
181	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
182	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename.append(module[i]);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename.append(module[i]);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename.append(module[i]);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename.append(module[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
183	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
184	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
185	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js "))  {	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
186	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {	  if(currentFilename.startsWith(   ".java   ")&&    requiredFilename.startsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
187	[BUG]  [BUGGY]  if(currentFilename.startsWith( "java   ")||  requiredFilename.startsWith( "java   "))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( "java   ")||  requiredFilename.startsWith( "java   "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( "java   ")||  requiredFilename.startsWith( "java   "))  {	  if(currentFilename.startsWith(   ".java   ")&&    requiredFilename.startsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
188	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. ")&&  requiredFilename.startsWith( ".. "))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. ")&&  requiredFilename.startsWith( ".. "))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. ")&&  requiredFilename.startsWith( ".. "))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)&&    requiredFilename.startsWith(   "..   "))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
189	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
190	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
191	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
192	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  if(!currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
193	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
194	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length();  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length();  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length();  }  else  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
195	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
196	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename  ==  null)  {  if(!currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(!currentFilename.endsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
197	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
198	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename  ==  null)  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(module);  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(module);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
200	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
201	[BUG]  [BUGGY]  if(currentFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    else    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
202	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
203	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.startsWith( ".js "))  {  for(int  i  =  0;  i  <  currentFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
204	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename.endsWith( ".js "))  {  for(int  i  =  0;  i  <  requiredFilename.length();  ++i)  {  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(new  String	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.length();    ++i)    {    if(requiredFilename.endsWith(   ".js   "))    {    return    toModuleName(new    String(i),    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
205	[BUG]  [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "...   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "...   "  +  File.separator))  {  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "...   "  +  File.separator))  {	  if(currentFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "...       "    +    File.separator))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
206	[BUG]  [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(module!=  null)  {  for(int  i  =  0;  i  <  modules.getModuleCount();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
207	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  modules.size();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
208	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  i++)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  i++)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  module.getModuleName();  i++)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    module.getModuleCount();    i++)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
209	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getName();  ++i)  {  currentFilename  =  module.getModuleName();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getName();  ++i)  {  currentFilename  =  module.getModuleName();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(requiredFilename!=  null)  {  for(int  i  =  0;  i  <  module.getName();  ++i)  {  currentFilename  =  module.getModuleName();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    requiredFilename.length();    ++i)    {    currentFilename    =    module.getModuleName();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
210	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  actualFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  actualFilename.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  actualFilename.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
211	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  module.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  module.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	102	103	5	replace	if(currentFilename!=  null)  {  for(int  i  =  0;  i  <  module.size();  ++i)  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(int    i    =    0;    i    <    currentFilename.size();    ++i)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
