bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
3	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
4	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
5	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
6	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
7	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
8	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
9	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
10	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
11	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
12	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
13	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
14	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
15	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
16	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
17	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
18	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
19	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
20	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
27	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    currentFilename.startsWith(   ".separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
28	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    currentFilename.startsWith(   ".separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
29	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  ||    currentFilename.startsWith(   ".separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
30	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
31	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
32	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
33	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
34	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
35	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
36	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
37	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
38	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
39	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
40	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
41	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
42	[BUG]  [BUGGY]  Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
43	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
44	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
45	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
46	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
47	[BUG]  [BUGGY]  if(module$test  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module$test  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module$test  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
48	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
49	[BUG]  [BUGGY]  if(module$test  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module$test  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module$test  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
50	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
51	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
52	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
53	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
54	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
55	[BUG]  [BUGGY]  AssertionFailedError  e  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  AssertionFailedError  e  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	AssertionFailedError  e  =  currentFilename.resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
56	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
57	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
58	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java ")).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java ")).toString();	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   ")).toString();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
59	[BUG]  [BUGGY]  Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   ")).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   ")).toString();	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   ")).toString();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
60	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
61	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
62	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
63	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
64	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
65	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
66	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
67	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
68	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange()	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
69	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
70	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  module$test)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
71	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  requiredFilename)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
72	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test),  module$test).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test),  module$test).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test),  module$test).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
73	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
78	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
79	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
80	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
81	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
82	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
83	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
84	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
85	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  module$test)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
86	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(Module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(Module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(Module$test)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
88	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
89	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
90	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
91	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
92	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
93	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
94	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
95	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
96	[BUG]  [BUGGY]  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	(new  URI(currentFilename)).resolve(new  URI(module$test)).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
97	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
98	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
99	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
100	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
101	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
102	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
103	[BUG]  [BUGGY]  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	(new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
104	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(System.getProperty( "user.home "))).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(System.getProperty( "user.home "))).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(System.getProperty( "user.home "))).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
105	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(System.getProperty( "user.dir "))).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(System.getProperty( "user.dir "))).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(System.getProperty( "user.dir "))).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
106	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
107	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
108	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
109	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
110	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
111	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
112	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
113	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
114	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
115	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange()	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
116	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
117	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
118	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
119	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
120	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
121	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
122	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
123	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
124	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
125	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
126	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
127	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
128	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
129	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
130	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
131	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
132	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
133	[BUG]  [BUGGY]  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
134	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
135	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
136	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
137	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
138	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
139	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
140	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
141	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
142	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
143	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
144	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
145	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
146	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
147	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
148	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
149	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
150	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
151	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
152	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
153	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
154	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(requiredFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
155	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(requiredFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
156	[BUG]  [BUGGY]  String  currentFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  String  currentFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	String  currentFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(requiredFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
157	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
158	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
159	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
160	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
161	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
162	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
163	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
164	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
165	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
166	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
167	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
168	[BUG]  [BUGGY]  if(module$test!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module$test!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module$test!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
169	[BUG]  [BUGGY]  if(module$test  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module$test  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module$test  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
170	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.endsWith(   ".js   ")||    currentFilename.endsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
171	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.endsWith(   ".js   ")||    currentFilename.endsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
172	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.endsWith(   ".js   ")||    currentFilename.endsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
173	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  ||    currentFilename.startsWith(   ".separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
174	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  ||    currentFilename.startsWith(   ".separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
175	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
176	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
177	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
178	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
179	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
180	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
181	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
182	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
183	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ". ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ". ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ". ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
184	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/ ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/ ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/ ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
185	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
186	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "../ "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
187	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
188	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
189	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
190	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
191	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
192	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
193	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
194	[BUG]  [BUGGY]  requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
195	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
196	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
197	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
198	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
199	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()	  Context.checkState(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString()    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
200	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
201	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
202	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
203	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
204	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
205	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
206	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange()    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
207	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange()    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
208	[BUG]  [BUGGY]  if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange()    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
209	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange()    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
210	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
211	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
212	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
213	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange()	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
214	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
215	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()	  if(requiredFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
216	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
217	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
218	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
219	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
220	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
221	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "java   "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
222	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
223	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
224	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
225	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
226	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
227	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   ".js$   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
228	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".js$   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
229	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".js$   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
230	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".js$   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
231	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCode  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCode  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCode	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
232	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
233	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
234	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
235	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
236	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
237	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
238	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
239	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/.* ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/.* ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/.* ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
240	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
241	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
242	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
243	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
244	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
245	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "java   "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
246	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
247	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
248	[BUG]  [BUGGY]  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
249	[BUG]  [BUGGY]  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
250	[BUG]  [BUGGY]  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
251	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
252	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
253	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
254	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
255	[BUG]  [BUGGY]  &&  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  &&  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	&&  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
256	[BUG]  [BUGGY]  ||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
257	[BUG]  [BUGGY]  ||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
258	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
259	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename.substring(1)).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename.substring(1)).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename.substring(1)).resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
260	[BUG]  [BUGGY]  requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
261	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  if(currentFilename.startsWith(   ".   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
262	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
263	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
264	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
265	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()	  Context.checkState(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString()    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
266	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()	  Context.checkState(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString()    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
267	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()	  Context.checkState(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString()    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
268	[BUG]  [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	AssertionFailedError  e  =  new  AssertionFailedError(requiredFilename).resolve(new  URI(currentFilename)).toString();	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(requiredFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
269	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename),  module$test).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename),  module$test).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename),  module$test).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(requiredFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
270	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
271	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  requiredFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  requiredFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  requiredFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
272	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
273	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
274	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
275	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
276	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
277	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
278	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
279	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
280	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
281	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
282	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
283	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
284	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
285	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
286	[BUG]  [BUGGY]  ||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
287	[BUG]  [BUGGY]  ||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
288	[BUG]  [BUGGY]  &&  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  &&  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	&&  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
289	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
290	[BUG]  [BUGGY]  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
291	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "file ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
292	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
293	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
294	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.report  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.report  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.report	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
295	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
296	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
297	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
298	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
299	[BUG]  [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
300	[BUG]  [BUGGY]  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
301	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
302	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
303	[BUG]  [BUGGY]  pendingFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  pendingFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	pendingFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
304	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
305	[BUG]  [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
306	[BUG]  [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
307	[BUG]  [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(requiredFilename,  currentFilename).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(requiredFilename,  currentFilename).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	AssertionFailedError  e  =  new  AssertionFailedError(requiredFilename,  currentFilename).resolve(new  URI(module$test)).toString();	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
308	[BUG]  [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
309	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
310	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
311	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
312	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(String.valueOf( "/.* ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(String.valueOf( "/.* ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(String.valueOf( "/.* ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
313	[BUG]  [BUGGY]  if(module$test!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module$test!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module$test!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
314	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
315	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
316	[BUG]  [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
317	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(filename)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(filename)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(filename)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
318	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
319	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/.* ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/.* ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/.* ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
320	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/ ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/ ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/ ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
321	[BUG]  [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()	  Context.checkState(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString()    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
322	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
323	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
324	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
325	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
326	[BUG]  [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()	  Context.checkState(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString()    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
327	[BUG]  [BUGGY]  Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
328	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
329	[BUG]  [BUGGY]  requiredFilename  =(new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =(new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =(new  URI(currentFilename)).resolve(new  URI(module$test)).toString();	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
330	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
331	[BUG]  [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
332	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
333	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
334	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
335	[BUG]  [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
336	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
337	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
338	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(requiredFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
339	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename  +  File.separator)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename  +  File.separator)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename  +  File.separator)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(requiredFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
340	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  &&  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	&&  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)&&    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
341	[BUG]  [BUGGY]  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
342	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
343	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString()	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
344	[BUG]  [BUGGY]  requiredFilename  =(new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =(new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =(new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
345	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
346	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
347	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.endsWith(   ".js   ")||    currentFilename.endsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
348	[BUG]  [BUGGY]  requiredFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.endsWith(   ".js   ")||    currentFilename.endsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
349	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.endsWith( ".java ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.endsWith( ".java ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.endsWith(   ".js   ")||    currentFilename.endsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
350	[BUG]  [BUGGY]  if(module!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
351	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$ ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$ ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$ ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
352	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
353	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
354	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$ ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$ ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$ ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
355	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
356	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
357	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
358	[BUG]  [BUGGY]  requiredFilename  =(new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =(new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =(new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
359	[BUG]  [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
360	[BUG]  [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
361	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".jpg "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".jpg "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".jpg "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
362	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
363	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
364	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename.startsWith(   ".js$   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
365	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   ".js$   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
366	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(filename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(filename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(filename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
367	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(String.valueOf( "/.* ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(String.valueOf( "/.* ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(String.valueOf( "/.* ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
368	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
369	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
370	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
371	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
372	[BUG]  [BUGGY]  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
373	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI( "filename ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
374	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
375	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.class)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.class)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.class)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
376	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
377	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI( "filename ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
378	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
379	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
380	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
381	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
382	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
383	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(currentFilename)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
384	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(requiredFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
385	[BUG]  [BUGGY]  if(module!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
386	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".separator "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    currentFilename.startsWith(   ".separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
387	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
388	[BUG]  [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
389	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
390	[BUG]  [BUGGY]  RequiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  RequiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	RequiredFilename  =  new  URI(currentFilename).toString();	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
391	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  else  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  else  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  else  {  return  toModuleName(requiredFilename);  }	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
392	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
393	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
394	[BUG]  [BUGGY]  String  currentFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  String  currentFilename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	String  currentFilename  =  new  URI(currentFilename).toString();	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
395	[BUG]  [BUGGY]  filename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  filename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	filename  =  new  URI(currentFilename).toString();	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
396	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
397	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
398	[BUG]  [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
399	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
400	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   ".   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
401	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
402	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
403	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
404	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
405	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
406	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
407	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
408	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename,    currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
409	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
410	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
411	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
412	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.toString())).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.toString())).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.toString())).toString();  }	  requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
413	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(REQUIREDFILEname)).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(REQUIREDFILEname)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(REQUIREDFILEname)).toString();  }	  requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
414	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.SEPARATOR)).toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.SEPARATOR)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.SEPARATOR)).toString();  }	  requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
415	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
416	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
417	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
418	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "$$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "$$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "$$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   ".js$   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
419	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename.startsWith(   ".   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
420	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename.startsWith(   ".   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
421	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
422	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
423	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(Module.NAME_SEPARATOR)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(Module.NAME_SEPARATOR)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(Module.NAME_SEPARATOR)).toString();	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
424	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
425	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
426	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".jpg "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".jpg "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".jpg "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
427	[BUG]  [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
428	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
429	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
430	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
431	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
432	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
433	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "java/lang/Object "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "java/lang/Object "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "java/lang/Object "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
434	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.DEFAULT_FILENAME_PREFIX)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.DEFAULT_FILENAME_PREFIX)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(RequiredFilename.DEFAULT_FILENAME_PREFIX)).toString();	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
435	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
436	[BUG]  [BUGGY]  allowSupported(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  allowSupported(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	allowSupported(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
437	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
438	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
439	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
440	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
441	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
442	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")&&  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ".java ")&&  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")&&  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)&&    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
443	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
444	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.endsWith(   ".js   ")||    currentFilename.endsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
445	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
446	[BUG]  [BUGGY]  if(currentFilename  ==  null  ||  requiredFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null  ||  requiredFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null  ||  requiredFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
447	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
448	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
449	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
450	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
451	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
452	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
453	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  File( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  File( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  File( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
454	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  File( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  File( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  File( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
455	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }	  ||    currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
456	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
457	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
458	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
459	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
460	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
461	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
462	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "/module/ ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
463	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
464	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
465	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange()    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
466	[BUG]  [BUGGY]  if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange()    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
467	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
468	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
469	[BUG]  [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
470	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  ||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
471	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test  +  File.separator)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
472	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(requiredFilename).resolve(new    URI(currentFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
473	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
474	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
475	[BUG]  [BUGGY]  if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
476	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange	  if(currentFilename!=    null)    {    if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
477	[BUG]  [BUGGY]  if(module$test!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module$test!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module$test!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
478	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test,  currentFilename)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
479	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test),  module$test).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test),  module$test).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test),  module$test).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(module$test)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
480	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
481	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "filename   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
482	[BUG]  [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
483	[BUG]  [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  Context.checkState(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  Context.checkState(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
484	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  ||    requiredFilename.startsWith(   "..   "))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
485	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI( ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI( ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI( ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
486	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  requiredFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "/.. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
487	[BUG]  [BUGGY]  if(currentFilename  ==  null  ||  requiredFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null  ||  requiredFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null  ||  requiredFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
488	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
489	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
490	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
491	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
492	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "java/lang/Object "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "java/lang/Object "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "java/lang/Object "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
493	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "java   "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  ||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
494	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
495	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename.startsWith( "module$test "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
496	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
497	[BUG]  [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
498	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
499	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
500	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
501	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test   ").toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test   ").toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test   ").toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
502	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
503	[BUG]  [BUGGY]  if(module$test!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(module$test!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(module$test!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(module$test)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
504	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test   ").toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test   ").toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test   ").toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(   "module$test   ")).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
