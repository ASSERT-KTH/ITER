bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
17	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
33	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
34	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
36	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
37	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
38	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename,  currentFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
44	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
45	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. ")).toString();  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. ")).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. ")).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
46	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
49	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
53	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
54	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange()	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
60	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString()	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
61	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
62	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
63	[BUG]  [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
64	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
69	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
70	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  requiredFilename  =  new  URI(requiredFilename).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  requiredFilename  =  new  URI(requiredFilename).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  new  URI(requiredFilename).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
75	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
76	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
77	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString()	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
79	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
80	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
83	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(requiredFilename).resolve(new  URI(currentFilename)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
86	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
87	[BUG]  [BUGGY]  requiredFilename  =  new  URI(currentFilename).toString();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  requiredFilename  =  new  URI(currentFilename).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	requiredFilename  =  new  URI(currentFilename).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
88	[BUG]  [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	Context.checkState(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
89	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
90	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
91	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
92	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
93	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(module$test)).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
94	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
95	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
96	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
97	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( " ")).toString();  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
98	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
99	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
100	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
101	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
102	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
103	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)&&  currentFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(currentFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
104	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(requiredFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
105	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ". "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename)).toString();	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(module$test)).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
108	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename    ==    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
109	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI( "module$test ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    (new    URI(currentFilename)).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
110	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
111	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI(requiredFilename)).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator))    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
112	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
113	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
114	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
115	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
116	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
117	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
118	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	||  currentFilename.startsWith( ".separator))  {  requiredFilename  =  new  URI(requiredFilename).toString();  }	  if(requiredFilename.startsWith(   ".   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    new    URI(requiredFilename).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
119	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "filename ")).toString();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
120	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( "module$test ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
121	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }  [BUGGY]    .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	105	106	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  new  URI(currentFilename).resolve(new  URI( ")).toString();  }	  if(currentFilename!=    null)    {    requiredFilename    =    new    URI(currentFilename).resolve(new    URI(requiredFilename)).toString();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
