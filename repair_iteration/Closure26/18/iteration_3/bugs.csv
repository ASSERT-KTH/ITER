bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
3	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
4	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
5	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
6	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
7	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
8	[BUG]  [BUGGY]  var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=1	  ||    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
9	[BUG]  [BUGGY]  var  a$$module$test=1  [Delete]  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=1  [Delete]  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=1  [Delete]  illegal  start  of  expression	  ||    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
10	[BUG]  [BUGGY]  var  a$$module$test=1!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=1!=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=1!=  illegal  start  of  expression	  ||    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
11	[BUG]  [BUGGY]  var  a$$module$test=1  >>  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=1  >>  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=1  >>  illegal  start  of  expression	  ||    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
12	[BUG]  [BUGGY]  var  a$$module$test=1  ==  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=1  ==  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=1  ==  illegal  start  of  expression	  ||    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
13	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   ")||    requiredFilename.endsWith(   ".js$   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
14	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   ")||    requiredFilename.endsWith(   ".js$   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
15	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   ")||    requiredFilename.endsWith(   ".js$   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
16	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
17	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
18	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
19	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
20	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
21	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
22	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   ".   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
23	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
24	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
25	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  requiredFilename.printStackTrace();  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
26	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
27	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.toString();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.toString();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.toString();  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
28	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
29	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
30	[BUG]  [BUGGY]  filename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  filename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	filename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
31	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_PREFIX));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_PREFIX));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_PREFIX));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
32	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
33	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
34	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
35	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  a$$module$test));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  a$$module$test));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  a$$module$test));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
36	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  a$$module$test));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  a$$module$test));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  a$$module$test));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
37	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
38	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
39	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
40	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
41	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
42	[BUG]  [BUGGY]  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	;var  a$$module$test=1	  var    module$test=    ==    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
43	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
44	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
45	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
46	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
47	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
48	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
49	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
50	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
51	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
52	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".java   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
53	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".java   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
54	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".java   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
55	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
56	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
57	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
58	[BUG]  [BUGGY]  var  module$test=!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=!=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=!=  illegal  start  of  expression	  var    module$test=    >>    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
59	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
60	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  var  a$$module$test=0  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=0  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=0	  var    module$test=    ==    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
65	[BUG]  [BUGGY]  var  a$$module$test=2  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=2  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=2	  var    module$test=    ==    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
66	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  ||    currentFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
67	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
68	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  EXPORTS,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  EXPORTS,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  EXPORTS,  requiredFilename));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
69	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  a$$module$test));  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  a$$module$test));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  a$$module$test));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
70	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_PREFIX));  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_PREFIX));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_PREFIX));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
71	[BUG]  [BUGGY]  JSError.make(compiler,  sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(compiler,  sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(compiler,  sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
72	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  a$$module$test));  [CE]  illegal  start  of  expression  [FE]                                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  a$$module$test));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  a$$module$test));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
73	[BUG]  [BUGGY]  var  module$test=  <  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  <  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  <  illegal  start  of  expression	  var    module$test=    >=    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
74	[BUG]  [BUGGY]  CurrentFilename  =  requiredFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  requiredFilename.substring(0,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  requiredFilename.substring(0,  currentFilename.length());	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
75	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length());	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
76	[BUG]  [BUGGY]  Filename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Filename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Filename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
77	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  requiredFilename.length());	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
78	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(1,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  currentFilename.substring(1,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(1,  currentFilename.length());	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
79	[BUG]  [BUGGY]  CurrentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
80	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
81	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.startsWith(   ".js$   ")||    requiredFilename.startsWith(   "..   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
82	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
83	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
84	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
85	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(module);  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(module);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(module);	  ||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
86	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
87	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
88	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
89	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
90	[BUG]  [BUGGY]  var  a$$module$test=2  [Delete]  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=2  [Delete]  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=2  [Delete]  illegal  start  of  expression	  var    module$test=    {    }    ;var    a$$module$test=2    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
91	[BUG]  [BUGGY]  var  a$$module$test=2!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=2!=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=2!=  illegal  start  of  expression	  var    module$test=    {    }    ;var    a$$module$test=2    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
92	[BUG]  [BUGGY]  var  a$$module$test=2  >>  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=2  >>  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=2  >>  illegal  start  of  expression	  var    module$test=    {    }    ;var    a$$module$test=2    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
93	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
94	[BUG]  [BUGGY]  filename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  filename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	filename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
95	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
96	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
97	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
98	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
99	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  Var  module$test=  {  }  ;  if(requiredFilename.startsWith( "- "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  Var  module$test=  {  }  ;  if(requiredFilename.startsWith( "- "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  Var  module$test=  {  }  ;  if(requiredFilename.startsWith( "- "))  {  requiredFilename  =  requiredFilename.substring(1);  }	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
100	[BUG]  [BUGGY]  if(requiredFilename.equals( " "))  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.equals( " "))  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.equals( " "))  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
101	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
102	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
103	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- "))  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- "))  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- "))  {  Var  module$test=  {  }  ;  if(module$test  ==  null)  {  requiredFilename  =  module.toString();  }	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
104	[BUG]  [BUGGY]  if(requiredFilename.equals( " "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.equals( " "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.equals( " "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
105	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  requiredFilename.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
106	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  requiredFilename.length()  ==  0)  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null  ||  requiredFilename.length()  ==  0)  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null  ||  requiredFilename.length()  ==  0)  {  e.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
107	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null  ||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null  ||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
108	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
109	[BUG]  [BUGGY]  var  module$test=  {  }  else  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  }  else  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  else  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
110	[BUG]  [BUGGY]  var  module$test=  {  }  else  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  }  else  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  else  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
111	[BUG]  [BUGGY]  var  module$test=  {  }  else  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  }  else  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  else  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
112	[BUG]  [BUGGY]  var  module$test=  {  }  else  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  }  else  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  else  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
113	[BUG]  [BUGGY]  var  module$test=  {  }  else  if(currentFilename.startsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  }  else  if(currentFilename.startsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  else  if(currentFilename.startsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
114	[BUG]  [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=3  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=3  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  ;var  a$$module$test=3	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
115	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
116	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
117	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
118	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
119	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
120	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  requiredFilename.substring(0,  currentFilename.length());	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
121	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
122	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
123	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
124	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
125	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
126	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
127	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
128	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
129	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
130	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
131	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
132	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
133	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
134	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
135	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
136	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
137	[BUG]  [BUGGY]  var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=	  var    module$test=    >=    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
138	[BUG]  [BUGGY]  parseModuleName(currentFilename);var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  parseModuleName(currentFilename);var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	parseModuleName(currentFilename);var  a$$module$test=	  var    module$test=    >=    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
139	[BUG]  [BUGGY]  parseModule(currentFilename);var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  parseModule(currentFilename);var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	parseModule(currentFilename);var  a$$module$test=	  var    module$test=    >=    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
140	[BUG]  [BUGGY]  var  a$$module$test=  [Delete]  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=  [Delete]  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=  [Delete]  illegal  start  of  expression	  var    module$test=    >=    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
141	[BUG]  [BUGGY]  ;var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ;var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	;var  a$$module$test=	  var    module$test=    >=    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
142	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.startsWith(   ".java   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
143	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
144	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
145	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
146	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return;  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
147	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
148	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  this;  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  this;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  this;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
149	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   ".   ".    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
150	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   ".   ".    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
151	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
152	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
153	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
154	[BUG]  [BUGGY]  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
155	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
156	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
157	[BUG]  [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	String  currentFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
158	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
159	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
160	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
161	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
162	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   "-   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
163	[BUG]  [BUGGY]  if(!requiredFilename.startsWith( "- "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(!requiredFilename.startsWith( "- "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(!requiredFilename.startsWith( "- "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   "-   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
164	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   "-   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
165	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   "-   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
166	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_PREFIX,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_PREFIX,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_PREFIX,  currentFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
167	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
168	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  requiredFilename,  currentFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
169	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  filename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  filename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  filename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
170	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_PREFIX,  actualFilename));  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_PREFIX,  actualFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_PREFIX,  actualFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
171	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
172	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
173	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
174	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
175	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
176	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(module);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(module);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(module);	  ||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
177	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
178	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
179	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
180	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
181	[BUG]  [BUGGY]  var  a$$module$test=!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=!=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=!=  illegal  start  of  expression	  var    module$test=    >>    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
182	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
183	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
184	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
185	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
186	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
187	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
188	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
189	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
190	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
191	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
192	[BUG]  [BUGGY]  Context.reportError(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.reportError(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.reportError(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
193	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  REQUIRED_FILENAME_PREFIX));  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  REQUIRED_FILENAME_PREFIX));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  REQUIRED_FILENAME_PREFIX));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
194	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   ".   ".    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
195	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);	  currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
196	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  actualFilename.length());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  currentFilename.substring(0,  actualFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  actualFilename.length());	  currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
197	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
198	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
199	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
200	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
201	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
202	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
203	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
204	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
205	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
206	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
207	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  requiredFilename);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  requiredFilename);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  requiredFilename);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
208	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".   "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".   "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
209	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    currentFilename));    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
210	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  requiredFilename,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  requiredFilename,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  requiredFilename,  currentFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    currentFilename));    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
211	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  sourceName));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  sourceName));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  sourceName));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    currentFilename));    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
212	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    currentFilename));    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
213	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
214	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
215	[BUG]  [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
216	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
217	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
218	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
219	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
220	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
221	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
222	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
223	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
224	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
225	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
226	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
227	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    module    =    module.getModule();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
228	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    module    =    module.getModule();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
229	[BUG]  [BUGGY]  module  =  module.getModule();  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  module  =  module.getModule();  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	module  =  module.getModule();	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    module    =    module.getModule();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
230	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    module    =    module.getModule();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
231	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  module  =  module.getModule();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    module    =    module.getModule();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
232	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
233	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
234	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
235	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
236	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
237	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
238	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
239	[BUG]  [BUGGY]  pendingFilename  =  requiredFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  pendingFilename  =  requiredFilename.substring(0,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	pendingFilename  =  requiredFilename.substring(0,  currentFilename.length());	  pendingFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
240	[BUG]  [BUGGY]  pendingFilename  =  currentFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  pendingFilename  =  currentFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	pendingFilename  =  currentFilename.substring(0,  requiredFilename.length());	  pendingFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
241	[BUG]  [BUGGY]  filename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  filename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	filename  =  currentFilename.substring(0,  currentFilename.length());	  pendingFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
242	[BUG]  [BUGGY]  filename  =  currentFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  filename  =  currentFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	filename  =  currentFilename.substring(0,  requiredFilename.length());	  pendingFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
243	[BUG]  [BUGGY]  String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());	  pendingFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
244	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "-   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
245	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "-   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
246	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "-   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
247	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "-   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
248	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }	  var    module$test=    {    }    if(requiredFilename.startsWith(   "-   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
249	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
250	[BUG]  [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
251	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
252	[BUG]  [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
253	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
254	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
255	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
256	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "java/lang/   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
257	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "java/lang/ ")||  requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "java/lang/ ")||  requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "java/lang/ ")||  requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test	  var    module$test=    {    }    if(requiredFilename.startsWith(   "java/lang/   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
258	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "java/lang/ ")||  requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "java/lang/ ")||  requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "java/lang/ ")||  requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "java/lang/   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
259	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }	  var    module$test=    {    }    if(requiredFilename.startsWith(   "java/lang/   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
260	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
261	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  this.currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  currentFilename.substring(0,  this.currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  this.currentFilename.length());	  currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
262	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
263	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "module$test   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
264	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "module$test ")||  requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "module$test ")||  requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "module$test ")||  requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "module$test   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
265	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }	  var    module$test=    {    }    if(requiredFilename.startsWith(   "module$test   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
266	[BUG]  [BUGGY]  if(currentFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "module$test   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
267	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
268	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
269	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
270	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
271	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
272	[BUG]  [BUGGY]  ||  currentFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
273	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
274	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
275	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
276	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
277	[BUG]  [BUGGY]  var  module$test=  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=	  var    module$test=    [Delete]    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
278	[BUG]  [BUGGY]  var  module$test=  ==  illegal  start  of  expression  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  ==  illegal  start  of  expression  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  ==  illegal  start  of  expression  }	  var    module$test=    [Delete]    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
279	[BUG]  [BUGGY]  ||  currentFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
280	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
281	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
282	[BUG]  [BUGGY]  a$$module$test.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  a$$module$test.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	a$$module$test.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
283	[BUG]  [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
284	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
285	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  currentFilename,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  currentFilename,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  currentFilename,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
286	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR,  sourceName));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR,  sourceName));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  requiredFilename,  DEFAULT_FILENAME_SEPARATOR,  sourceName));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
287	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
288	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
289	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
290	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
291	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
292	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    System.err.println(   "Missing    module    name:   "    +    requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
293	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    System.err.println(   "Missing    module    name:   "    +    requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
294	[BUG]  [BUGGY]  System.err.println( "Missing  module  name: "  +  requiredFilename);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  System.err.println( "Missing  module  name: "  +  requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	System.err.println( "Missing  module  name: "  +  requiredFilename);	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    System.err.println(   "Missing    module    name:   "    +    requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
295	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    System.err.println(   "Missing    module    name:   "    +    requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
296	[BUG]  [BUGGY]  var  module$test=  {  illegal  start  of  expression  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  illegal  start  of  expression  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  illegal  start  of  expression  }	  var    module$test=    ==    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
297	[BUG]  [BUGGY]  var  module$test=  {  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  illegal  start  of  expression	  var    module$test=    ==    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
298	[BUG]  [BUGGY]  var  module$test=  {  illegal  start  of  expression,  requiredFilename  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  illegal  start  of  expression,  requiredFilename  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  illegal  start  of  expression,  requiredFilename	  var    module$test=    ==    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
299	[BUG]  [BUGGY]  var  a$$module$test=0  [Delete]  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=0  [Delete]  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=0  [Delete]  illegal  start  of  expression	  var    module$test=    {    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
300	[BUG]  [BUGGY]  var  a$$module$test=0!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=0!=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=0!=  illegal  start  of  expression	  var    module$test=    {    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
301	[BUG]  [BUGGY]  var  a$$module$test=0  >>  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=0  >>  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=0  >>  illegal  start  of  expression	  var    module$test=    {    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
302	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
303	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
304	[BUG]  [BUGGY]  AssertionFailedError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  AssertionFailedError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	AssertionFailedError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
305	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
306	[BUG]  [BUGGY]  &&  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  module$test=  {  }  ;	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
307	[BUG]  [BUGGY]  ||  a$$module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  a$$module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  a$$module$test=  {  }  ;	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
308	[BUG]  [BUGGY]  ||  module$test=  ==  }  ;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  module$test=  ==  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  module$test=  ==  }  ;	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
309	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "module$test "))  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "module$test "))  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "module$test "))  {  }  ;	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
310	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "module$test "))  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( "module$test "))  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "module$test "))  {  }  ;	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
311	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "/ "))  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "/ "))  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "/ "))  {  }  ;	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
312	[BUG]  [BUGGY]  parseModule(currentFilename,  module);  var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  parseModule(currentFilename,  module);  var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	parseModule(currentFilename,  module);  var  a$$module$test=	  var    modules$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
313	[BUG]  [BUGGY]  null  a$$module$test=  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  null  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	null  a$$module$test=	  var    modules$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
314	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
315	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  e.printStackTrace(System.err);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  e.printStackTrace(System.err);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  e.printStackTrace(System.err);  }	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
316	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  e.printStackTrace(System.err);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  e.printStackTrace(System.err);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  e.printStackTrace(System.err);  }	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
317	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  e.printStackTrace(System.err);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  e.printStackTrace(System.err);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js "))  {  e.printStackTrace(System.err);  }	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
318	[BUG]  [BUGGY]  e.printStackTrace(System.out);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  e.printStackTrace(System.out);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	e.printStackTrace(System.out);	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
319	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
320	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   "..   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
321	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   "..   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
322	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
323	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename);  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
324	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  e);  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
325	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
326	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
327	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  &&    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
328	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  &&    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
329	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  &&    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
330	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
331	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
332	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
333	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
334	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".js   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
335	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".js   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
336	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".js   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
337	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null  ||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null  ||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
338	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
339	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
340	[BUG]  [BUGGY]  if(currentFilename.startsWith( "/ "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( "/ "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( "/ "))  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
341	[BUG]  [BUGGY]  if(currentFilename.startsWith( "java. "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( "java. "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( "java. "))  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
342	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
343	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename,  currentFilename));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename,  currentFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
344	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  requiredFilename,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  requiredFilename,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  requiredFilename,  requiredFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
345	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  a$$module$test,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  a$$module$test,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  a$$module$test,  requiredFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
346	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   "))    {    if(currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
347	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);	  currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
348	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);	  currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
349	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
350	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  System.arraycopy(currentFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  System.arraycopy(currentFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  System.arraycopy(currentFilename,  0,  currentFilename,  0,  requiredFilename.length());  }	  currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
351	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  compiler.reportCodeChange();  }	  currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
352	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
353	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
354	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   ".   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
355	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
356	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
357	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  if(currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  if(currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".java "))  {  if(currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
358	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
359	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
360	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
361	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
362	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
363	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
364	[BUG]  [BUGGY]  if(!requiredFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(!requiredFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(!requiredFilename.startsWith( ". "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
365	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
366	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
367	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
368	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
369	[BUG]  [BUGGY]  if(module$test  ==  null)  {  var  modules$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  var  modules$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  var  modules$test=  {  }  ;  }	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
370	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  var  modules$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  var  modules$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  var  modules$test=  {  }  ;  }	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
371	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "module$test "))  {  var  modules$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "module$test "))  {  var  modules$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "module$test "))  {  var  modules$test=  {  }  ;	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
372	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  var  modules$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  var  modules$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  var  modules$test=  {  }  ;  }	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
373	[BUG]  [BUGGY]  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
374	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
375	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
376	[BUG]  [BUGGY]  requiredFilename  =  requiredFilename.substring(1);  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename  =  requiredFilename.substring(1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename  =  requiredFilename.substring(1);	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
377	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
378	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(2);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(2);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(2);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
379	[BUG]  [BUGGY]  Reporter.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Reporter.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Reporter.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
380	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  DEFAULT_FILENAME_PREFIX,  currentFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
381	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
382	[BUG]  [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
383	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".java   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
384	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".java   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
385	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".java   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
386	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".java   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
387	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
388	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
389	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
390	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
391	[BUG]  [BUGGY]  if(!reportDependencies)  {  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(!reportDependencies)  {  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(!reportDependencies)  {  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
392	[BUG]  [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
393	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
394	[BUG]  [BUGGY]  if(!reportDependencies)  {  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  requiredFilename);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(!reportDependencies)  {  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  requiredFilename);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(!reportDependencies)  {  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  requiredFilename);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
395	[BUG]  [BUGGY]  null  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  null  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	null  a$$module$test=1	  var    modules$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
396	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
397	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
398	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
399	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
400	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
401	[BUG]  [BUGGY]  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
402	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".js$ "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".js$ "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".js$ "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".java   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
403	[BUG]  [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
404	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
405	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
406	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
407	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
408	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null  ||  currentFilename.startsWith( ".js "))  {  e.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
409	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  e.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
410	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
411	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
412	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
413	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
414	[BUG]  [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
415	[BUG]  [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
416	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
417	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
418	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
419	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
420	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
421	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
422	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
423	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
424	[BUG]  [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
425	[BUG]  [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
426	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
427	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
428	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(module);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(module);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  return  toModuleName(module);  }	  ||    currentFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
429	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
430	[BUG]  [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
431	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
432	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
433	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
434	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "java/lang/   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
435	[BUG]  [BUGGY]  ;var  a$$module$test=2  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ;var  a$$module$test=2  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	;var  a$$module$test=2	  var    module$test=    {    }    ;var    a$$module$test=2    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
436	[BUG]  [BUGGY]  var  a$$module$test=3  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=3  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=3	  var    module$test=    {    }    ;var    a$$module$test=2    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
437	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
438	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
439	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
440	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".jar "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".jar "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".jar "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
441	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
442	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
443	[BUG]  [BUGGY]  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
444	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  requiredFilename.startsWith(   ".       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
445	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
446	[BUG]  [BUGGY]  requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   "..   ")||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
447	[BUG]  [BUGGY]  System.err.println( "Unable  to  find  module  name: "  +  requiredFilename);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  System.err.println( "Unable  to  find  module  name: "  +  requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	System.err.println( "Unable  to  find  module  name: "  +  requiredFilename);	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
448	[BUG]  [BUGGY]  System.err.println( "Failed  to  add  module: "  +  requiredFilename);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  System.err.println( "Failed  to  add  module: "  +  requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	System.err.println( "Failed  to  add  module: "  +  requiredFilename);	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
449	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
450	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
451	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
452	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
453	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
454	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.startsWith(   ".java   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
455	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
456	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
457	[BUG]  [BUGGY]  RequiredFilename  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  RequiredFilename  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	RequiredFilename  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
458	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(1,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  currentFilename.substring(1,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(1,  currentFilename.length());	  currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
459	[BUG]  [BUGGY]  var  a$$module$test=  >>  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=  >>  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=  >>  illegal  start  of  expression	  var    module$test=    >>    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
460	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
461	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".java "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
462	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js$ "))  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
463	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
464	[BUG]  [BUGGY]  null  var  modules$test=  {  }  ;var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  null  var  modules$test=  {  }  ;var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	null  var  modules$test=  {  }  ;var  a$$module$test=	  var    modules$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
465	[BUG]  [BUGGY]  null  var  modules$test=  ==  }  ;var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  null  var  modules$test=  ==  }  ;var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	null  var  modules$test=  ==  }  ;var  a$$module$test=	  var    modules$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
466	[BUG]  [BUGGY]  requiredFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   ")||    requiredFilename.endsWith(   ".js$   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
467	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   ")||    requiredFilename.endsWith(   ".js$   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
468	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".java ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".java ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   ")||    requiredFilename.endsWith(   ".js$   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
469	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX));  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
470	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR));  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
471	[BUG]  [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
472	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
473	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
474	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
475	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  ==  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  ==  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  var  module$test=  {  }  ;var  a$$module$test=1  ==  illegal  start  of  expression	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
476	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1!=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename  ==  null)  {  var  module$test=  {  }  ;var  a$$module$test=1!=  illegal  start  of  expression	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
477	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
478	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  var  module$test=  {  }  ;  }	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
479	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  var  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  var  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  var  module$test=  {  }  ;  }	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
480	[BUG]  [BUGGY]  if(module!=  null)  {  var  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  var  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  var  module$test=  {  }  ;  }	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
481	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  var  module$test=  {  }  ;  }	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
482	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  var  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename  ==  null)  {  var  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename  ==  null)  {  var  module$test=  {  }  ;  }	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
483	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  var  module$test=  {  }  ;	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
484	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  &&    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
485	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  &&    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
486	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
487	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".. ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".. ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".. ")||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
488	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
489	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java "))  {  if(requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   "))    {    if(currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
490	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   "))    {    if(currentFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
491	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
492	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
493	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  a$$module$test));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  a$$module$test));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  a$$module$test));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
494	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  neededFilename));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  neededFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  neededFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
495	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
496	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  MODULE_NAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  MODULE_NAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  MODULE_NAME_PREFIX,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
497	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   ".   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
498	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
499	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
500	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
501	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
502	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
503	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename  ==  null)  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename  ==  null)  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
504	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
505	[BUG]  [BUGGY]  if(module!=  null)  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
506	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  module));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  module));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  module));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    currentFilename));    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
507	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  currentFilename,  DEFAULT_FILENAME_SEPARATOR));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  currentFilename,  DEFAULT_FILENAME_SEPARATOR));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  currentFilename,  DEFAULT_FILENAME_SEPARATOR));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    currentFilename));    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
508	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    currentFilename));    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
509	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
510	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
511	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
512	[BUG]  [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
513	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
514	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
515	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( ".+  File.separator))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( ".+  File.separator))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( ".+  File.separator))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   "-   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
516	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-/ "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-/ "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-/ "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   "-   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
517	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   "-   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
518	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".js   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
519	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".js   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
520	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".js   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
521	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(1,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(1,  currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(1,  currentFilename.length());	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
522	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
523	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  expectedFilename.length());  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  expectedFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  expectedFilename.length());	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
524	[BUG]  [BUGGY]  ;var  a$$module$test=0  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ;var  a$$module$test=0  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	;var  a$$module$test=0	  var    module$test=    ==    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
525	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   "..   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
526	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
527	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
528	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    module    =    module.getModule();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
529	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    module    =    module.getModule();    }    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
530	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ": "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ": "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ": "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   ".   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
531	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
532	[BUG]  [BUGGY]  Var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Var  a$$module$test=	  var    module$test=    ==    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
533	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
534	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
535	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".js$ "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
536	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".java "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
537	[BUG]  [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
538	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
539	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
540	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
541	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
542	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
543	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- "))  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- "))  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- "))  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
544	[BUG]  [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
545	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX  +  filename,  e);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX  +  filename,  e);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX  +  filename,  e);  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
546	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX),  e);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX),  e);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX),  e);  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
547	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
548	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
549	[BUG]  [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
550	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
551	[BUG]  [BUGGY]  pendingFilename  =  currentFilename.substring(0,  actualFilename.length());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  pendingFilename  =  currentFilename.substring(0,  actualFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	pendingFilename  =  currentFilename.substring(0,  actualFilename.length());	  pendingFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
552	[BUG]  [BUGGY]  if(module$test  ==  null)  {  ||  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  ||  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  ||  module$test=  {  }  ;  }	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
553	[BUG]  [BUGGY]  if(module$test  ==  null)  {  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  module$test=  {  }  ;  }	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
554	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "$$ "))  {  }  ;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "$$ "))  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "$$ "))  {  }  ;	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
555	[BUG]  [BUGGY]  requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
556	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
557	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
558	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
559	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.printStackTrace();  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
560	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
561	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
562	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
563	[BUG]  [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
564	[BUG]  [BUGGY]  report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
565	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  var  modules$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  var  modules$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  var  modules$test=  {  }  ;  }	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
566	[BUG]  [BUGGY]  if(module!=  null)  {  var  modules$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  var  modules$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  var  modules$test=  {  }  ;  }	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
567	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- "))  {  var  modules$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- "))  {  var  modules$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- "))  {  var  modules$test=  {  }  ;  }	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
568	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
569	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
570	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "-- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }	  var    module$test=    {    }    if(requiredFilename.startsWith(   "-   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
571	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "module$test   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
572	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);	  ||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
573	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
574	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
575	[BUG]  [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
576	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
577	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
578	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
579	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
580	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
581	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
582	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
583	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
584	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
585	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
586	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
587	[BUG]  [BUGGY]  pendingFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  pendingFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	pendingFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);	  pendingFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
588	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
589	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".java "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
590	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".java "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
591	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
592	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
593	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
594	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  requiredFilename.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
595	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  ==  }  ;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  var  module$test=  ==  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  var  module$test=  ==  }  ;  }	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
596	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  var  module$test=  ==  }  ;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null)  {  var  module$test=  ==  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  var  module$test=  ==  }  ;  }	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
597	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  ==  }  ;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  ==  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  var  module$test=  ==  }  ;  }	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
598	[BUG]  [BUGGY]  if(module!=  null)  {  var  module$test=  ==  }  ;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  var  module$test=  ==  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  var  module$test=  ==  }  ;  }	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
599	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  var  module$test=  ==  }  ;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  var  module$test=  ==  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js "))  {  var  module$test=  ==  }  ;  }	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
600	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    System.err.println(   "Missing    module    name:   "    +    requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
601	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  System.err.println();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  System.err.println();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  System.err.println();  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    System.err.println(   "Missing    module    name:   "    +    requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
602	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
603	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
604	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
605	[BUG]  [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
606	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(requiredFilename);  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
607	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
608	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression	  var    module$test=    [Delete]    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
609	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression	  var    module$test=    [Delete]    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
610	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  }  illegal  start  of  expression	  var    module$test=    [Delete]    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
611	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=!=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=!=  illegal  start  of  expression	  var    module$test=    [Delete]    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
612	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=!=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=!=  illegal  start  of  expression	  var    module$test=    [Delete]    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
613	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  >=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  >=  illegal  start  of  expression  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  >=  illegal  start  of  expression	  var    module$test=    [Delete]    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
614	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
615	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(currentFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
616	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null  ||  currentFilename.length()  ==  0)  {  e.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
617	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null  ||  currentFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
618	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null  ||  currentFilename.startsWith( ".js "))  {  e.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
619	[BUG]  [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null  ||  currentFilename.startsWith( ". "))  {  e.printStackTrace();  }	  if(requiredFilename    ==    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
620	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".separator))  {  return  toModuleName(requiredFilename);  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
621	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  &&    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
622	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  &&    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
623	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  &&    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
624	[BUG]  [BUGGY]  if(currentFilename.startsWith( "java   "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( "java   "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( "java   "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
625	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
626	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
627	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js$ "))  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js$ "))  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js$ "))  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   "))    {    if(currentFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
628	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
629	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
630	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(currentFilename.startsWith(   ".js$   ")||    requiredFilename.startsWith(   "..   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
631	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
632	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
633	[BUG]  [BUGGY]  SuffixVarsCallback.log(e,  currentFilename);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  SuffixVarsCallback.log(e,  currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	SuffixVarsCallback.log(e,  currentFilename);	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
634	[BUG]  [BUGGY]  System.err.println( "Unable  to  find  module: "  +  currentFilename);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  System.err.println( "Unable  to  find  module: "  +  currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	System.err.println( "Unable  to  find  module: "  +  currentFilename);	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
635	[BUG]  [BUGGY]  System.err.println( "Unable  to  find  module  name: "  +  currentFilename);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  System.err.println( "Unable  to  find  module  name: "  +  currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	System.err.println( "Unable  to  find  module  name: "  +  currentFilename);	  e.printStackTrace(System.err);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
636	[BUG]  [BUGGY]  ||  a$$module$test=  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  a$$module$test=	  var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
637	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
638	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
639	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
640	[BUG]  [BUGGY]  parseModule(currentFilename,  false);  var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  parseModule(currentFilename,  false);  var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	parseModule(currentFilename,  false);  var  a$$module$test=	  var    module$test=    ==    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
641	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  sourceFilename,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
642	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  MODULE_NAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  MODULE_NAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  MODULE_NAME_PREFIX,  requiredFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
643	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.startsWith(   ".   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
644	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
645	[BUG]  [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "-   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
646	[BUG]  [BUGGY]  if(currentFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "-   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
647	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
648	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_PREFIX,  module));  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_PREFIX,  module));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_PREFIX,  module));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
649	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
650	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  MODULE_NAME_SEPARATOR,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  MODULE_NAME_SEPARATOR,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  MODULE_NAME_SEPARATOR,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
651	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
652	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
653	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
654	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
655	[BUG]  [BUGGY]  for(;  a$$module$test=  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  for(;  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	for(;  a$$module$test=	  var    modules$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
656	[BUG]  [BUGGY]  pendingFilename  =  currentFilename.substring(0,  this.currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  pendingFilename  =  currentFilename.substring(0,  this.currentFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	pendingFilename  =  currentFilename.substring(0,  this.currentFilename.length());	  pendingFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
657	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   ".   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
658	[BUG]  [BUGGY]  if(module.isModule())  {  var  modules$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module.isModule())  {  var  modules$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module.isModule())  {  var  modules$test=  {  }  ;  }	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
659	[BUG]  [BUGGY]  if(module$test  ==  null)  {  var  modules$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  var  modules$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  var  modules$test=  {  }  ;	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
660	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  modules$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  modules$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js "))  {  var  modules$test=  {  }  ;	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
661	[BUG]  [BUGGY]  if(currentFilename.startsWith( "module$test "))  {  var  modules$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( "module$test "))  {  var  modules$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( "module$test "))  {  var  modules$test=  {  }  ;	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
662	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  modules$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  modules$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js "))  {  var  modules$test=  {  }  ;  }	  var    modules$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
663	[BUG]  [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "module$test   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
664	[BUG]  [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }	  var    module$test=    {    }    if(requiredFilename.startsWith(   "module$test   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
665	[BUG]  [BUGGY]  if(module$test!=  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test!=  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test!=  null)  {  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "module$test   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
666	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
667	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
668	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  }	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
669	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
670	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;  }	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
671	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".java "))  {  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".java "))  {  var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".java "))  {  var  module$test=  {  }  ;	  var    module$test=    ==    }    ;    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
672	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
673	[BUG]  [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  e.printStackTrace();  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
674	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  e.printStackTrace();  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
675	[BUG]  [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null  ||  currentFilename.length()  ==  0)  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
676	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
677	[BUG]  [BUGGY]  &&  currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
678	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
679	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
680	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
681	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  var  module$test=  {  }  ;	  var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
682	[BUG]  [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( ".   "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( ".   "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  if(requiredFilename.startsWith( ".   "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   ".   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
683	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
684	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    requiredFilename.startsWith(   "..   "))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
685	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
686	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename));  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
687	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
688	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
689	[BUG]  [BUGGY]  if(currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename.endsWith(   ".   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
690	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
691	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. ")||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
692	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  currentFilename);  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename),  currentFilename);	  JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
693	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
694	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
695	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
696	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
697	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  var  module$test=  {  }	  var    module$test=    {    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
698	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..       "    +    File.separator)||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
699	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
700	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);	  currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
701	[BUG]  [BUGGY]  var  module$test=  {  illegal  start  of  expression  >>  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  module$test=  {  illegal  start  of  expression  >>  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  illegal  start  of  expression  >>	  var    module$test=    ==    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
702	[BUG]  [BUGGY]  parseModuleName(currentFilename,  module);  var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  parseModuleName(currentFilename,  module);  var  a$$module$test=  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	parseModuleName(currentFilename,  module);  var  a$$module$test=	  var    module$test=    >=    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
703	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename.endsWith(   ".js$   "))    {    if(requiredFilename.endsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
704	[BUG]  [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
705	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
706	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  expectedFilename));  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  expectedFilename));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  expectedFilename));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
707	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  if(currentFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
708	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  if(currentFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
709	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
710	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
711	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   ".   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
712	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  expectedFilename));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  expectedFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  expectedFilename));	  Context.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
713	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  currentFilename);  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX),    e);    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
714	[BUG]  [BUGGY]  if(module$test!=  null)  {  ||  module$test=  {  }  ;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test!=  null)  {  ||  module$test=  {  }  ;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test!=  null)  {  ||  module$test=  {  }  ;  }	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
715	[BUG]  [BUGGY]  &&  module$test=  ==  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  module$test=  ==  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  module$test=  ==  }  ;	  ||    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
716	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
717	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  EXPORTS,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));	  Context.report(JSError.make(sourceName,    currentFilename,    DEFAULT_FILENAME_SEPARATOR,    requiredFilename));    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
718	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
719	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(currentFilename!=    null)    {    if(requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
720	[BUG]  [BUGGY]  var  a$$module$test=1)  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  var  a$$module$test=1)  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  a$$module$test=1)	  ||    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
721	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".java "))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
722	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".separator))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".separator))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
723	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js$ "))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
724	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
725	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)||    currentFilename.startsWith(   "..   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
726	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
727	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
728	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".js   ")||    requiredFilename.startsWith(   "..   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
729	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js$ "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js$ "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
730	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ". "))  {  return  toModuleName(currentFilename);	  ||    requiredFilename.startsWith(   "..   "))    {    return    toModuleName(currentFilename);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
731	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
732	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
733	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
734	[BUG]  [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null  &&  currentFilename.length()  >  0)  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    System.err.println(   "Missing    module    name:   "    +    requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
735	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  System.err.println( "Js  module  name: "  +  requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename!=  null)  {  System.err.println( "Js  module  name: "  +  requiredFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  System.err.println( "Js  module  name: "  +  requiredFilename);  }	  if(requiredFilename!=    null)    {    e.printStackTrace();    }    else    {    System.err.println(   "Missing    module    name:   "    +    requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
736	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
737	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);	  CurrentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
738	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js "))  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
739	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js "))  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
740	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".java "))  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
741	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js$ "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js$ "))  {  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js$ "))  {  var  module$test=  {  }  ;var  a$$module$test=1	  ;var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
742	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
743	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- ")||  requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }	  if(requiredFilename.startsWith(   "-   "))    {    e.printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
744	[BUG]  [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
745	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename  ==  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
746	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js$ ")||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.endsWith( ".js$ ")||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js$ ")||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.endsWith(   ".js$   ")||    requiredFilename.endsWith(   ".js$   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
747	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   ".js$   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
748	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  ||    currentFilename.startsWith(   "..   "))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
749	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  actualFilename.length());  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  actualFilename.length());  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  actualFilename.length());	  CurrentFilename    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
750	[BUG]  [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "java/lang/   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
751	[BUG]  [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module$test  ==  null)  {  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module$test  ==  null)  {  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }	  var    module$test=    {    }    if(requiredFilename.startsWith(   "java/lang/   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
752	[BUG]  [BUGGY]  if(currentFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test=  {  }  ;	  var    module$test=    {    }    if(requiredFilename.startsWith(   "java/lang/   "))    {    junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test       ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
753	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "java   "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length());  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
754	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	  if(requiredFilename.startsWith(   ".java   "))    {    requiredFilename    =    requiredFilename.substring(0,    requiredFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
755	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(currentFilename.startsWith(   ".java   ")||    requiredFilename.startsWith(   ".java   "))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
756	[BUG]  [BUGGY]  if(module.isModule())  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(module.isModule())  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(module.isModule())  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }	  if(requiredFilename!=    null)    {    compiler.report(JSError.make(sourceName,    module,    DEFAULT_FILENAME_PREFIX));    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
757	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
758	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
759	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
760	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
761	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
762	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".java "))  {  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".java "))  {  Var  module$test=  {  }  ;  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".java "))  {  Var  module$test=  {  }  ;	  Var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
763	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
764	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
765	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js$ "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.startsWith( ".js$ "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".js$ "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  ||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
766	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  ||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  ||    requiredFilename.endsWith(   "..       "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
767	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
768	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "java   ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(requiredFilename.startsWith( "java   ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "java   ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   ".java   ")||    requiredFilename.endsWith(   ".java   "))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
769	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  &&  requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  &&    requiredFilename.startsWith(   "..       "    +    File.separator)||    currentFilename.startsWith(   "..       "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
770	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");  currentFilename  =  currentFilename.replaceAll(     "\\.js$     ",       "     ");  if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);      [BUGGY]  if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]      }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(requiredFilename.startsWith(   "..   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
